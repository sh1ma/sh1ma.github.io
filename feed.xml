<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lilyum ensemble</title>
    <description>lily, Aikatsu, Programming language, and more</description>
    <link>https://nymphium.github.io/</link>
    <atom:link href="https://nymphium.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Apr 2020 23:37:16 +0900</pubDate>
    <lastBuildDate>Wed, 01 Apr 2020 23:37:16 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>応援してくれている皆様へ</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
今回は情報量無いのでお急ぎの方は最後だけお読みください｡&lt;/p&gt;&lt;p&gt;この度晴れて学部5年間+修士の2年間を過ごした筑波大学を脱出することに成功しました｡
最近は神絵師業に圧迫されてほとんど趣味でプログラム書いたりしてないんですが､研究内容はまだ覚えてるんで詳しく聞きたい人は私を適当に捕まえてください｡
エモやま話でもしようと思ったけど忍耐の賜物こそが修士号なので､修士号を持っていることが全てを物語っていると思います｡&lt;/p&gt;&lt;p&gt;ついでに､昨日は1年と5ヶ月くらいアルバイトしていた株式会社HERPをやめたんですが､今日は株式会社HERPに入社しました｡
入社即拠点長です｡
就活は大変でした｡嘘です｡エイプリルフールなので｡
実は数社受けたんですが､ウェブテストで競プロが始まったらダルくなっちゃってやめました｡
制限時間内になんかやる系は切羽詰まってくるとスゲーイライラする上にミスが増えるので全く向いてない｡
で､バイト開始数ヶ月後の面談で｢就活どう? ていうかどこ住み? 内定いる?｣となって就活ターンエンドしました｡&lt;/p&gt;&lt;p&gt;一般に労働はつらいですが､その中でも弊社は労働のつらさが少ないです｡
技術面に関しては皆さんすごくスキルが高いく､もちろん最新の情報を追っているし､計算科学に関する素養もあるのでそういった議論もできる｡
あと人数がまだ3桁に満たないスタートアップなんで､エンジニア以外でもだいたいみんなが何者なのかが分かっているのでコミュニケーションのハードルも低い｡
T市にオフィスができたので住居や食事に変化はないですが､特に後者は嬉しい(美味しい飯屋はT市唯一のアピールポイントなので)｡&lt;/p&gt;&lt;p&gt;以下､インターネット&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.amazon.jp/hz/wishlist/ls/133BSBJ4QYBSY?ref_=wl_share&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://m.media-amazon.com/images/G/01/wishlist/collablists_graphic_2x_1060x768._CB454600986_.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.amazon.jp/hz/wishlist/ls/133BSBJ4QYBSY?ref_=wl_share&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Amazonほしい物リストを一緒に編集しましょう&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/402071&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://d2v9k5u4v94ulw.cloudfront.net/small_light(dw=1440,dh=1440,da=l,ds=n,cc=FFFFFF)/assets/images/4436611/original/da3adce3-e564-4170-9bda-55698d25bcbc?1583224129&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/402071&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;趣味や研究以外でも関数型言語を書きたいつくばの学生インターン募集! by 株式会社HERP&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;2019年11月より筑波大学付近の天久保2丁目に開設した筑波オフィスでインターンを募集してます！東京、京都拠点とのオンラインで繋が…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2020/04/01/shaka.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2020/04/01/shaka.html</guid>
        
        <category>雑感</category>
        
        
      </item>
    
      <item>
        <title>Algebraic EffectsとExtensible Effectsの違いってなんや? 関係あんの?</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;最近のエフェクトシステム2大ホットトピックといえばAlgebraic EffectsとExtensible Effectsだろう &lt;em&gt;[要出典]&lt;/em&gt;｡&lt;/p&gt;&lt;p&gt;度々この2つの違いは何なのかという質問を見ます｡&lt;/p&gt;&lt;p&gt;比較というわけでも無いんですが､今回はこの2つを並べて見比べてみましょう｡&lt;/p&gt;&lt;p&gt;そいうえばだいぶ前の&lt;a href=&quot;/pdf/ae_from_0.html&quot;&gt;発表&lt;/a&gt;でこんなこと言ってましたけど&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/pictures//2020/03/15/ae-ee/%E3%81%93%E3%82%93%E3%81%AA%E3%81%93%E3%81%A8.png&quot; alt=&quot;/pictures/2020/03/15/ae-ee/こんなこと.png&quot;&gt;
&lt;/p&gt;&lt;center&gt;図&lt;a href=&quot;#fig:compare&quot;&gt;1.1&lt;/a&gt;
. 雑な比較&lt;/center&gt;&lt;label id=&quot;fig:compare&quot;&gt;&lt;/label&gt;&lt;p&gt;本当かしら&lt;/p&gt;&lt;h1 id=&quot;2.+Algebraic+Effects+and+Handlers&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+Algebraic+Effects+and+Handlers&quot;&gt;2. Algebraic Effects and Handlers&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;PlotkinとPowerによりもたらされた､計算エフェクトを代数的に表現するという考え方&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; title=&quot;Plotkin, Gordon, and John Power. “Adequacy for algebraic effects.” International Conference on Foundations of Software Science and Computation Structures. Springer, Berlin, Heidelberg, 2001. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;
に､PlotkinとPretnarがハンドラを追加したもの&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; title=&quot;Plotkin, Gordon, and Matija Pretnar. “Handlers of algebraic effects.” European Symposium on Programming. Springer, Berlin, Heidelberg, 2009. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;
である｡&lt;/p&gt;&lt;p&gt;詳細はカツアイしますんで､本ブログをご巡回ください｡
簡単にまとめると､&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;新たな言語機能

&lt;ul&gt;
&lt;li&gt;エフェクト(仕様)とハンドラ(実装)が分離できるモジュラーな手法&lt;/li&gt;
&lt;li&gt;エフェクトシステムによって計算中にどのようなエフェクトが現れるのかが分かる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shallow/deep handler, set/row-based effect system, polymorphic/parameterized effects など様々なヴァリアントがある｡&lt;/li&gt;
&lt;li&gt;言語プリミティブやライブラリ実装がある

&lt;ul&gt;
&lt;li&gt;【余談】しばしば型(エフェクト)システムについてはないがしろにされがちな印象がある｡
たまに見る擬似コードにはvalue handlerがなく､議論すらされていない｡
computationの結果の型を調整したりするための重要なclauseなのに……｡
まあ入門用にはそんなに必要な概念ではないかもしれない｡
ボクも簡単な説明のときには省略することがある｡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;Kokaの例&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;effect reader&amp;lt;a&amp;gt; {
  fun ask() : a
}

// `e` は起きうる他のエフェクト(の列)
fun run&amp;lt;s, a, e&amp;gt;(v : s, th : () -&amp;gt; &amp;lt;reader&amp;lt;s&amp;gt; | e&amp;gt; a) : e a {
  handle(th) {
    ask() -&amp;gt; v . resume()
  }
}

fun main() : console () {
  run(&quot;hello, &quot;) {
    val e = ask()
    // print : string -&amp;gt; console ()
    // なので↑のエフェクト列変数 `e` は `&amp;lt;console&amp;gt;` にinstantiateされる
    print(e + &quot;world&quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h1 id=&quot;3.+Extensible+Effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+Extensible+Effects&quot;&gt;3. Extensible Effects&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Kiselyovらにより考案された､Monad Transformerに代わるエフェクトをガチャガチャやる方法である&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn3&quot; title=&quot;Kiselyov, Oleg, Amr Sabry, and Cameron Swords. “Extensible effects: an alternative to monad transformers.” ACM SIGPLAN Notices 48.12 (2013): 59-70. &quot; id=&quot;fnref3&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;
｡
論文を読むと分かるとおり､こちらは計算体系のようなコンセプトではなく､いい感じのライブラリの実装手法である｡&lt;/p&gt;&lt;p&gt;耳タコだと思いますが､簡単に言うと､Freeモナドのお手軽monadic interpreter作成機能にOpen Unionで型安全に拡張性をゲット(のちにFreerとかTASeqが盛られて早くなったり)という感じです｡&lt;/p&gt;&lt;p&gt;筆者はあまり詳しくないんですがまとめてみるとこんな所感&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;モナドトランスフォーマーに代わる新たなモナドの合成手法

&lt;ul&gt;
&lt;li&gt;lift地獄やインスタンス大量生成地獄からの解放&lt;/li&gt;
&lt;li&gt;Free(-er)モナド+Open Unionを使って1つのモナドに拡張的に押し込む&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リッチな型システムを利用している

&lt;ul&gt;
&lt;li&gt;HaskellとScalaのライブラリ実装が活発ですね&lt;/li&gt;
&lt;li&gt;むしろ他に実装できる言語あるんかいな&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Unionを二分探索したりするのはまあいいかな､ハンドラのあたりをちょっと論文から引用します｡
&lt;code&gt;Eff e w&lt;/code&gt;というのがエフェクト&lt;code&gt;e&lt;/code&gt;が発生しうる&lt;code&gt;w&lt;/code&gt;型の値です｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:run&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;Fig&lt;a href=&quot;#lst:run&quot;&gt;3.1&lt;/a&gt;
. run&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;プログラム&lt;a href=&quot;#lst:run&quot;&gt;3.1&lt;/a&gt;
は&lt;code&gt;Void&lt;/code&gt;エフェクトが発生する(つまりエフェクトが発生しない)値からコンストラクタを剥がす操作です｡
&lt;code&gt;admin&lt;/code&gt;は論文のターミノロジーを使えば､コルーチンをグルグル走らせて最終的な結果まで実行する関数です｡&lt;/p&gt;&lt;p&gt;続いて &lt;code&gt;Reader&lt;/code&gt;エフェクトを追加してみましょう(図&lt;a href=&quot;#lst:reader&quot;&gt;3.2&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:reader&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;Fig&lt;a href=&quot;#lst:reader&quot;&gt;3.2&lt;/a&gt;
. Readerエフェクト&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Typeable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Typeable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;----&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;handle_relay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Typeable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handle_relay&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
             &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decomp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
               &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
               &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;runReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Typeable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;runReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handle_relay&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;まず &lt;code&gt;Reader&lt;/code&gt; エフェクトを定義します｡
&lt;code&gt;e -&amp;gt; v&lt;/code&gt; というのは継続と読めばいいのかしら｡ &lt;code&gt;e&lt;/code&gt;型のholeがあるので､&lt;code&gt;Reader&lt;/code&gt;っぽく何か&lt;code&gt;e&lt;/code&gt;型の値を毎度渡していって最終的に&lt;code&gt;v&lt;/code&gt;型の値が戻ってきます｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;ask&lt;/code&gt;がスマコンというかエフェクトが発生する項です｡
&lt;code&gt;send&lt;/code&gt;で&lt;code&gt;Reader&lt;/code&gt;エフェクトをハンドラまで飛ばします｡&lt;/p&gt;&lt;p&gt;ハンドラは&lt;code&gt;runReader&lt;/code&gt;がハンドラです｡
&lt;code&gt;admin m&lt;/code&gt;でコルーチンを回しまくって度々suspendされるのを&lt;code&gt;loop&lt;/code&gt;関数で拾う､という流れです｡
&lt;code&gt;Val&lt;/code&gt;と&lt;code&gt;E&lt;/code&gt;というのが､内部で使われているFreeのようなデータ構造です｡&lt;code&gt;E&lt;/code&gt;はなにかエフェクトが発生したときで､&lt;code&gt;handle_relay&lt;/code&gt;で&lt;code&gt;u&lt;/code&gt;が分解されて第2引数か第3引数に分解された値が渡されていきます｡
補助関数&lt;code&gt;handle_relay&lt;/code&gt;に味があって&lt;sup id=&quot;fnref4&quot; title=&quot;なんでこの関数だけキャメルケースなんだろう｡写経してるときにhlintにも怒られた｡ &quot;&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;､エフェクトをハンドルしたいけどハンドルできないエフェクトだったときに適宜上位のハンドラに再送してくれる奴です｡
このへんで&lt;code&gt;Typeable&lt;/code&gt;とかがガチャガチャやって､&lt;code&gt;Reader&lt;/code&gt;エフェクトだったときに&lt;code&gt;decomp u&lt;/code&gt;が&lt;code&gt;Right&lt;/code&gt;を返すようになっていい感じにハンドルされます｡&lt;/p&gt;&lt;p&gt;こんな感じでエフェクトごとのハンドラ関数を定義していって､関数合成で様々をハンドルする関数を作ります｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- あんま自信ない､雰囲気ね雰囲気&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exc&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runExc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runReader&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このハンドラに&lt;code&gt;Reader&lt;/code&gt;エフェクトと&lt;code&gt;Exc&lt;/code&gt;エフェクト&lt;em&gt;だけ&lt;/em&gt;が発生する項を渡すと､これらエフェクトをいい感じに処理してくれて最終的に&lt;code&gt;Either String a&lt;/code&gt;が出てくる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;throwError&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;the env should return the value more than 10&quot;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&quot;4.+%E4%BA%8C%E8%80%85%E3%81%AE%E9%81%95%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E4%BA%8C%E8%80%85%E3%81%AE%E9%81%95%E3%81%84&quot;&gt;4. 二者の違い&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ご覧の通り全然違うと思うんですが､では逆に &lt;em&gt;実現可能そうなこと&lt;/em&gt; はだいたい同じにみえます｡&lt;/p&gt;&lt;p&gt;いずれもエフェクトを定義してから､ハンドラを別途定義して意味を与えています｡&lt;/p&gt;&lt;p&gt;このことはいずれもFree(-er)モナドを利用した実装方法がある(Extensible EffectsはむしろFreeが必須ですが)ことからも感じ取れると思います｡&lt;/p&gt;&lt;p&gt;というかそこ以外は全部違うんじゃないかしら
Iが違う 星が違う 違うだろ すべてが&lt;/p&gt;&lt;h2 id=&quot;4-1.+%E6%A6%82%E5%BF%B5%E7%9A%84%E3%81%AA%E9%81%95%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-1.+%E6%A6%82%E5%BF%B5%E7%9A%84%E3%81%AA%E9%81%95%E3%81%84&quot;&gt;4-1. 概念的な違い&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Algebraic Effects (and Handlers)はMoggiの提唱した$\lambda_{c}$よりもいい感じに計算エフェクトを扱うための概念として考えられた｡&lt;/p&gt;&lt;p&gt;一方Extensible EffectsはMonad Transformerに代わるモナドの合成方法として提案された実装手法である｡&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Algebraic Effectsは概念

&lt;ul&gt;
&lt;li&gt;概念なのでライブラリや言語組み込みの機能として考えることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensible Effectsは実装手法

&lt;ul&gt;
&lt;li&gt;ライブラリとしての実装方法にアイデンティティを持つので､言語組み込みの機能みたいなことはそもそも考えられない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;4-2.+%E5%AE%9F%E8%A3%85%E3%81%AE%E9%81%95%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-2.+%E5%AE%9F%E8%A3%85%E3%81%AE%E9%81%95%E3%81%84&quot;&gt;4-2. 実装の違い&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Extensible EffectsにはFreeが必須でした｡
ではAlgebraic Effectsの実装はどうかというと色々考えられます｡&lt;/p&gt;&lt;p&gt;詳細はこちらに!!!!(隙あらば我田引水)&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/pdf/effect_study.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pdf/effect_study.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/pdf/effect_study.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How do you implement Algebraic Effects? - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Algebraic EFfectsは実装が色々考えられる&lt;/li&gt;
&lt;li&gt;Extensible EffectsはFreeとOpen Unionを使った実装方法しかない

&lt;ul&gt;
&lt;li&gt;そもそもFreeとOpen Unionを使った実装方法を指してExtensible Effectsと呼んでるので……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;4-3.+%E3%81%9D%E3%81%AE%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-3.+%E3%81%9D%E3%81%AE%E4%BB%96&quot;&gt;4-3. その他&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Algebraic Effectsはエフェクトハンドラおよびvalue handlerを1つのハンドラオブジェクトとして定義できる｡
一方Extensible Effectsはそれぞれのエフェクトにたいして関数を定義し､関数合成で1つにまとめる｡
前者は各エフェクトが協調するようなハンドラを書きやすい｡
一方後者はハンドラをよりモジュラーに定義できる｡&lt;/p&gt;&lt;p&gt;他にもいろいろありそうだが､本日はこの辺で……｡&lt;/p&gt;&lt;h1 id=&quot;5.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;5. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Extensible Effectsは必須のデータ構造があるので､図&lt;a href=&quot;#fig:compare&quot;&gt;1.1&lt;/a&gt;
はまあなんとなくあたってるようなそうでもないような……｡
ま､ユーザにとっちゃああんま関係ねえ話にゃんですが……(おわり)&lt;/p&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Plotkin, Gordon, and John Power. “Adequacy for algebraic effects.” International Conference on Foundations of Software Science and Computation Structures. Springer, Berlin, Heidelberg, 2001. &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Plotkin, Gordon, and Matija Pretnar. “Handlers of algebraic effects.” European Symposium on Programming. Springer, Berlin, Heidelberg, 2009. &lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Kiselyov, Oleg, Amr Sabry, and Cameron Swords. “Extensible effects: an alternative to monad transformers.” ACM SIGPLAN Notices 48.12 (2013): 59-70. &lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;なんでこの関数だけキャメルケースなんだろう｡写経してるときにhlintにも怒られた｡ &lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 15 Mar 2020 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2020/03/15/ae-ee.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2020/03/15/ae-ee.html</guid>
        
        <category>Algebraic Effects</category>
        
        <category>Extensible Effects</category>
        
        
      </item>
    
      <item>
        <title>fcontrol/runでshallow effect handler</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
気づけば2020年になってました｡
2020年ってなんだ? SFですか?&lt;/p&gt;&lt;hr&gt;&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB+-+Algebraic+Effects%E3%81%8A%E3%81%95%E3%82%89%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB+-+Algebraic+Effects%E3%81%8A%E3%81%95%E3%82%89%E3%81%84&quot;&gt;1. はじめに - Algebraic Effectsおさらい&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本日はshallow effect handlerを実装します｡
まず &lt;em&gt;shallow&lt;/em&gt; effect handlerとはなんでしょう?
最初にalgebraic effects and handlersについておさらいします｡
あれとかこれとかそれとかを読んでおさらいしてください｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pictures/github_icon.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Algebraic Effectsであそぼう - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;こんにちは､びしょ〜じょです｡ここしばらく20行/日くらいしかコード書いてません｡いやもっと少ないかも…｡いや研究してますんで! いや〜研究もそんなにしてないな…じゃあ何を…1. はじめにAlg…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/pdf/mlday2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pdf/mlday2.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/pdf/mlday2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dive into Algebraic Effects - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Fogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&amp;amp;w=1200&amp;amp;mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DAlgebraic%2520Effects%25E3%2581%25A8%25E3%2581%25AF%253F%2520%25E5%2587%25BA%25E8%25BA%25AB%25E3%2581%25AF%253F%2520%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25AF%253F%2520%25E3%2581%259D%25E3%2581%25AE%25E7%2589%25B9%25E5%25BE%25B4%25E3%2581%25A8%25E3%2581%25AF%253F%2520%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2521%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D1caabdbc9f6c0e53b796c74eee4ee35b&amp;amp;mark-align=center%2Cmiddle&amp;amp;blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540Nymphium%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dfd6494ecf386fd4832ae2af2ec363e6c&amp;amp;blend-align=center%2Cmiddle&amp;amp;blend-mode=normal&amp;amp;s=d981ca15ae673b02388b321b0c2231ea&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effect…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;なるほど､ &lt;strong&gt;復帰可能な例外&lt;/strong&gt; ですね｡承知しました｡&lt;/p&gt;&lt;h1 id=&quot;2.+shallow+effect+handler&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+shallow+effect+handler&quot;&gt;2. shallow effect handler&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;では改めて､ &lt;em&gt;shallow&lt;/em&gt; effect handlerとはなんでしょう?
上に挙げられたシステムでは､ハンドラが取ってきた継続を起動させたときにまた発生するエフェクトが､また同じハンドラによって捕捉されています｡
逆に &lt;em&gt;shallow&lt;/em&gt; effect handler は､ハンドラが取得した継続の中で発生するエフェクトは同じハンドラによっては捕捉されず､一つ外側のハンドラまで到達します｡
論文はこちら:&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-030-02768-1_22&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://static-content.springer.com/cover/book/978-3-030-02768-1.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-030-02768-1_22&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shallow Effect Handlers&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Plotkin and Pretnar’s effect handlers offer a versatile abstraction for modular programming with user-defined effects. Traditional deep handlersare defined by folds over computation trees. In this…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;感覚としては､ &lt;code&gt;shift/reset&lt;/code&gt; の &lt;code&gt;shift&lt;/code&gt; が継続を切り取るときに &lt;code&gt;reset&lt;/code&gt; がくっついてくるけど､ &lt;code&gt;shift0/reset0&lt;/code&gt; ではくっついてこないという関係と同じですね｡
&lt;code&gt;shift/reset&lt;/code&gt; などについてはコチラ&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pictures/github_icon.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;delimited continuationの夏 - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;こんにちは､びしょ〜じょです｡control/promptとprompt tagへの理解が必要になったため､やっていきましょう｡1. continuation??? 継続??? is power…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;ごちゃごちゃ言ったけど&lt;a href=&quot;https://www.eff-lang.org/&quot;&gt;Eff言語&lt;/a&gt;でサクッと例を見てみましょう｡
こんなエフェクトと関数を定義します｡
ハンドラ&lt;code&gt;h&lt;/code&gt;で&lt;code&gt;P&lt;/code&gt;エフェクトが2回発生する式をハンドルします｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ほんで&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うん､よさそうだ｡
&lt;code&gt;(+)&lt;/code&gt; の評価は左辺の部分項を評価してから右辺に移る､と自然に考えると､最初に&lt;code&gt;P&lt;/code&gt;が発生したときにハンドラが取得する継続 &lt;code&gt;k&lt;/code&gt; は &lt;code&gt;with h handle □ + perform (P 3)&lt;/code&gt; となる｡
&lt;code&gt;□&lt;/code&gt;に&lt;code&gt;(i + i)[i/2]&lt;/code&gt;を放り込むので(中略) &lt;code&gt;4 + 9 (= 13)&lt;/code&gt; という結果が得られる｡&lt;/p&gt;&lt;p&gt;続いてshallow handlerを使います｡
ジッサイのEffにはないんですが､ &lt;code&gt;handler†&lt;/code&gt; をshallow handlerとします｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;†&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effecf&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;†&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;フーム妙だ､妙だな……｡
最初に&lt;code&gt;perform (P 2)&lt;/code&gt;をハンドルすると､取得する継続 &lt;code&gt;k&lt;/code&gt; は &lt;code&gt;□ + perform (P 3)&lt;/code&gt; です｡
おや､これは&lt;code&gt;a1&lt;/code&gt;の評価と異なりますね｡
これが &lt;strong&gt;shallow&lt;/strong&gt; です｡
ハンドラは継続の中まで追っていきません｡
なので2回めのエフェクトの発生は､ &lt;code&gt;P&lt;/code&gt; のマッチアーム内で新たに定義しているハンドラによってハンドルされます｡
なので &lt;code&gt;4 + 10 (= 14)&lt;/code&gt; が返ってきます｡&lt;/p&gt;&lt;h2 id=&quot;2-1.+%E5%BD%B9%E3%81%AB%E7%AB%8B%E3%81%A4%E3%82%93%E3%81%A7%E3%81%99%E3%81%8B%3F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+%E5%BD%B9%E3%81%AB%E7%AB%8B%E3%81%A4%E3%82%93%E3%81%A7%E3%81%99%E3%81%8B%3F&quot;&gt;2-1. 役に立つんですか?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Hillerströmらの論文では､pipe/copipeのように生成と消費をおこなう相互再帰関数を例にあげている｡
またコルーチンのようにリターンポイントをハンドラで実装するときなども､shallow handlerで事足りるだろう｡&lt;/p&gt;&lt;h1 id=&quot;3.+%3Ccode%3Efcontrol%2Frun%3C%2Fcode%3E%E3%81%A7shallow+effect+handler%E3%81%AE%E5%AE%9F%E8%A3%85&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+%3Ccode%3Efcontrol%2Frun%3C%2Fcode%3E%E3%81%A7shallow+effect+handler%E3%81%AE%E5%AE%9F%E8%A3%85&quot;&gt;3. &lt;code&gt;fcontrol/run&lt;/code&gt;でshallow effect handlerの実装&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ところでわたくし&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/tfp2020.pdf&quot;&gt;こういう研究&lt;/a&gt;をしてるんですが､実は先日もポーランドに行って&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/tfp2020-slide.pdf&quot;&gt;発表しました&lt;/a&gt;(隙自語)｡
このコルーチンによるalgebraic effectsの実装は､ハンドラがdeepになってます｡
&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/master_thesis.pdf&quot;&gt;修論&lt;/a&gt;ではshallowな方の埋め込み方法も乗せているんですが､ご覧の通りなんかぱっとしないし効率もよく無さそうだ｡&lt;/p&gt;&lt;p&gt;ところで &lt;code&gt;fcontrol/run&lt;/code&gt; というコントロールオペレータがあるのですが
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.7256&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;/images/csx_logo_front.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.7256&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Handling Control&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;CiteSeerX - Document Details (Isaac Councill, Lee Giles, Pradeep Teregowda): Non-local control transfer and exception handling have a long tradition in higher-order programming languages such as Common Lisp, Scheme and ML. However, each language stops short of providing a full and complementary approach — control handling is provided only  if the corresponding control operator is first-order. In this work, we describe handlers in a higher-order control setting. We invoke our earlier theoretical result that all denotational models of control languages invariably include capabilities that handle control. These capabilities, when incorporated into the language, form an elegant and powerful higher-order generalization of the first-order exception-handling mechanism.  1 Introduction  Control manipulation in applicative programming languages comes in two flavors. First-order control operators allow computations to abort to a dynamically enclosing control context, e.g., Common Lisp’s [23, 24]  throw and ML’s [9, 17] raise. They are invariably accompanied by forms th…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;あんまりいい感じに意味論が書かれてないんで&lt;a href=&quot;https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29&quot;&gt;&lt;code&gt;racket/control&lt;/code&gt; のドキュメント&lt;/a&gt;より引用すると&lt;/p&gt;&lt;p&gt;$$
\begin{array}{rcll}
    \left(\%\ \mathit{val}\ \mathit{proc}\right) &amp;amp; \rightarrow &amp;amp; \mathit{val} &amp;amp; \cr
    \left(\%\ E \left[\left(\mathtt{fcontrol}\ \mathit{val}\right)\right] \mathit{proc} \right) &amp;amp; \rightarrow &amp;amp; \left(\mathit{proc}\ \mathit{val}\ \left(\lambda \left(x\right)\ E\left[x\right]\right)\right) &amp;amp; \text{$E$ has no $\%$}
\end{array}
$$&lt;/p&gt;&lt;p&gt;となっています｡
&lt;code&gt;%&lt;/code&gt; は&lt;code&gt;run&lt;/code&gt;のwrapperで､&lt;code&gt;(% exp handler) === (run (λ () exp) handler)&lt;/code&gt;とのことです｡
&lt;code&gt;%&lt;/code&gt; がdelimiterで &lt;code&gt;fcontrol&lt;/code&gt; が継続を取り出すオペレータです｡
面白いのは &lt;code&gt;shift/reset&lt;/code&gt; や &lt;code&gt;control/prompt&lt;/code&gt; と違い､ &lt;code&gt;fcontrol&lt;/code&gt; 自体は継続を扱わずにdelimiterの &lt;code&gt;%&lt;/code&gt; の引数の &lt;code&gt;proc&lt;/code&gt; が継続を使います｡
アレッ?! これすでに &lt;code&gt;(% □ proc)&lt;/code&gt; がハンドラで &lt;code&gt;fcontrol&lt;/code&gt; がエフェクト発生じゃん?!
ところでRacketの &lt;code&gt;fcontrol/run&lt;/code&gt; はプロンプトタグが使えます｡
つまり &lt;code&gt;fcontrol&lt;/code&gt; が評価されたときに､どのdelimiterまで戻ればいいかをタグにより指定することができるんですねえ｡
ここで吉報です｡multi-prompt shift/resetによるEff言語の埋め込みはKiselyovらにより示されています｡
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/308969161_Eff_Directly_in_OCaml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://i1.rgstatic.net/publication/308969161_Eff_Directly_in_OCaml/links/57fb885c08ae280dd0c4b6d3/largepreview.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/308969161_Eff_Directly_in_OCaml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;(PDF) Eff Directly in OCaml&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;PDF | We present the embedding of the language Eff into OCaml, using the library of delimited continuations or the OCaml-effects branch. The embedding… | Find, read and cite all the research you need on ResearchGate&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;よし! では実装しましたはいこちら&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;racket&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;racket/control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcontrol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prompt-tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default-continuation-prompt-tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;call-with-composable-continuation&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abort-current-continuation&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;prompt-tag&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;prompt-tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Racket v7.6以前は&lt;code&gt;fcontrol/run&lt;/code&gt;をプロンプトタグを指定して使う場合にバグがあったので､最新の環境でない場合は上記のように&lt;code&gt;fcontrol&lt;/code&gt;を上書きします｡
次こそ本題です｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcontrol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-effect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make-continuation-prompt-tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エフェクト&lt;code&gt;eff&lt;/code&gt;を引数&lt;code&gt;v&lt;/code&gt;を渡して発生させるので､そのまま&lt;code&gt;fcontrol&lt;/code&gt;を使います｡
Racketの&lt;code&gt;fcontrol&lt;/code&gt;ではオプショナル引数&lt;code&gt;#:tag&lt;/code&gt;でタグを渡せます｡&lt;/p&gt;&lt;p&gt;エフェクトはプロンプトタグに対応するのでそのままです｡&lt;/p&gt;&lt;p&gt;ハンドラの実装がメインディッシュです｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-with-shallow-handler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;effh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make-continuation-prompt-tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;effh~&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcontrol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;effh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;effh~&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;(call-with-shalow-handler effe vh effh)&lt;/code&gt;で､エフェクト&lt;code&gt;eff&lt;/code&gt;をハンドルするハンドラを作ります｡
んでサンク&lt;code&gt;th&lt;/code&gt;をこのハンドラに渡すと､ハンドラのもとでサンクが潰れて評価が走ります｡&lt;/p&gt;&lt;p&gt;基本的な考え方は非常に簡単､&lt;code&gt;fcontrol/run&lt;/code&gt;がalgebraic effects &amp;amp; handlersであるという直感をそのまま使います｡
&lt;code&gt;(% (th) effh #:tag eff)&lt;/code&gt; でエフェクト&lt;code&gt;eff&lt;/code&gt;が起きたときにエフェクトハンドラ&lt;code&gt;effh&lt;/code&gt;でハンドルします｡
しかし&lt;code&gt;fcontrol/run&lt;/code&gt;に足りないものがある｡なにか｡value handlerである｡
shallow effect handlerにおいてvalue handlerが介入するタイミングはdeepな場合と同じ､値をハンドルする場合のみです｡
そしてshallowなので一度エフェクトをハンドルしたらハンドラは撤退しなければならない｡
なのでこういう戦略でいきます｡&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;戻り値は常にvalue handlerで取るようにする&lt;/li&gt;
&lt;li&gt;しかしエフェクトが発生したらvalue handlerを迂回する&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ベストか? と言われると自信ないですが､ハンドリングされた式を評価したときにエフェクトハンドラでハンドルされたかどうかのフラグを持っておくのはなんかダサいし状態を持ちたくないというのはピュアな感覚です｡
またタグをつけたり外したりもちょっと面倒です｡
なので今回はどうにかして迂回します｡
幸い今回はコントロールオペレータが1つ､&lt;code&gt;fcontrol/run&lt;/code&gt;が与えられています｡
しかも今回はプロンプトタグのおまけ付きだ｡
エフェクトハンドラの戻り値を&lt;code&gt;fcontrol&lt;/code&gt;で飛ばしてvalue handlerに渡るのを阻止しました｡
吹っ飛んだときの継続は使わなくていいので､&lt;code&gt;const&lt;/code&gt;関数でエフェクトハンドラの戻り値だけ受け取って返します｡&lt;/p&gt;&lt;p&gt;いい感じじゃないですか｡
それではコルーチンを実装してみます｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:mutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:extra-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Coroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-effect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-with-shallow-handler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Yield&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-coroutine-it!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;nv&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coroutine-it&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;yield&lt;/code&gt;はエフェクトの発生､&lt;code&gt;resume&lt;/code&gt;はハンドラ､コルーチンスレッドは継続が保存されたセルです｡
実装うまくいったかな?&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coroutine&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;displayln&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;))))]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こいつ､動くぞ……!&lt;/p&gt;&lt;h1 id=&quot;4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;4. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;fcontrol/run&lt;/code&gt;というおもしろいコントロールオペレータとそれを利用したshallow effect handlerの実装を紹介しました｡
パフォーマンス比較とか他のコントロールオペレータとの関係は読者の皆さんの課題と勝手にさせて､ええ､いただきます｡
夏休み最終日に絶望する小学生にならないように､日々こつこつと取り組んでください｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;エッ修論?! 俺は卒業したのか……｡&lt;/p&gt;</description>
        <pubDate>Thu, 20 Feb 2020 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2020/02/20/shallow_effec_handler_with_fcontrol.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2020/02/20/shallow_effec_handler_with_fcontrol.html</guid>
        
        <category>Algebraic Effects</category>
        
        <category>Delimited Continuation</category>
        
        <category>Racket</category>
        
        
      </item>
    
      <item>
        <title>『エフェクトに部分型のある代数的効果』</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これは&lt;a href=&quot;https://qiita.com/advent-calendar/2019/type&quot;&gt;型Advent Calendar 2019&lt;/a&gt;の9日目の記事の記事です｡
空いてるので9日目にタイムスリップして&lt;a href=&quot;https://nymphium.github.io/2019/12/09/ae-poly.html&quot;&gt;前日&lt;/a&gt;に続いて記事を突っ込みました｡&lt;/p&gt;&lt;p&gt;実際の記事はこちら: &lt;a href=&quot;/src/2019/12/22/effsub/main.pdf&quot;&gt;エフェクトに部分型のある代数的効果(pdf)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;実装が先立ってたものを適当に定式化しました｡&lt;/p&gt;</description>
        <pubDate>Sun, 22 Dec 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/12/22/effsub.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/12/22/effsub.html</guid>
        
        <category>型</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>『その言語､定義されてますか』</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これは&lt;a href=&quot;https://qiita.com/advent-calendar/2019/lang_dev&quot;&gt;言語実装Advent Calendar 2019&lt;/a&gt;の15日目の記事の記事です｡&lt;/p&gt;&lt;p&gt;実際の記事はこちら: &lt;a href=&quot;/src/2019/12/15/%E3%80%8E%E3%81%9D%E3%81%AE%E8%A8%80%E8%AA%9E%EF%BD%A4%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B%E3%80%8F/main.pdf&quot;&gt;その言語､定義されてますか(pdf)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;\(\LaTeX\)記法をバンバン使うため\(\KaTeX\)はイライラして台パンしちゃうと思うんで､素直に\(\LaTeX\)使わせていただきます｡
本記事は『その言語､定義されてますか』のポインタです｡&lt;/p&gt;</description>
        <pubDate>Sun, 15 Dec 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/12/15/%E3%81%9D%E3%81%AE%E8%A8%80%E8%AA%9E-%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/12/15/%E3%81%9D%E3%81%AE%E8%A8%80%E8%AA%9E-%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B.html</guid>
        
        <category>言語実装</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>Algebraic Effectsの型システム入門(2) 多相エフェクト</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;h1 id=&quot;%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;これは&lt;a href=&quot;https://nymphium.github.io/2019/08/10/ae-type-system.html&quot;&gt;前回&lt;/a&gt;の続きであり､&lt;a href=&quot;https://qiita.com/advent-calendar/2019/type&quot;&gt;型 Advent Calendar 2019&lt;/a&gt;の8日目の記事で､触れられなかった多相なエフェクトについてです｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;一瞬出てきた多相なエフェクトの例を見てみましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まずはエフェクトの定義をじっと眺める｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;'a option&lt;/code&gt;を受け取って継続に&lt;code&gt;'a&lt;/code&gt;を渡すという型である｡&lt;code&gt;'a&lt;/code&gt;という型変数で全称量化されているので多相エフェクト｡&lt;/p&gt;&lt;p&gt;ハンドラ&lt;code&gt;with_option&lt;/code&gt;は&lt;code&gt;'a option -&amp;gt; ('a -&amp;gt; 'b) -&amp;gt; 'b&lt;/code&gt; のようにコンストラクタを剥がしてくれる｡
そして&lt;code&gt;None&lt;/code&gt;が渡された場合には&lt;code&gt;None&lt;/code&gt;をそのまま返す｡
前回の内容に沿うと､ハンドラの型は&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる｡
すなわち､&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;with_option&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_of_int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(* ==&amp;gt; Some &quot;8&quot; *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Option Monadライクなことができる｡&lt;/p&gt;&lt;p&gt;ところで&lt;code&gt;int option&lt;/code&gt;の中身の&lt;code&gt;int&lt;/code&gt;をどうにかすることを考える｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_add5_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;(* ... *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実はこのコードは問題がある｡
たとえば&lt;code&gt;t&lt;/code&gt;を返しつつ&lt;code&gt;Option&lt;/code&gt;エフェクトが発生する式の型は&lt;code&gt;t!{Option}&lt;/code&gt;となり､実際に&lt;code&gt;Option&lt;/code&gt;エフェクトに渡される&lt;code&gt;'a option&lt;/code&gt;の&lt;code&gt;'a&lt;/code&gt;は何型なのか情報がない｡
つまりハンドラでは&lt;code&gt;'a option&lt;/code&gt;の&lt;code&gt;'a&lt;/code&gt;に放り込まれる型情報を使えないため､上記のように具体的な型(&lt;code&gt;int&lt;/code&gt;)を使ったコードは書けない｡
お手元のMulticore OCamlやEffで&lt;code&gt;with_add5_option&lt;/code&gt;のような関数を書くとコンパイラが怒ってくる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;4.06.1+multicoreに起こられる例&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_add5_option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;(* ... *)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* `'a` が `effect` という型名にunifyされている *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h1 id=&quot;polymorphic+effects+and+parameterized+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#polymorphic+effects+and+parameterized+effects&quot;&gt;polymorphic effects and parameterized effects&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;他にも多相なエフェクトのデザイン方法がある｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;KokaやLinksなどではこのように､型変数がエフェクトの引数の外側にある､つまり&lt;code&gt;'a&lt;/code&gt;でパラメタライズされている｡
このような多相なエフェクトの表現方法を &lt;strong&gt;parameterized effects&lt;/strong&gt; と呼ぶ｡
一方､これまでに紹介してきた､Effなどの多相なエフェクトの定義を &lt;strong&gt;polymorphic effects&lt;/strong&gt; と呼ぶ｡&lt;/p&gt;&lt;p&gt;parameterized effectsなら上記のようなハンドラ内で具体的な型の実装ができそうだ｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_add5_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;たとえばparameterized effectsを採用しているKoka言語ならOK&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;effect option&amp;lt;a&amp;gt; {
  fun option(v : maybe&amp;lt;a&amp;gt;): a
}

val with_add5_option : forall &amp;lt;a&amp;gt; (() -&amp;gt; &amp;lt;option&amp;lt;int&amp;gt;&amp;gt; maybe&amp;lt;a&amp;gt;) -&amp;gt; maybe&amp;lt;a&amp;gt;
= handler {
  option(m) -&amp;gt; match(m) {
    Just(v) -&amp;gt; resume(v + 5)
    Nothing -&amp;gt; Nothing
  }
  return x -&amp;gt; x
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;他にも､continuation monadのエミュレーションはparameterized effectsではできますがpolymorphic effectsではできません｡&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Multicore OCamlによる実装(RTEする) &lt;a href=&quot;https://gist.github.com/Nymphium/01619c1c63595afef20ae35984680358&quot;&gt;https://gist.github.com/Nymphium/01619c1c63595afef20ae35984680358&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kokaによる実装(well-typed) &lt;a href=&quot;https://gist.github.com/Nymphium/3632858aa979d97a07f113ec0a7f629f&quot;&gt;https://gist.github.com/Nymphium/3632858aa979d97a07f113ec0a7f629f&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h1 id=&quot;%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB%28%E6%9C%AA%E5%AE%8C%29&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB%28%E6%9C%AA%E5%AE%8C%29&quot;&gt;おわりに(未完)&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;row-based effect systemとかに話をつなげていきたかったが筆者の認識が間違いまくってたので文献を見直す必要があるのでまた今度…｡&lt;/p&gt;&lt;h1 id=&quot;%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE&quot;&gt;参考文献&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;このあたりを読むと本記事で本来書かれるはずだった内容が分かります｡&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Sekiyama, Taro, and Atsushi Igarashi. “Handling polymorphic algebraic effects.” European Symposium on Programming. Springer, Cham, 2019.&lt;/li&gt;
&lt;li&gt;Kammar, Ohad, and Matija Pretnar. “No value restriction is needed for algebraic effects and handlers.” Journal of Functional Programming 27 (2017).&lt;/li&gt;
&lt;li&gt;Leijen, Daan. Algebraic Effects for Functional Programming. Technical Report. 15 pages. &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&quot;&gt;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&lt;/a&gt;, 2016.&lt;/li&gt;
&lt;/ul&gt;</description>
        <pubDate>Mon, 09 Dec 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/12/09/ae-poly.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/12/09/ae-poly.html</guid>
        
        <category>OCaml</category>
        
        <category>型システム</category>
        
        <category>Algebraic Effects</category>
        
        <category>Koka</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>Rubyでもalgebraic effectsがしたい!</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;h1 id=&quot;%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;これは&lt;a href=&quot;https://qiita.com/advent-calendar/2019/ruby&quot;&gt;Ruby advent calendar 2019&lt;/a&gt;の7日目の記事です｡&lt;/p&gt;&lt;p&gt;こんにちは､びしょ～じょです｡
Ruby全然書かないけどふとした理由でRubyのライブラリを作りました｡
それがこちら｡
&lt;a href=&quot;https://github.com/Nymphium/ruff&quot;&gt;Nymphium/ruff: ONE-SHOT Algebraic Effects for Ruby!&lt;/a&gt;
このライブラリはone-shot algebraic effectsを提供します｡&lt;/p&gt;&lt;p&gt;本記事では､このライブラリの使い方､競合ライブラリとの比較､なぜRubyで書いたかについて触れたいと思います｡&lt;/p&gt;&lt;h1 id=&quot;Algebraic+Effects%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Algebraic+Effects%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0&quot;&gt;Algebraic Effectsってなんだ&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Algebraic Effects(またはAlgebraic Effects and Handlers, Algebraic effect Handlers, 和訳だと代数的効果(と勝手に筆者がつけてます))は最近流行りの言語機能です｡
React Hooksの開発者のDan Abramovさんがツイッターやブログでalgebraic effectsについて触れているのを見たことがある人もいると思います｡&lt;/p&gt;&lt;p&gt;機能的な側面で述べると､直感的には &lt;em&gt;継続を取得できる､復帰可能な例外およびハンドラ&lt;/em&gt; です｡
Rubyにはcall/ccあったしRubyistの皆さんに継続の説明は不要ですね｡
…すみません､しかし継続から説明するとだいぶ話が長くなるので､algebraic effectsの説明も兼ねて､手前味噌ですみませんがこちらのスライドを御覧ください｡
&lt;a href=&quot;https://nymphium.github.io/pdf/ae_from_0.html&quot;&gt;0から知った気になるAlgebraic Effects - lilyum ensemble&lt;/a&gt;&lt;/p&gt;&lt;p&gt;せっかくQiita使ってるんで､Qiitaに投稿したこちらもどうぞ｡
&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot;&gt;Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;play+with+Ruff&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#play+with+Ruff&quot;&gt;play with Ruff&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;御託はOKなんで早速コードを見ていきましょう｡
&lt;code&gt;Ruff.instance&lt;/code&gt;でエフェクトを生成し､&lt;code&gt;effect.perform&lt;/code&gt;でエフェクトを発生します
&lt;code&gt;Ruff.handler&lt;/code&gt;でハンドラを生成し､&lt;code&gt;handler.on(effect)(&amp;amp;proc)&lt;/code&gt;でエフェクト&lt;code&gt;effect&lt;/code&gt;に対するハンドラを設定します｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruff'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;with_arith&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;with_puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;with_arith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#==&amp;gt; 20&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;with_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#==&amp;gt; 10\n10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ウォーいい感じですね｡
&lt;code&gt;k&lt;/code&gt; は継続です｡
他にも見てみますか｡&lt;/p&gt;&lt;p&gt;ハンドラは&lt;code&gt;handler.to(&amp;amp;proc)&lt;/code&gt; というメソッドも持ち､ハンドルされているブロックが返す値をハンドルしてくれます｡つまりvalue handlerを設定できます｡
ログを収集するエフェクトとハンドラを定義してさっきの&lt;code&gt;Double&lt;/code&gt;も混ぜてみます｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# スマートコンストラクタ的な&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log_collector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ruff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;log:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log_collector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;with_arith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#==&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 6&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# log:hello&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# log:world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ウォーいいですね｡
&lt;a href=&quot;http://secret-garden.hatenablog.com/entry/2019/12/01/154607&quot;&gt;numbered parameter&lt;/a&gt; があればもう少し良さそうですね｡&lt;/p&gt;&lt;p&gt;これを使うといろいろ書けて(中略)良さげなエフェクト&amp;amp;ハンドラが&lt;code&gt;ruff/standard&lt;/code&gt;に定義されています｡&lt;/p&gt;&lt;p&gt;例えばasync/awaitがあります｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ruff/standard'&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Standard&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yielding &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Eidnig &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; with &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sum is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#==&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Starting a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Yielding a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Eidnig a with 423&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Starting b&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Yielding b&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Eidnig b with 793&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# sum is 1216&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;call/ccもあります!&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Call1cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;divfail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Call1cc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero?&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divfail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ==&amp;gt; [0, 1, 2]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divfail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ==&amp;gt; [1]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rubyist歓喜…と言いたいところですが本ライブラリが提供するのはcall/&lt;strong&gt;1&lt;/strong&gt;ccです｡
(あとcall/1ccといっているが&lt;code&gt;Call1cc.context&lt;/code&gt;という範囲の中でのみ使えるので実際は限定継続です｡ごめんね。)&lt;/p&gt;&lt;h1 id=&quot;%E7%AB%B6%E5%90%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E7%AB%B6%E5%90%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83&quot;&gt;競合ライブラリとの比較&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;rubygemウォッチャーならご存知かもしれませんが､Rubyにもalgebraic effectsのライブラリはすでに2つ存在します｡&lt;/p&gt;&lt;h2 id=&quot;%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fdry-rb%2Fdry-effects%22%3Edry-effects%3C%2Fa%3E&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fdry-rb%2Fdry-effects%22%3Edry-effects%3C%2Fa%3E&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dry-rb/dry-effects&quot;&gt;dry-effects&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;こちらはdry-rbというコミュニティの提供する1ライブラリのようです｡
本ライブラリと比較してハンドラの定義がややデカいです｡この辺は慣れなのであまり問題ではないかもしれません｡
しかしdry-effectsは継続が使えないようです!
この点においては本ライブラリに軍配が上がりました｡&lt;/p&gt;&lt;h2 id=&quot;%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fdigital-fabric%2Faffect%22%3Eaffect%3C%2Fa%3E&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fdigital-fabric%2Faffect%22%3Eaffect%3C%2Fa%3E&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/digital-fabric/affect&quot;&gt;affect&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;こちらは結構文法が似てますね｡
しかしこちらも継続が使えません｡
dry-effects同様､我々のほうが有利です｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;継続が使えないと上記に定義したような &lt;code&gt;Async&lt;/code&gt; や &lt;code&gt;Call1cc&lt;/code&gt; などが実装できません｡
(継続を使わずに実装できるものはDIかなんかでも実装できるので､algebraic effectsライブラリと果たして言えるのか個人的には疑わしいですが､まあ何か思想があるのかもしれません｡)&lt;/p&gt;&lt;h1 id=&quot;Why+Ruby&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Why+Ruby&quot;&gt;Why Ruby&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;再び我田引水で申し訳ないですが､こちらの方法を利用しています｡
&lt;a href=&quot;https://nymphium.github.io/2018/12/09/asymmetric-coroutines%E3%81%AB%E3%82%88%E3%82%8Boneshot-algebraic-effects%E3%81%AE%E5%AE%9F%E8%A3%85.html&quot;&gt;Asymmetric CoroutinesによるOneshot Algebraic Effectsの実装 - lilyum ensemble&lt;/a&gt;&lt;/p&gt;&lt;p&gt;簡単に述べると､コルーチンでalgebraic effectsが実装できます｡
しかしこのとき､コルーチンの残りのスレッドが継続に対応し､コルーチンの状態はコピーできないので､継続はワンショットに制限されます｡&lt;/p&gt;&lt;p&gt;ちょうど手頃に操作できるコルーチンを持っていたのがRubyだったのでとりあえず実装しておきました!!
実装内部を見てみるとパターンマッチなどが使われていてしんどかったッシュねえ…｡
Rubyにパターンマッチが正式に追加されてもっと綺麗なコードベースになってるといいですねえ｡&lt;/p&gt;&lt;p&gt;さらに､今回使ったコルーチンはasymmetric coroutineです｡
簡単にいうと &lt;code&gt;Fiber.yield&lt;/code&gt; と &lt;code&gt;Fiber.resume&lt;/code&gt; です｡
symmetric coroutineを使った実装もちょっと考えてみたいので､そのときはモダンな言語の中でもsymmetric coroutine を持つ数少ない言語のRuby(&lt;code&gt;Fiber.transfer&lt;/code&gt;)のお世話にまたなろうと思います｡&lt;/p&gt;&lt;h1 id=&quot;%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;だいたい宣伝になってしまって申し訳ないですが､とにかくRubyでもワンショットのalgebraic effectsが使えます!
Rubyは謎構文もいっぱいありOOPとも協調していい感じにalgebraic effectsが埋め込めていて快適に書けます､最高&lt;/p&gt;</description>
        <pubDate>Sat, 07 Dec 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/12/07/ruby-ae.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/12/07/ruby-ae.html</guid>
        
        <category>Ruby</category>
        
        <category>Algebraic Effects</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>koka-lang/koka REPL超入門</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;&lt;p&gt;さて､&lt;a href=&quot;research.microsoft.com/en-us/projects/koka&quot;&gt;Koka言語&lt;/a&gt;というものがある｡そして主要な処理系に&lt;a href=&quot;https://github.com/koka-lang/koka&quot;&gt;koka&lt;/a&gt;がある｡
kokaは主にHaskellで書かれており､REPLはJSが使われている｡
この記事はKoka言語ではなくkoka-lang/kokaのREPLの入門記事である｡Kokaを知りたい方は&lt;a href=&quot;https://koka-lang.github.io/koka/doc/kokaspec.html&quot;&gt;The Koka Book&lt;/a&gt;を参照のこと｡&lt;/p&gt;&lt;h1 id=&quot;%E5%87%A6%E7%90%86%E7%B3%BB%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%87%A6%E7%90%86%E7%B3%BB%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89&quot;&gt;処理系のビルド&lt;/a&gt;&lt;/h1&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git clone https://github.com/koka-lang/koka.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;koka
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;yarn &lt;span class=&quot;c&quot;&gt;# REPLを使うために必要&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここからHaskell関連のものをビルドする､特にalexをインストールしたりする｡cabalとstackの2通りがある｡
いずれかでalexをインストールする｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cabal &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;alex
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;または
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;stack &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;alex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでOK｡
&lt;code&gt;jake&lt;/code&gt;でKoka REPLが起動する､が､stackを利用した場合には&lt;code&gt;build_with_stack=true&lt;/code&gt;を毎度渡す必要がある｡めんどいね｡
またreadlineやlinenoiseなどをREPL内部で利用してないのでrlwrapを利用したほうが良いだろう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rlwrap jake &lt;span class=&quot;c&quot;&gt;# ビルド時にstackを利用してたら`jake build_with_stack=true`&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;check for packages: text parsec
build: koka 0.9.0-dev (debug version)
build ok.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;out/debug/koka-0.9.0-dev  &lt;span class=&quot;nt&quot;&gt;--outdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;out/lib &lt;span class=&quot;nt&quot;&gt;-ilib&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-itest&lt;/span&gt;/algeff &lt;span class=&quot;nt&quot;&gt;-itest&lt;/span&gt;/implicits &lt;span class=&quot;nt&quot;&gt;-itest&lt;/span&gt;/ambients &lt;span class=&quot;nt&quot;&gt;-itest&lt;/span&gt;/instance &lt;span class=&quot;nt&quot;&gt;-itest&lt;/span&gt;/lib &lt;span class=&quot;nt&quot;&gt;--core&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--checkcore&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; _          _
| |        | |
| | __ ___ | | __ __ _
| |/ // _ \| |/ // _` | welcome to the koka interpreter
|   &amp;lt;| (_) |   &amp;lt;| (_| | version 0.9.0-dev (debug), Sep  8 2019
|_|\_\\___/|_|\_\\__,_| type :? for help

loading: std/core
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;hello, world
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あるいはビルドで生成されたkokaバイナリを叩けばいい｡この場合謎の引数を渡す必要はない｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;out/debug/koka-0.9.0-dev
&lt;span class=&quot;go&quot;&gt; _          _
| |        | |
| | __ ___ | | __ __ _
| |/ // _ \| |/ // _` | welcome to the koka interpreter
|   &amp;lt;| (_) |   &amp;lt;| (_| | version 0.9.0-dev (debug), Sep  8 2019
|_|\_\\___/|_|\_\\__,_| type :? for help

loading: std/core
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;hello, world
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;詳細は各ヘルプを見てほしい｡&lt;/p&gt;&lt;h1 id=&quot;%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%AE%9A%E7%BE%A9&quot;&gt;エフェクトの定義&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Koka言語といえばAlgebraic Effects and Handlersが特筆すべき機能だが､実はREPLではエフェクトの定義ができない｡ここはかなりのハマりポイントなので書いておく｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;なんでやねん&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;gt; effect foo { fun foo(v : int): int } // REPLでは複数行にまたがる定義ができない…
interactive(1, 1): error: invalid syntax
 unexpected keyword effect
 expecting expression
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Koka言語はファイルをモジュールという単位で利用する｡そしてkoka REPLは&lt;code&gt;lib/&lt;/code&gt;以下のファイルをモジュールとして読み込める｡
モジュールは &lt;code&gt;path/to/mod&lt;/code&gt; という､ライブラリディレクトリから相対パスのファイル名から拡張子 &lt;code&gt;.kk&lt;/code&gt; を除いたものを識別子とする｡
&lt;code&gt;lib/path/to/mod.kk&lt;/code&gt; というファイルの先頭に &lt;code&gt;module path/to/mod&lt;/code&gt; と書けばよい｡
とりあえず &lt;code&gt;lib/mod.kk&lt;/code&gt; というファイルに書いてみる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lib/mod.kk&quot; data-lang=&quot;lib/mod.kk&quot;&gt;module mod

public effect foo { // Kokaにはアクセス制御もあるよ
  fun foo(v : int) : int
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;そしてkoka REPLでモジュールを読み込む｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;gt; :l mod
compile: lib/mod.kk
loading: std/core
check  : mod
modules:
  mod

&amp;gt; :t foo
(v : int) -&amp;gt; foo int

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK｡ハンドラはもちろんfirst-class valueなので特に問題なく定義できる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&amp;gt; val h = handler { foo(v) -&amp;gt; { println(v) ; resume(v + 1) } }
operator branch (h) foo: resume tail
h : forall&amp;lt;a,e&amp;gt; (action : () -&amp;gt; &amp;lt;foo,console|e&amp;gt; a) -&amp;gt; &amp;lt;console|e&amp;gt; a

&amp;gt; h { foo(3) }
operator branch (h) foo: resume tail
operator branch (h) foo: resume tail
3
4

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK2｡&lt;/p&gt;&lt;h2 id=&quot;%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%86%85%E3%81%A7%E3%81%AE%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%81%A8REPL%E3%81%A7%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E5%86%85%E3%81%A7%E3%81%AE%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%81%A8REPL%E3%81%A7%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF&quot;&gt;モジュール内での演算子の定義とREPLでの読み込み&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;KokaはScalaやHaskell､OCamlなどのように演算子を定義できる｡
しかしモジュールで演算子を定義､利用すると怒られが発生する場合がある｡
多分バグなので&lt;a href=&quot;https://github.com/koka-lang/koka/issues/83&quot;&gt;報告した&lt;/a&gt;｡インターフェースファイルのパーザが記号に対応してないっぽい｡
この怒られはインターフェースファイルを消去することで回避できる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;out/op.kki
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コントリビューションチャンスです｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;これで皆さんも快適にKokaが書けるようになったかもしれません｡
メチャクチャ雑なVim syntax highlightがあるので､Vimmerはカラフルな世界でKokaを見ることができます｡
&lt;a href=&quot;https://github.com/Nymphium/vim-koka&quot;&gt;Nymphium/vim-koka: vim utilities for koka language&lt;/a&gt;&lt;/p&gt;</description>
        <pubDate>Sun, 15 Sep 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/09/15/koka-repl.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/09/15/koka-repl.html</guid>
        
        <category>Algebraic Effects</category>
        
        <category>Koka</category>
        
        
      </item>
    
      <item>
        <title>Algebraic Effectsの型システム入門</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;h1 id=&quot;%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Algebraic Effectsは計算エフェクトを扱う言語機能である｡エフェクトとハンドラから成り､エフェクトの発生をハンドラが捕捉し､なんらかの値を返してエフェクト発生部分からの計算を再開する｡エフェクト自体は何もせず､ハンドラが具体的な計算をおこないという部分が重要である｡例えばDependency Injectionにおいては､インターフェースで定義されたメソッドがエフェクトの&lt;em&gt;定義&lt;/em&gt;､メソッドを呼び出すのがエフェクトの&lt;em&gt;発生&lt;/em&gt;､インターフェースの具体的な実装が&lt;em&gt;ハンドラ&lt;/em&gt;､と対応づけることができる｡
&lt;a href=&quot;https://www.eff-lang.org&quot;&gt;Eff言語&lt;/a&gt;で実際に例をみてみる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Random&lt;/code&gt; というエフェクトを定義した｡このエフェクトを発生させると適当な&lt;code&gt;int&lt;/code&gt;型の値が得られる｡
そしてハンドラは次のようになる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;native_random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_random&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* なんか都合のいいビルトイン関数 *)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常に&lt;code&gt;0&lt;/code&gt;を返すハンドラと言語組み込みの乱数生成器を利用するハンドラの2つを用意した｡&lt;code&gt;effect Random k -&amp;gt; ...&lt;/code&gt; というマッチアームで&lt;code&gt;Random&lt;/code&gt;エフェクトを捕捉し､&lt;code&gt;continue k&lt;/code&gt;に値を渡すことで計算を再開する｡&lt;code&gt;k&lt;/code&gt;ってなんやねんとかは今回は省略する｡計算を再開できるんや｡
そしてハンドラを受け取って計算をおこなう関数を定義する｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ハンドラが第1級オブジェクトなおかげでハンドラを受け取る関数が書ける｡適当なハンドラが&lt;code&gt;Random&lt;/code&gt;の発生をキャッチしてくれると計算ができる｡
では実際に使ってみる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* prints &quot;0&quot; *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;native_random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* prints RANDOM number *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;いいですね｡&lt;code&gt;Random&lt;/code&gt;エフェクトが発生したときにどんな値が返ってくるのかがハンドラによって切り替えられるのがとにかく重要です｡&lt;/p&gt;&lt;p&gt;もう少し丁寧な解説は&lt;a href=&quot;https://nymphium.github.io/2018/10/30/what-is-algebraic-effects.html&quot;&gt;こちら&lt;/a&gt;を参照されたし｡&lt;/p&gt;&lt;h1 id=&quot;%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%9E%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%9E%8B&quot;&gt;エフェクトの型&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ところで&lt;code&gt;Random&lt;/code&gt;エフェクトが発生すると必ずハンドラに捕捉されるという保証はあるのでしょうか? Javaの&lt;code&gt;throws HogeException&lt;/code&gt;みたいになってると嬉しいんですが…｡
とりあえずエフェクトが発生した位置の残りの計算部分にエフェクトが発生したことが分かるようにマークを付けてみます｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* 1 *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* 2 *)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* Random(1)が起きた *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* Random(2)が起きた *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テキストの限界を感じています､今&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;マークが付けられた計算部分&amp;gt;&lt;/code&gt; といった感じでマークを付けてみました｡幸いにしてEffは式指向な言語なのでearly returnがなく末尾位置の式を見ればどういった値を返すのかが分かります｡返す値にマークが付いているので､&lt;code&gt;rand_with&lt;/code&gt; は&lt;code&gt;Random&lt;/code&gt;エフェクトが発生することが分かるようになりました｡したがって &lt;code&gt;rand_with&lt;/code&gt; 内の計算は &lt;code&gt;intを返すがRandomが発生する&lt;/code&gt; という型になります｡これを &lt;code&gt;int!{Random}&lt;/code&gt; と表現しましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;では&lt;code&gt;h&lt;/code&gt;の型は &lt;code&gt;int!{Random} -&amp;gt; int!{}&lt;/code&gt; とかでしょうか｡&lt;code&gt;t!{}&lt;/code&gt;は&lt;code&gt;t&lt;/code&gt;を返しつつ何もエフェクトを発生しないということを表しています｡つまり&lt;code&gt;{}&lt;/code&gt;というのは&lt;strong&gt;エフェクトの集合&lt;/strong&gt;を表すことになります｡Javaの&lt;code&gt;T throws HogeException, FugaException&lt;/code&gt; というのは&lt;code&gt;t!{HogeException, HugaException}&lt;/code&gt;といったように表現されます｡ハンドラの型についてはもう少しあとで真面目に考えてみましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%84%E3%81%A3%E3%81%B1%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%84%E3%81%A3%E3%81%B1%E3%81%84&quot;&gt;エフェクトいっぱい&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;とりあえずエフェクトを増やしてみましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;(key, value) environment&lt;/code&gt; みたいなデータ構造を仮定して&lt;code&gt;Read&lt;/code&gt;/&lt;code&gt;Write&lt;/code&gt;エフェクトを定義しました｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perfofm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なんか変な型になりましたがこうなってほしいはずです｡4行目に注目してください｡&lt;code&gt;let&lt;/code&gt;右辺では&lt;code&gt;Write&lt;/code&gt;エフェクトだけ発生していますが残りの計算部分は&lt;code&gt;{Read, Write}&lt;/code&gt;になっています｡やりたかったことは式全体の型にエフェクトが発生することを伝搬することだったので､&lt;code&gt;Write&lt;/code&gt;エフェクトが発生する部分でもそれまでに発生した&lt;code&gt;Read&lt;/code&gt;エフェクトを引き継いでいるのです｡
サブタイピングのにおいがしますね｡&lt;code&gt;{}&lt;/code&gt;がtopで､&lt;code&gt;{定義されているすべてのエフェクト}&lt;/code&gt;がbottomとしてその間にtransitiveなサブタイピング関係がスパッとできそうです｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;%E5%A4%9A%E7%9B%B8%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%28%E6%9C%AA%E5%AE%8C%29&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%A4%9A%E7%9B%B8%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%28%E6%9C%AA%E5%AE%8C%29&quot;&gt;多相エフェクト(未完)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;難しいので割愛&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* `v`の型に関して具体的な操作(`v : int`として `v * 3`とか)はキツいカモ… *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&quot;%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%9E%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%9E%8B&quot;&gt;ハンドラの型&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ハンドラは式の型からエフェクトを取り除いていくものと考えられます｡またハンドラにはvalue handlerがあり､関数のように&lt;code&gt;a -&amp;gt; b&lt;/code&gt;と受け取った値の型を変更することができます｡ではハンドラの型は &lt;code&gt;a!e =&amp;gt; b!e'&lt;/code&gt; としましょう｡ここで&lt;code&gt;e&lt;/code&gt;と&lt;code&gt;e'&lt;/code&gt;の間にはサイズに関する関係は定義する必要がありません｡というのもトップレベルで&lt;code&gt;a!{}&lt;/code&gt;となれば良いわけですから､実はハンドラを適用する前後でエフェクトの集合のサイズは必ずしも縮小していなくていいからです｡
&lt;code&gt;Random&lt;/code&gt;エフェクトをハンドルするハンドラを思い出してみましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;native_random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_random&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これはvalue handlerがidのように受け取った値をそのまま返すので型の変更がありません｡したがってどちらも&lt;code&gt;'a!{Random} =&amp;gt; 'a!{}&lt;/code&gt;と考えられます｡
…いや本当ですか? すべてのハンドラはキャッチできないエフェクトを素通しします｡なので&lt;code&gt;effect e k -&amp;gt; perform e |&amp;gt; continue k&lt;/code&gt; のようなマッチアームが暗に付属しています｡なのでこのエフェクトをして&lt;code&gt;'a!({Random} ∪ e) =&amp;gt; 'a!e&lt;/code&gt;のようになります｡
ハンドラ内部の型を見てみましょう｡
&lt;code&gt;continue k&lt;/code&gt;の型は&lt;code&gt;int -&amp;gt; 'a!e&lt;/code&gt;になります｡&lt;code&gt;int&lt;/code&gt;は&lt;code&gt;Random&lt;/code&gt;エフェクトの型に対応し､&lt;code&gt;'a!e&lt;/code&gt;は &lt;em&gt;ハンドラ全体の戻り値&lt;/em&gt; と同じになります｡ハンドルされる式と同じ型じゃないんですか? 違います｡&lt;code&gt;continue k hoge&lt;/code&gt;が表すものは､ハンドルされる式が評価されきって､更に値がvalue handlerに渡されるところまでのコントロールとなります｡なので&lt;code&gt;continue k hoge&lt;/code&gt;が返す値はvalue handlerの返す値であり､型も同様にvalue handlerの返す値の型になるのです｡value handlerの引数の型は&lt;code&gt;'a!e&lt;/code&gt;､ボディの型もこの場合は同じく&lt;code&gt;'a!e&lt;/code&gt;となります｡いい感じですね｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;∪&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;native_random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;∪&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Read&lt;/code&gt;/&lt;code&gt;Write&lt;/code&gt;エフェクトのハンドラも書いてみます｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_fresh_hash&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* なんか都合のいいデータ構造 *)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; not found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まあまあ大きな実装になりました｡環境&lt;code&gt;env&lt;/code&gt;を作ってclosingしたいので &lt;code&gt;unit -&amp;gt; (ハンドラ)&lt;/code&gt;という関数の形になっています｡&lt;code&gt;Hash&lt;/code&gt;のあたりはなんかいい感じに各位読み替えてください｡注目してほしいのは&lt;code&gt;Read&lt;/code&gt;エフェクトで環境からの読み取りに失敗した場合(&lt;code&gt;None&lt;/code&gt; マッチアームのところ)で&lt;code&gt;Left&lt;/code&gt;を返すところです｡今更ですがエフェクトハンドラは計算を再開せずにやめることもできるんや! ということで&lt;code&gt;Read&lt;/code&gt;エフェクトのハンドルでは&lt;code&gt;either&lt;/code&gt;型を返してます｡&lt;code&gt;Random&lt;/code&gt;エフェクトをキャッチしたときのことを思い出してみると､&lt;code&gt;with_fresh_hash&lt;/code&gt;の返すハンドラの戻り値の型も&lt;code&gt;either&lt;/code&gt;になってほしいわけです｡value handlerを見てみると､確かに&lt;code&gt;Right&lt;/code&gt;コンストラクタに&lt;code&gt;x&lt;/code&gt;を渡しているので&lt;code&gt;either&lt;/code&gt;です｡ヤッタネ!
&lt;code&gt;continue k hoge&lt;/code&gt;の型は先程話したとおり､value handlerの返す型と同じになります｡なので&lt;code&gt;Read&lt;/code&gt;に成功した場合も&lt;code&gt;Write&lt;/code&gt;した場合も型がいい感じに合いますね｡以上より､&lt;code&gt;with_fresh_hash&lt;/code&gt;の型は&lt;code&gt;unit -&amp;gt; ( 'a!({Read, Write} ∪ e) =&amp;gt; ((string, 'a) either)!e )&lt;/code&gt;となります｡あるいは&lt;code&gt;either&lt;/code&gt;を返す式をハンドルしてvalue handlerは受け取った値をそのまま返す実装にして &lt;code&gt;( ((string, 'a) either)!({Read, Write} ∪ e) =&amp;gt; ((string, 'a) either)!e )&lt;/code&gt;となるハンドラも良さそうですね｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_fresh_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;∪&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E6%8C%81%E3%81%A4%E5%BC%8F%E3%81%AE%E5%9E%8B+%E5%86%8D%E8%80%83&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E6%8C%81%E3%81%A4%E5%BC%8F%E3%81%AE%E5%9E%8B+%E5%86%8D%E8%80%83&quot;&gt;エフェクトを持つ式の型 再考&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;さて､ハンドラの型が分かったところでこれまで定義してきた&lt;code&gt;rand_with&lt;/code&gt;や&lt;code&gt;env_with&lt;/code&gt;の型を明らかにしましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ハンドラは&lt;code&gt;int!({Rand}) =&amp;gt; 'a!{}&lt;/code&gt;となります｡&lt;code&gt;rand_with&lt;/code&gt;では&lt;code&gt;Random&lt;/code&gt;エフェクトだけ起こることが明らかなので他のエフェクトを考慮する必要はありません｡またvalue handlerによりintが何らかの型に変わる可能性があるので､ハンドラの戻り値の型は&lt;code&gt;'a&lt;/code&gt;と多相になっています｡
したがって&lt;code&gt;rand_with&lt;/code&gt;の返す値もvalue handlerの返す値の型になるため､次のようになるのが正しそうです｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;env_with&lt;/code&gt;も見てみましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これも同様に&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&quot;%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AB&quot;&gt;エフェクトのハンドル&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;エフェクトの型とハンドラの型が明らかになったので､実際にエフェクトを発生する式からハンドラはエフェクトの型をとりのぞいてくれるのかを見てみましょう｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;env_with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_fresh_hash&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;型だけ見てみましょう｡&lt;code&gt;with_fresh_hash ()&lt;/code&gt; は&lt;code&gt;'a!({Read, Write} ∪ e) =&amp;gt; ((string, 'a) either)!e&lt;/code&gt;という型を持ちます｡これを&lt;code&gt;env_with&lt;/code&gt;に渡す｡
&lt;code&gt;env_with&lt;/code&gt;が欲しているハンドラの型は&lt;code&gt;(int!{Read, Write} =&amp;gt; 'b!{})&lt;/code&gt;です(型変数の衝突を避けるため､こちらを&lt;code&gt;'b&lt;/code&gt;としました)｡&lt;code&gt;'a&lt;/code&gt;を&lt;code&gt;int&lt;/code&gt;に特殊化すると&lt;code&gt;int!({Read, Write} ∪ e) =&amp;gt; ((string, int) either)!e&lt;/code&gt;となります｡
&lt;code&gt;int!{Read, Write}&lt;/code&gt;は&lt;code&gt;int!({Read, Write} ∪ e)&lt;/code&gt;のスーパータイプとなり､&lt;code&gt;'b&lt;/code&gt;を&lt;code&gt;(string, int) either&lt;/code&gt;で特殊化した&lt;code&gt;((string, int) either)!{}&lt;/code&gt;は&lt;code&gt;((string, int) either)!e&lt;/code&gt;のスーパータイプなので受け入れOKです｡&lt;code&gt;env_with&lt;/code&gt;の戻り値は&lt;code&gt;'b&lt;/code&gt;が特殊化されたので&lt;code&gt;((string, int) either)!{}&lt;/code&gt;となります｡
したがって&lt;code&gt;env_with (with_fresh_hash ())&lt;/code&gt;は&lt;code&gt;((string, int) either)!{}&lt;/code&gt;になりました｡いい感じですね｡&lt;/p&gt;&lt;h1 id=&quot;%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB%28%E6%9C%AA%E5%AE%8C%29&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB%28%E6%9C%AA%E5%AE%8C%29&quot;&gt;おわりに(未完)&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;だいぶ大雑把な説明になりました｡また筆者の知識不足により多相エフェクトの詳細には踏み込めなかったので悲しい｡ハンドルされないエフェクト､ハンドラ内で発生するエフェクトやエフェクト集合に関するサブタイピングなど､抑えておきたいトピックはまだあります｡
もっとまともな説明が欲しい方はこちら&lt;sup id=&quot;fnref1&quot; title=&quot;Bauer, Andrej, and Matija Pretnar. “An effect system for algebraic effects and handlers.” International Conference on Algebra and Coalgebra in Computer Science. Springer, Berlin, Heidelberg, 2013. &quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref2&quot; title=&quot;Pretnar, Matija, et al. “Efficient compilation of algebraic effects and handlers.” CW Reports (2017). &quot;&gt;&lt;a href=&quot;#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;とか､今回は説明しなかったrow typesを用いた型システム&lt;sup id=&quot;fnref3&quot; title=&quot;Leijen, Daan. Algebraic Effects for Functional Programming. Technical Report. 15 pages. https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming, 2016. &quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;などを参照されたし｡
気が向いたら多相エフェクトの話も書きたいですが､今すぐ知りたいという方は&lt;sup id=&quot;fnref4&quot; title=&quot;Sekiyama, Taro, and Atsushi Igarashi. “Handling polymorphic algebraic effects.” European Symposium on Programming. Springer, Cham, 2019. &quot;&gt;&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref5&quot; title=&quot;Kammar, Ohad, and Matija Pretnar. “No value restriction is needed for algebraic effects and handlers.” Journal of Functional Programming 27 (2017). &quot;&gt;&lt;a href=&quot;#fn5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;あたりを読んで私にご教授お願いします｡&lt;/p&gt;&lt;h2 id=&quot;%E8%BF%BD%E8%A8%98&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%98&quot;&gt;追記&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;続編: &lt;a href=&quot;https://nymphium.github.io/2019/12/09/ae-poly.html&quot;&gt;Algebraic Effectsの型システム入門(2) 多相エフェクト - Qiita&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Bauer, Andrej, and Matija Pretnar. “An effect system for algebraic effects and handlers.” International Conference on Algebra and Coalgebra in Computer Science. Springer, Berlin, Heidelberg, 2013. &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Pretnar, Matija, et al. “Efficient compilation of algebraic effects and handlers.” CW Reports (2017). &lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Leijen, Daan. Algebraic Effects for Functional Programming. Technical Report. 15 pages. &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&quot;&gt;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&lt;/a&gt;, 2016. &lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;Sekiyama, Taro, and Atsushi Igarashi. “Handling polymorphic algebraic effects.” European Symposium on Programming. Springer, Cham, 2019. &lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Kammar, Ohad, and Matija Pretnar. “No value restriction is needed for algebraic effects and handlers.” Journal of Functional Programming 27 (2017). &lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 10 Aug 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/08/10/ae-type-system.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/08/10/ae-type-system.html</guid>
        
        <category>型システム</category>
        
        <category>Algebraic Effects</category>
        
        
      </item>
    
      <item>
        <title>エフェクト､do､ANF､継続､継続</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;&lt;p&gt;修士中間発表終わったのでもう研究しなくてOK!!!!!!!!&lt;/p&gt;&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;突然ですがみなさんエフェクトを発生させていますか｡
ところでエフェクトはどこで発生するのでしょうか｡
あ! とりあえずcall-by-valueでいいですか｡はい｡&lt;/p&gt;&lt;p&gt;エフェクトは値でないexpression､つまり関数呼び出しで発生する､というのはなんとなく分かるんじゃないでしょうか｡
値を使ったり変数を参照したり&lt;sup id=&quot;fnref1&quot; title=&quot;変数の参照もエフェクトとして考えることができるがここでは割愛 &quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;するだけでなんかよくわからんことが起きては困る｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:example&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:example&quot;&gt;1.1&lt;/a&gt;
. 計算エフェクトの発生&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* ここで発生 *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;ところで計算エフェクトの発生に印を付けたいのですがOCamlでは…｡&lt;/p&gt;&lt;h1 id=&quot;2.+notion+of+computation&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+notion+of+computation&quot;&gt;2. notion of computation&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;effect-and-type systemを思い出してみましょう｡
なにか&lt;code&gt;t&lt;/code&gt;型の値を返すが､途中に計算エフェクト&lt;code&gt;T&lt;/code&gt;が発生する場合､&lt;code&gt;T t&lt;/code&gt;と書いたりします｡
高カインド型は今回あまり触れないかもしれないですが､念の為Haskellでいきましょう｡
Scalaもあるがエフェクトがどこでも発生させられるので今回はやめておこう｡
自分､ &lt;code&gt;-XStrict&lt;/code&gt; いいっすか&lt;/p&gt;&lt;h2 id=&quot;2-1.+%E5%80%A4%E3%81%AE%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A8%E7%B6%99%E7%B6%9A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+%E5%80%A4%E3%81%AE%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A8%E7%B6%99%E7%B6%9A&quot;&gt;2-1. 値の取り出しと継続&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;T t&lt;/code&gt;から&lt;code&gt;t&lt;/code&gt;を取り出したいときはどうするんでしょうか｡
そうだね､bind(&lt;code&gt;(&amp;gt;&amp;gt;=) :: T t -&amp;gt; (t -&amp;gt; T u) -&amp;gt; T u&lt;/code&gt;)だね(プログラム&lt;a href=&quot;#lst:bind&quot;&gt;2.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:bind&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:bind&quot;&gt;2.1&lt;/a&gt;
. bind&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- わかりやすくeta expansion&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;左辺で計算エフェクトが発生しつつ値が出てきて(&lt;code&gt;T t&lt;/code&gt;)､値を取り出して(&lt;code&gt;t&lt;/code&gt;)処理をおこなって値を返す(&lt;code&gt;T u&lt;/code&gt;)｡
ところでHaskellならdoがありますねえ(プログラム&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
)&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:do&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
. do記法&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 手続き感を出すためにケツセミコロン&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;#lst:bind&quot;&gt;2.1&lt;/a&gt;
から&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
への変換はみたまんまで､&lt;code&gt;do&lt;/code&gt;(の一部)は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の糖衣構文である｡
ところでこの変換により､bindの右辺が&lt;code&gt;do&lt;/code&gt;記法における残りの計算部分､つまり&lt;strong&gt;継続&lt;/strong&gt;になることが分かる｡
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;でチェインしまくるのがCPSを手で書くことにあたるのに対し､&lt;code&gt;do&lt;/code&gt;による書き方はCPSをうまく隠蔽しています｡&lt;/p&gt;&lt;h1 id=&quot;3.+A-Normal+Form%EF%BD%A4%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFMonadic+Normal+Form&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+A-Normal+Form%EF%BD%A4%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFMonadic+Normal+Form&quot;&gt;3. A-Normal Form､あるいはMonadic Normal Form&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ところでOCamlはエフェクト発生させ放題プランに加入してるのでどこでもエフェクトが発生します(プログラム&lt;a href=&quot;#lst:effectful&quot;&gt;3.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:effectful&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:effectful&quot;&gt;3.1&lt;/a&gt;
. 計算エフェクトの大量発生&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* prints &quot;hello\nhello\n11&quot; *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;計算エフェクトがどこで起きるのかよくわかんね〜〜
&lt;code&gt;e1 e2&lt;/code&gt;のような場合､先に&lt;code&gt;e2&lt;/code&gt;で発生しうるエフェクトを解消してから､つまり評価をおこなって出てきた値を､&lt;code&gt;e1&lt;/code&gt;を評価して出てきた関数に渡したい｡
ではexpressionがネストしないような形にしよう(プログラム&lt;a href=&quot;#lst:anf&quot;&gt;3.2&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:anf&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:anf&quot;&gt;3.2&lt;/a&gt;
. 値を逐一取り出し太郎&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;このような形式は&lt;em&gt;A-Normal Form&lt;/em&gt;(略してANF)と呼ばれ､&lt;code&gt;let&lt;/code&gt;の右辺はredexが一つしか無い状態に制限されている｡
それにしてもこれは&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
に近いですねえ｡
MoggiがHaskellのモナドのコンセプトとなる論文&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; title=&quot;Moggi, Eugenio. “Notions of computation and monads.” Information and computation 93.1 (1991): 55-92. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;
で計算エフェクトを扱う計算体系として提案しているものは､&lt;code&gt;let (x : t) &amp;lt;= (e1 : T t) in (e2 : T u)&lt;/code&gt;のように非常にANFに似た形の構文を持っている｡
そしてANFは&lt;strong&gt;Monadic&lt;/strong&gt; &lt;em&gt;Normal Form&lt;/em&gt;ともよばれている&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn3&quot; title=&quot;Danvy, Olivier. “A new one-pass transformation into monadic normal form.” International Conference on Compiler Construction. Springer, Berlin, Heidelberg, 2003. &quot; id=&quot;fnref3&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;
｡
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;のシグネチャを思い出してみると､&lt;code&gt;let&lt;/code&gt;をラムダ抽象でエイヤッできることと合わせれば言いたいことが分かる｡&lt;/p&gt;&lt;h1 id=&quot;4.+%E5%8F%97%E3%81%91%E7%B6%99%E3%81%8C%E3%82%8C%E3%82%8B%3Ccode%3Edo%3C%2Fcode%3E%EF%BD%A4%E3%81%9D%E3%81%97%E3%81%A6%E7%B6%99%E7%B6%9A%E3%81%AF%E3%81%AA%E3%81%9C%E7%8F%BE%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E5%8F%97%E3%81%91%E7%B6%99%E3%81%8C%E3%82%8C%E3%82%8B%3Ccode%3Edo%3C%2Fcode%3E%EF%BD%A4%E3%81%9D%E3%81%97%E3%81%A6%E7%B6%99%E7%B6%9A%E3%81%AF%E3%81%AA%E3%81%9C%E7%8F%BE%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B&quot;&gt;4. 受け継がれる&lt;code&gt;do&lt;/code&gt;､そして継続はなぜ現れるのか&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;時は令和､現在計算エフェクトを扱う機能として代数的効果が爆流行りである&lt;sup&gt;&lt;em&gt;[要出展]&lt;/em&gt;&lt;/sup&gt;｡
いや令和は関係ないんですが､代数的効果という概念の初出が2003年なので､計算機科学においては非常に新しいものである｡
代数的効果とは､計算エフェクトを代数的に扱うような言語機能である｡
代数的に､というのはソレ自体には意味がなく､ただ構造があるだけで…なんたらかんたら…｡
では意味はどこで付くかというと､ハンドラというものによって与えられる｡
代数的や例外というキーワードから､とりあえずOCamlの例外機構を思い出してもらえるとなんとなく分かってもらえるかもしれない｡&lt;/p&gt;&lt;p&gt;Eff&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
 &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn5&quot; title=&quot;Eff Programming Language - https://www.eff-lang.org/ こちらの実際のプログラム言語はMLっぽい構文になっているので本文では[4]
に従う｡ &quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;
という言語で例を見てみよう(プログラム&lt;a href=&quot;#lst:eff&quot;&gt;4.1&lt;/a&gt;
)｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
との構文的な差分として､エフェクトの発生にはわかりやすさのため､慣習的に使われる&lt;code&gt;#&lt;/code&gt;をつけるようにした｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:eff&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:eff&quot;&gt;4.1&lt;/a&gt;
. Effの例 (&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
のFig.2より引用､一部改変)&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;ここで&lt;code&gt;#get&lt;/code&gt;と&lt;code&gt;#print&lt;/code&gt;がエフェクトの発生を表している｡
また､&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
にある通り､&lt;code&gt;do y &amp;lt;- #op v in c&lt;/code&gt;は&lt;code&gt;#op(v; y. c)&lt;/code&gt;の糖衣構文となっている｡
つまり&lt;code&gt;do n &amp;lt;- #get () in e&lt;/code&gt;は&lt;code&gt;#get((); n. e)&lt;/code&gt;となる｡
おや､&lt;code&gt;#get((); n. e)&lt;/code&gt;のうち&lt;code&gt;n. e&lt;/code&gt;は継続じゃないですか､
そして&lt;code&gt;do&lt;/code&gt;の右辺でエフェクトが発生しているではないか｡
先述のとおり､エフェクトに意味を与えるのはハンドラでした｡
ハンドラでどうにかなる様子を､desugarしながら見てみよう(プログラム&lt;a href=&quot;#lst:effhandle&quot;&gt;4.2&lt;/a&gt;
)｡
&lt;label id=&quot;lst:effhandle&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:effhandle&quot;&gt;4.2&lt;/a&gt;
. 脱糖&amp;amp;エフェクトのハンドル&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_stdout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;このdesugaringを見てみると､エフェクトが&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の左辺､継続が右辺に対応しそうだ｡
Haskellにおける型クラスのようにimplicitに実装が与えられるのではなく､例外発生箇所をハンドラでexplicitにハンドルするというところが異なりますね｡&lt;/p&gt;&lt;p&gt;エフェクトが発生するとハンドラにコントロールが移り､エフェクトの引数がパターンマッチ風に渡る｡
ハンドラでは継続がファーストクラスで使える｡
継続はつまりハンドルされている式の残りの部分なので､継続を実行するとコントロールがハンドラから元の式に戻る｡&lt;/p&gt;&lt;p&gt;エフェクトを扱いたい場合に継続はなぜ現れるのか､分かってきたかもしれません｡
エフェクトに意味を与えるもの(Monadのインスタンス､エフェクトハンドラ)にコントロールが移ったあと､元の式に復帰するためには継続をハンドラに渡して呼んでもらうのがシンプルである｡
そして､&lt;code&gt;List&lt;/code&gt;モナドとか､非決定計算など､継続が複数回(あるいは末尾位置以外で)呼び出されるのがそもそも計算エフェクトに織り込まれている場合もあり､継続がファーストクラスであることがそもそもエフェクトシステムには必要なのである｡&lt;/p&gt;&lt;h1 id=&quot;5.+%E7%B6%99%E7%B6%9A%E3%81%8B%E3%82%89%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E7%B6%99%E7%B6%9A%E3%81%8B%E3%82%89%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8&quot;&gt;5. 継続からエフェクトへ&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;5-1.+OCaml4.08%E3%81%AEbinding+operator&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5-1.+OCaml4.08%E3%81%AEbinding+operator&quot;&gt;5-1. OCaml4.08のbinding operator&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;OCaml4.08で新たな構文拡張が生まれました｡
詳細はこちらに書いた｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2019/06/22/ocaml408-binding-operator.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pictures/github_icon.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2019/06/22/ocaml408-binding-operator.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OCaml 4.08のbinding operator - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;はじめにOCaml 4.08よりbinding operatorというものが追加されました｡8.24  Binding operators簡単にいうとこんなかんじ(* val ( let* ) …&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;簡単にいうと､ただならぬ&lt;code&gt;let&lt;/code&gt;が定義できる(プログラム&lt;a href=&quot;#lst:ocamlbinding&quot;&gt;5.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:ocamlbinding&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:ocamlbinding&quot;&gt;5.1&lt;/a&gt;
. binding operatorを使ったOptionモナド風&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* val ( let* ) : 'a option -&amp;gt; ('a -&amp;gt; 'b option) -&amp;gt; 'b option *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;継続が使えるようになったのでeffectfulな計算を手続き的に書けるようになった､という逆の流れである｡
流れは逆であるが､やりたかったのは上記のように&lt;em&gt;monadic&lt;/em&gt;な&lt;code&gt;let&lt;/code&gt;である｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/1947&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1841483?s=400&amp;amp;v=4&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/1947&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Add “monadic” let operators by lpw25 · Pull Request #1947 · ocaml/ocaml&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Based on a few recent comments and PRs, I thought it might be a good time to revive the idea of adding some support for &amp;amp;quot;monadic&amp;amp;quot; syntax to OCaml. I can&amp;amp;#39;t find the last at…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;=&amp;lt; 4.07までは&lt;a href=&quot;https://github.com/janestreet/ppx_let&quot;&gt;ppxによる拡張&lt;/a&gt;もあり､非常に期待されていた機能である｡&lt;/p&gt;&lt;h2 id=&quot;5-2.+%3Ccode%3EContT%3C%2Fcode%3E%0A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5-2.+%3Ccode%3EContT%3C%2Fcode%3E%0A&quot;&gt;5-2. &lt;code&gt;ContT&lt;/code&gt;
&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;継続があれば計算エフェクトを手続き的に書けるのか! ということでcontinuationモナドになんでも突っ込めばいいんじゃないか｡
そこで&lt;code&gt;ContT&lt;/code&gt; monad transformerです｡
という話を読みました!!!&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://haskell.e-bigmoon.com/posts/2018/06-26-cont-param.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;/pictures/no_image.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://haskell.e-bigmoon.com/posts/2018/06-26-cont-param.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ContT を使ってコードを綺麗にしよう！&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;はじめにContinuation (継続) について全く勉強したことが無いので Control.Monad.Cont で定義されている ContT とかいつ使うんだろうなーと思っていましたが、ついに利用機会がありました！！！僕が考えたんじゃなくて fumieval さんに相談して、教えてもらったんですけどね。&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://haskell.jp/blog/posts/2019/fallible.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://haskell.jp/blog/img/logo-square.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://haskell.jp/blog/posts/2019/fallible.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fallibleというパッケージをリリースしました - Haskell-jp&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;—タイトルの通り、fallibleというパッケージを紹介します。- [matsubara0507/fallible: interface for fallible data type like Maybe and Either. - GitHub](https://github.com/matsubara0507/fallible)ちなみに、fallibleはHaskell-jp Slackで&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h1 id=&quot;6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;6. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;継続はつよい&lt;/p&gt;&lt;p&gt;エフェクトフルコンピュテーションはおもしろい&lt;/p&gt;&lt;p&gt;DSLの組み立てにも継続がめっちゃ使えるやんみたいな話を書こうと思ったけど別の機会に｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;この記事はHERP労働時間に書かれた｡
HERPは本物のcontinuationプログラマーも募集しています｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/334093&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://d2v9k5u4v94ulw.cloudfront.net/small_light(dw=1440,dh=1440,da=l,ds=n,cc=FFFFFF)/assets/images/3926988/original/9bd536c7-433a-4e21-ab8b-9ff26fc870aa?1563425939&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/334093&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Haskellで普通にWebサービスを開発していきたいエンジニア募集！ by 株式会社HERP&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;スクラム採用を実現する採用管理プラットフォーム『HERP ATS』の新規コンポーネントの開発をお願いします．新規のコンポーネントを…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;変数の参照もエフェクトとして考えることができるがここでは割愛 &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Moggi, Eugenio. “Notions of computation and monads.” Information and computation 93.1 (1991): 55-92. &lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Danvy, Olivier. “A new one-pass transformation into monadic normal form.” International Conference on Compiler Construction. Springer, Berlin, Heidelberg, 2003. &lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Eff Programming Language - &lt;a href=&quot;https://www.eff-lang.org/&quot;&gt;https://www.eff-lang.org/&lt;/a&gt; こちらの実際のプログラム言語はMLっぽい構文になっているので本文では&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
に従う｡ &lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 21 Jul 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/07/21/effect_cont.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/07/21/effect_cont.html</guid>
        
        <category>Continuation</category>
        
        <category>CPS</category>
        
        <category>ANF</category>
        
        <category>effect system</category>
        
        <category>OCaml</category>
        
        <category>Haskell</category>
        
        
      </item>
    
  </channel>
</rss>
