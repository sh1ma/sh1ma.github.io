<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lilyum ensemble</title>
    <description>lily, Aikatsu, Programming language, and more</description>
    <link>https://nymphium.github.io/</link>
    <atom:link href="https://nymphium.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 29 Oct 2018 22:03:05 +0900</pubDate>
    <lastBuildDate>Mon, 29 Oct 2018 22:03:05 +0900</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>subfilesを使ってみんなで記事を書く､しおりも出す</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;p&gt;この度､『Dragon University 技術書典5』を手にとっていただいて誠にありがとうございました｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;70部弱売れたのでええ感じでした。ありがとうございました。 &lt;a href=&quot;https://t.co/dYxhhgDnnx&quot;&gt;pic.twitter.com/dYxhhgDnnx&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1049208145816350721?ref_src=twsrc%5Etfw&quot;&gt;October 8, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;“70部&lt;strong&gt;&lt;em&gt;弱&lt;/em&gt;&lt;/strong&gt;&quot;とありますが実際は&quot;70部&lt;strong&gt;&lt;em&gt;強&lt;/em&gt;&lt;/strong&gt;&quot;です｡
重ねてありがとございました｡&lt;/p&gt;
&lt;p&gt;さて､ここからが大事だ｡
大事な話をする｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Dragon Universityは近々ダウンロード販売をやるようなのでお待ち下さい､物理媒体を購入した方はnページ目m行目s文字目～t文字などのパスフレーズを入力すると無料でゲットできるようにする(はず)&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1049334128800219137?ref_src=twsrc%5Etfw&quot;&gt;October 8, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;してました｡&lt;/p&gt;
&lt;h2 id=&quot;20181018&quot;&gt;追記20181018&lt;/h2&gt;
&lt;p&gt;もうはじまってる!!!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1055860&quot;&gt;https://dragonuniversity.booth.pm/items/1055860&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;追記おわり&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;さて､LaTeX文書からPDFを作成してpublishした人の多くはhyperrefパッケージを使っているかと思います｡
hyperrefにはしおりを作る機能があります(図&lt;a href=&quot;#bookmarks&quot;&gt;0.1&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;bookmarks&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/bookmarks.png&quot; alt=&quot;しおり&quot; title=&quot;しおり&quot;&gt;
図&lt;a href=&quot;#bookmarks&quot;&gt;0.1&lt;/a&gt; evinceで正しく表示されるしおり
&lt;/center&gt;
&lt;p&gt;今回我々はsubfilesで各々がファイルを書いてプロジェクトのルートのmain.texで各人のmainファイルを読むようにしました｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Nymphium/nymphium.github.io/tree/source/src/latex-subfiles&quot;&gt;src/latex-subfiles&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;.
├── authors
│   ├── ore
│   │   └── main.tex
│   └── other
│       └── main.tex
└── main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/src/latex-subfiles/main.tex&quot;&gt;src/latex-subfiles/main.tex&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;main.tex&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;......
&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;authors/ore/main.tex&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;authors/other/main.tex&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/src/latex-subfiles/authors/ore/main.tex&quot;&gt;src/latex-subfiles/authors/ore/main.tex&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subfiles&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ほげほげ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;あああ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;はじめに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subsection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ほげ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;おわりに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/src/latex-subfiles/authors/other/main.tex&quot;&gt;src/latex-subfiles/authors/other/main.tex&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subfiles&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;other&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;別の話&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;はじめに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subsection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ほげ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;おわりに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;subfilesで&lt;code&gt;\maketitle&lt;/code&gt;を使うと各記事のタイトルを良い感じにいれられないので改造する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;
......
&lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\newpage\null&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\vskip&lt;/span&gt; 2em
  &lt;span class=&quot;nt&quot;&gt;\begin{center}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\let\footnote\thanks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\LARGE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\textbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;title&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\par&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% タイトル&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\vskip&lt;/span&gt; 1.5em
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\large&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\lineskip&lt;/span&gt; .5em
        &lt;span class=&quot;nt&quot;&gt;\begin{flushright}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;author &lt;span class=&quot;c&quot;&gt;% 著者名&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;\end{flushright}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\par&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;\end{center}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\par\vskip&lt;/span&gt; 1.5em
  &lt;span class=&quot;k&quot;&gt;\ifvoid\@&lt;/span&gt;abstractbox&lt;span class=&quot;k&quot;&gt;\else\centerline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\box\@&lt;/span&gt;abstractbox&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\vskip&lt;/span&gt;1.5em&lt;span class=&quot;k&quot;&gt;\fi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;section&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% ミソ&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subsection&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subsubsection&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;footnote&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;
......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この辺は好みによる｡
今回はltjsarticleの&lt;code&gt;\maketitle&lt;/code&gt;コマンドを改造している｡
section等のカウンタを0で初期化しているのがミソで､これをしないと各記事のカウンタが連番になってしまう｡
しかしそうするとしおりが壊れる(図&lt;a href=&quot;#brokenbm&quot;&gt;0.2&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;brokenbm&quot;&gt;&lt;/label&gt;
記事&lt;code&gt;あああ&lt;/code&gt;のサブセクション位置に次の記事が来てしまっている｡
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/broken.png&quot; alt=&quot;壊れたしおり&quot; title=&quot;壊れたしおり&quot;&gt;
図&lt;a href=&quot;#brokenbm&quot;&gt;0.2&lt;/a&gt; 壊れたしおり
&lt;/center&gt;
&lt;p&gt;hyperrefパッケージのオプションに&lt;code&gt;hypertexnames=false&lt;/code&gt;を渡すことで解決する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;......
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;[&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  pdfencoding=auto&lt;span class=&quot;c&quot;&gt;% 文字化け防止&lt;/span&gt;
, hypertexnames=false&lt;span class=&quot;c&quot;&gt;% ←&lt;/span&gt;
, luatex]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;hyperref&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;ok1&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/ok1.png&quot; alt=&quot;ok1&quot; title=&quot;ok1&quot;&gt;
図&lt;a href=&quot;#ok1&quot;&gt;0.3&lt;/a&gt; ok1
&lt;/center&gt;
&lt;p&gt;図&lt;a href=&quot;#bookmarks&quot;&gt;0.1&lt;/a&gt;のように記事名もしおりに入れたい｡
記事名の子に各セクションが来てほしいので｡&lt;code&gt;\maketitle&lt;/code&gt;に手を加える｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;
......
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\addcontentsline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;toc&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;part&lt;span class=&quot;p&quot;&gt;}{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\large&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;title&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% これ&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\newpage\null&lt;/span&gt;
......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;\large&lt;/code&gt;指定は目次のためである｡
親子関係はsectionの上に来てほしいのでchapterかpartにする｡
目次はchapterよりもpartのほうが見栄えが良かったのでpartにした｡&lt;/p&gt;
&lt;p&gt;そしてまた壊れる｡壊れるなぁ…｡
&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;broken2&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/broken2.png&quot; alt=&quot;broken2&quot; title=&quot;broken2&quot;&gt;
図&lt;a href=&quot;#broken2&quot;&gt;0.4&lt;/a&gt; こわれる
&lt;/center&gt;
&lt;p&gt;ここでおもむろに&lt;code&gt;\phantomsection&lt;/code&gt;を挿入する｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tex.stackexchange.com/questions/44088/when-do-i-need-to-invoke-phantomsection&quot;&gt;hyperref - When do I need to invoke \phantomsection? - TeX - LaTeX Stack Exchange&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;
......
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\phantomsection&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% addcontenstlineの前に追加&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\addcontentsline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;toc&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;part&lt;span class=&quot;p&quot;&gt;}{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\large&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;title&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\newpage\null&lt;/span&gt;
......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでやっと図&lt;a href=&quot;#bookmarks&quot;&gt;0.1&lt;/a&gt;のようになった｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ということでpdf版制作にもワザがありました｡
表紙の&quot;interpr &lt;em&gt;i&lt;/em&gt; ter&quot;も修正されていると思いますので､近々出るpdf版もよろしくおねがいします｡&lt;/p&gt;</description>
        <pubDate>Wed, 17 Oct 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F-%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F-%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99.html</guid>
        
        <category>LaTeX</category>
        
        
      </item>
    
      <item>
        <title>ML Dayやった, 新たなバイト始まった, 技術書典がある</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;p&gt;8月終わりからイベントが立て込んで､気づけば夏休みが終わってしまいました｡
悲しいね｡&lt;/p&gt;
&lt;h1 id=&quot;jssst2018&quot;&gt;JSSST2018でポスター発表した&lt;/h1&gt;
&lt;p&gt;阪大行ってきました｡
ポスターは&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/jssst2018.pdf&quot;&gt;コチラ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;帰る時にちょうど台風が来たので家の直前の改札を通るときに停電して駅から出られなくなるなどといったハートフルストーリーがありました｡&lt;/p&gt;
&lt;p&gt;万博付近に泊まったのですがららぽーと以外に飯屋がなかったので非常に厳しかった｡
モノレールの駅は面白かった｡
&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;阪大に接続しているためか、乗客の知能が高そう。 &lt;a href=&quot;https://t.co/Ydf49eB8Ap&quot;&gt;pic.twitter.com/Ydf49eB8Ap&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1034591116090257409?ref_src=twsrc%5Etfw&quot;&gt;August 28, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;内容を決めてから発表するまでが20日くらいだったのでまじで8月はオワッでした｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;終了条件未遂 &lt;a href=&quot;https://t.co/7JiPWsTLts&quot;&gt;pic.twitter.com/7JiPWsTLts&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1028466431069904897?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/%E4%BC%9A%E3%81%88%E3%82%8B%E3%83%9E%E3%82%B7%E3%83%BC%E3%83%8A%E3%83%AA%E3%83%BC%E3%81%A8%E3%82%82%E5%AD%90?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#会えるマシーナリーとも子&lt;/a&gt; &lt;a href=&quot;https://t.co/xxyK0jsmI4&quot;&gt;pic.twitter.com/xxyK0jsmI4&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1028521136387063809?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%8A%E3%82%A4%E3%83%88?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#さまざまなナイト&lt;/a&gt; &lt;a href=&quot;https://t.co/nLV0ymb1D5&quot;&gt;pic.twitter.com/nLV0ymb1D5&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1030358939081175040?ref_src=twsrc%5Etfw&quot;&gt;August 17, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;途中でKoka言語の処理系Kokaのビルドシステムの改善をやってました｡&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;koka-lang/koka&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/koka-lang/koka/pull/74&quot;&gt;buildable with stack ghc #74 - koka-lang/koka&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;ml-day-2&quot;&gt;ML Day #2で発表した&lt;/h1&gt;
&lt;p&gt;『Dive into algebraic effects』というタイトルで発表しました｡
スライドは&lt;a href=&quot;http://127.0.0.1:4000/pdf/mlday2.html&quot;&gt;コチラ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容はJSSSTで話したものを､algebraic effectsの紹介を8割くらいにして発表しました｡
とりあえず伝道できたのでよかったです｡
あと懇親会でいろいろ話せたのでよかった｡&lt;/p&gt;
&lt;p&gt;このTシャツがウケたのでよかったです｡
&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Tシャツ入手しました。 &lt;a href=&quot;https://t.co/47Jyb7rHEg&quot;&gt;pic.twitter.com/47Jyb7rHEg&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/893078289710931968?ref_src=twsrc%5Etfw&quot;&gt;August 3, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h1 id=&quot;herp&quot;&gt;HERPに入った&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/2018/08/18/%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%82%B9%E3%82%AD%E3%83%AB%E3%82%BB%E3%83%83%E3%83%88.html&quot;&gt;前回の記事&lt;/a&gt;でお仕事情報古事記を発射したところ､&lt;a href=&quot;https://twitter.com/hiroqn&quot;&gt;@hiroqn&lt;/a&gt;さんに声をかけていただいて&lt;a href=&quot;https://herp.co.jp/&quot;&gt;HERP&lt;/a&gt;に長期インターンとして雇われました｡
書いたこと無いですがHaskell案件です｡
いいですね｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ということで9月が終わった｡&lt;/p&gt;
&lt;h1 id=&quot;part-423da159f1303532&quot;&gt;技術書典がある&lt;/h1&gt;
&lt;p&gt;ここが本題だ!! いいか､いいか､技術書典え40にて&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techbookfest.org/event/tbf05/circle/45010003&quot;&gt;https://techbookfest.org/event/tbf05/circle/45010003&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/rizaudo&quot;&gt;@rizaudo&lt;/a&gt;君に声をかけられた&lt;a href=&quot;https://twitter.com/xrekkusu&quot;&gt;@xrekkusu&lt;/a&gt;､&lt;a href=&quot;https://twitter.com/rairyuGO&quot;&gt;@rairyuGO&lt;/a&gt;､わしの4人が記事を持ち寄りました｡
よろしくおねがいします｡&lt;/p&gt;
&lt;p&gt;ボクは『つくってかんたんVirtual Machine-based Interpreter』というタイトルでVM型インタプリタの設計とちょっとした実装について書きました｡
ASTからVM命令へのコンパイル規則がダラダラと書かれているのが見どころなわけですが｡
ここで推定買ってくださる皆さんにお伝えしたいのは読めば分かるとおり証明がありません｡
そもそも変換の正しさを証明するつもりはなかったのですが､変換の正しさについて何も触れられてないのは不親切だなと脱稿してから思いました💀
さらにいうと､入力する言語はlet多相相当な型システムで型が付けられそうですが､全く触れてません!!!
そして先述のコンパイル規則は､入力となるプログラムに型が付けられる(type errorではじかれない)ことを前提としているのですが､これも何も言ってねぇな!!
バグ探しおよび証明は読者への課題とします｡&lt;/p&gt;
&lt;p&gt;実装はコチラ:&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;Nymphium/techbookfest5-toylang&quot;&gt;&lt;/div&gt;
&lt;p&gt;duneでmenhirの使い方がなんとなく分かったのが個人的に嬉しいポイントでした｡
でもディレクトリを一つ深くすると死んだのでもっと知りたいな､duneのこと…｡&lt;/p&gt;
&lt;p&gt;兎にも角にも､GANやcURL､GLSLや言語処理系などといったバラエティに富みながらもそれぞれ質の高い内容となっていますので､当日はびしょ〜じょと会場で握手!!!&lt;/p&gt;</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/10/05/ML-Day%E3%82%84%E3%81%A3%E3%81%9F,-%E6%96%B0%E3%81%9F%E3%81%AA%E3%83%90%E3%82%A4%E3%83%88%E5%A7%8B%E3%81%BE%E3%81%A3%E3%81%9F,-%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%8C%E3%81%82%E3%82%8B.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/10/05/ML-Day%E3%82%84%E3%81%A3%E3%81%9F,-%E6%96%B0%E3%81%9F%E3%81%AA%E3%83%90%E3%82%A4%E3%83%88%E5%A7%8B%E3%81%BE%E3%81%A3%E3%81%9F,-%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%8C%E3%81%82%E3%82%8B.html</guid>
        
        <category>雑感</category>
        
        <category>就活目的</category>
        
        
      </item>
    
      <item>
        <title>現在のスキルセット</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
こんなことがあったんや｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;先生にインターンに面接で落ちた話をしたら「君は自己アピールが下手だからね」と言われたので､自分のスキルセットをピタリと表す何かをそのうちまとめたいと思う｡でもまず､どこまでが自分でどこまでが自分じゃない…??&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1028226226274484225?ref_src=twsrc%5Etfw&quot;&gt;August 11, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;非常に厳しいですね｡
仕事をしたくないという気持ちも確かですが! 無職でジリ貧になって餓死というケースはもっとしたくないので職はゲットしようと思ってます｡&lt;/p&gt;
&lt;h1 id=&quot;part-6542ac871bb&quot;&gt;専門&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/&quot;&gt;プログラム論理研究室&lt;/a&gt;に在籍し､主に関数型言語を対象とした､プログラム言語に関する研究をおこなっています｡
プログラム変換(最適化､コンパイル)や､特定の言語機能を切り出して､そこで成り立つ良い性質を考えたりそれに実装を与えたりしています｡
最近はalgebaic effectsやdelimited continuationsの近辺で研究をおこなっています｡&lt;/p&gt;
&lt;p&gt;型に関する研究もする研究室に在籍しているので､TypeScript､Scala､Haskellといった複雑な型システムを持つ言語でもそれなりには戦えると思ってます｡&lt;/p&gt;
&lt;h1 id=&quot;part-2ea808999f32227c&quot;&gt;開発環境&lt;/h1&gt;
&lt;p&gt;NeoVim､zsh､tmux on ArchLinux&lt;/p&gt;
&lt;h1 id=&quot;part-65431360d45&quot;&gt;言語&lt;/h1&gt;
&lt;h2 id=&quot;lua&quot;&gt;Lua&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4年くらい書いてる&lt;/li&gt;
&lt;li&gt;Lua5.{1, 2, 3}の違いが分かる&lt;/li&gt;
&lt;li&gt;Luaの言語処理系を作れる&lt;/li&gt;
&lt;li&gt;Luaで言語処理系を作れる&lt;/li&gt;
&lt;li&gt;Luaのコードを見ればどんなLua VMのバイトコードにコンパイルされるか検討が付く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ボクが長所や短所を一番理解できてる言語がこれだと思います｡
C APIはノータッチなのでわかりません…｡&lt;/p&gt;
&lt;h2 id=&quot;ocaml&quot;&gt;OCaml&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2年くらい書いてる&lt;/li&gt;
&lt;li&gt;OCamlで言語処理系を作れる&lt;/li&gt;
&lt;li&gt;core言語まぁまぁ分かる&lt;/li&gt;
&lt;li&gt;module言語ちょっと分かる&lt;/li&gt;
&lt;li&gt;type systemまぁまぁ分かる&lt;/li&gt;
&lt;li&gt;duneちょっとだけ分かる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;open Core&lt;/code&gt;はあまり書かない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;研究で使ってます｡
表現力や型の強さがちょうどいい言語だと思う｡&lt;/p&gt;
&lt;h2 id=&quot;scala&quot;&gt;Scala&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2ヶ月くらい書いてる&lt;/li&gt;
&lt;li&gt;sbtちょっと使える&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年春になにか言語覚えようということで書き始めました｡
traitやサブタイピングなどといったリッチな型システムやナウい言語機能があり､
Javaとの接続がありながらCatsやScalazといった関数型プログラミングを支援する強力なライブラリもある､
OOPもFPもできる良い言語だと思います｡
sbtの起動は確かに遅い｡&lt;/p&gt;
&lt;h2 id=&quot;part-b8a957a&quot;&gt;他&lt;/h2&gt;
&lt;h3 id=&quot;racket-scheme&quot;&gt;Racket/Scheme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1年くらい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;論文のモデル言語としてSchemeのサブセットが採用されることがままあるのでちょっと分かる｡
RacketはTyped Racketがちょっと書ける｡
また(delimited) continuationsの調査のために度々書いたりする｡&lt;/p&gt;
&lt;h3 id=&quot;javascript&quot;&gt;JavaScript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2年くらい&lt;/li&gt;
&lt;li&gt;エコシステムは知らない&lt;/li&gt;
&lt;li&gt;生JSしか書いてない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必要最小限書く&lt;/p&gt;
&lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2年くらい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;構文がデカすぎて全容をまるで把握できてない｡
このブログはJekyllで作られており､プラグインのいくつかは自分で書いてます｡
他にもデータ処理ではシェルスクリプトに次いで書捨てのスクリプトを書いて使っています｡
Onigurumaがとにかく使える｡&lt;/p&gt;
&lt;h3 id=&quot;bash-zsh&quot;&gt;Bash/Zsh&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;6年くらい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コマンドラインに日々書いてる｡
Makefileと共にビルドや自動化でよく使っている｡&lt;/p&gt;
&lt;h3 id=&quot;part-6542f442539&quot;&gt;英語&lt;/h3&gt;
&lt;p&gt;GitHubでコミュニケーションを取ったりドキュメントを読んだり論文を読む程度には分かる&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;プログラム言語は専門分野なので､上記以外の言語でも書こうと思えばそれなりの早さで書けるようになると自負しています｡&lt;/p&gt;
&lt;h1 id=&quot;part-50cfe279c854edbe&quot;&gt;主なプロダクツ&lt;/h1&gt;
&lt;h2 id=&quot;opeth&quot;&gt;&lt;a href=&quot;https://github.com/Nymphium/opeth&quot;&gt;Opeth&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lua 5.3 VMのバイトコード最適化器｡
副産物として､Lua 5.3 VMのバイトコードを制御フローグラフにしてビジュアライズするツールや､アセンブリ言語風にLua 5.3 VMの命令セットを書いてバイトコードにコンパイルするコンパイラ､VM命令を実行したりブレークポイントを付けてステップ実行できる､gdbみたいなデバッガを作りました｡
ビジュアライザで使った､&lt;a href=&quot;https://github.com/Nymphium/lua-graphviz&quot;&gt;graphvizのLuaバインディング&lt;/a&gt;も自作｡
Lua 5.3 VMのバイトコードの仕様は公開されていないため､Lua 5.1 VMのバイトコードの非公式なテキストやソースコードを読んで解析をおこなった｡&lt;/p&gt;
&lt;h2 id=&quot;pnyao&quot;&gt;&lt;a href=&quot;https://github.com/Nymphium/pnyao&quot;&gt;pnyao&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文献管理ツール｡
Scalaを習いながら作った｡
Play frameworkを使っている｡
Scalaを使っているサーバーサイドはだいたい実装ができているので､実はこれ以降はJSしか書かないかも｡&lt;/p&gt;
&lt;h1 id=&quot;part-37868f09a1cf28d&quot;&gt;その他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Linuxちょっと使える(6年)&lt;/li&gt;
&lt;li&gt;Git使える&lt;/li&gt;
&lt;li&gt;GitHub(issues, pull requests, CI)使える&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;何書けばいいのか分からないピ…｡&lt;/p&gt;
&lt;p&gt;バイト先情報もお待ちしております｡
ご連絡は&lt;a href=&quot;https://twitter.com/Nymphium&quot;&gt;@Nymphium &lt;/a&gt;かs1311350 at gmail.comまでお願いします｡&lt;/p&gt;
&lt;h1 id=&quot;20181004&quot;&gt;追記20181004&lt;/h1&gt;
&lt;p&gt;ツイッター経由で&lt;a href=&quot;https://herp.co.jp/&quot;&gt;HERP&lt;/a&gt;に(多分)長期インターンとして入りました｡
この度は誠にありがとうございました｡
リモートでOKということで家からでなくて最高です｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ツイッで職を探したらHERPに拾われました。写真はブレた牛タンです。 &lt;a href=&quot;https://t.co/6WHdopXHLK&quot;&gt;pic.twitter.com/6WHdopXHLK&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1047447450338742272?ref_src=twsrc%5Etfw&quot;&gt;October 3, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;この牛タンは美味かった｡&lt;/p&gt;
&lt;p&gt;2020年3月卒業後のお仕事はまだ探してますんでよろしくおねがいします｡&lt;/p&gt;
&lt;p&gt;追記おわり&lt;/p&gt;
&lt;hr&gt;</description>
        <pubDate>Sat, 18 Aug 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/08/18/%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%82%B9%E3%82%AD%E3%83%AB%E3%82%BB%E3%83%83%E3%83%88.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/08/18/%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%82%B9%E3%82%AD%E3%83%AB%E3%82%BB%E3%83%83%E3%83%88.html</guid>
        
        <category>就活目的</category>
        
        
      </item>
    
      <item>
        <title>Algebraic Effectsであそぼう</title>
        <description>&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;ord-fns&quot; style=&quot;display: none&quot;&gt;
&lt;sup id=&quot;fnref1&quot; title='Matija Prentar. &quot;An Introduction to Algebraic Effects and Handlers.” Electronic Notes in Theoretical Computer Science 319. 2015. '&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;sup id=&quot;fnref2&quot; title=&quot;Andrej Bauer. “What is algebraic about algebraic effects and handlers?.” eprint arXiv:1807.05923. 2018. &quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;sup id=&quot;fnref3&quot; title=&quot;快速のExtensible effects  – モナドとわたしとコモナド https://fumieval.hatenablog.com/entry/2017/08/02/230422 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;sup id=&quot;fnref4&quot; title=&quot;Oleg Kiselyov, Amr Sabry, Cameron Swords. “Extensible Effeects: An Alternative to Monad Transformers.” ACM SIGPLAN Notices. Vol. 48. No. 12. ACM, 2013. &quot;&gt;&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
&lt;sup id=&quot;fnref5&quot; title=&quot;Anderj Bauer, Matija Prentar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming, 84(1), pp.108-123. &quot;&gt;&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;
&lt;sup id=&quot;fnref6&quot; title=&quot;Dolan, Stephen, Spiros Eliopoulos, Daniel Hillerström, Anil Madhavapeddy, K. C. Sivaramakrishnan, Leo White. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming, pp. 98-117. Springer, Cham, 2017. &quot;&gt;&lt;a href=&quot;#fn6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;
&lt;sup id=&quot;fnref7&quot; title=&quot;Oleg Kiselyov, K. C. Sivaramakrishnan. “Eff directly in OCaml.” ML Workshop. 2016. &quot;&gt;&lt;a href=&quot;#fn7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;
&lt;/div&gt;
&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;p&gt;ここしばらく20行/日くらいしかコード書いてません｡
いやもっと少ないかも…｡
いや研究してますんで! いや〜研究もそんなにしてないな…じゃあ何を…&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;1. はじめに&lt;/h1&gt;
&lt;p&gt;Algebraic effectsとは､2001年くらいに提唱されてから､爆流行らずともにわかに盛り上がりを見せつつある言語機能である｡
極めて雑に説明すると､&lt;em&gt;継続を取ってこれる例外&lt;/em&gt;である｡
Plotkin氏(またお前か)が代数学的アプローチによる基盤を作り､そこにハンドラが付いてプログラム言語の機能として考えられるようになった｡
ボクの話のうち1〜10割間違っていることは確かなので､誤った情報を一切入れたくない人は[&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;]を読んでください｡&lt;/p&gt;
&lt;h2 id=&quot;1-1-algebraic-effects&quot;&gt;1-1. algebraic effects実装の有名どころ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.eff-lang.org/&quot;&gt;Eff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;algebraic effectsを言語機能として初めて設計された言語｡
MLスタイルのシンタックスでHindley-Milner型推論がある｡&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;impls&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matijapretnar/eff&quot;&gt;matijapretnar/eff&lt;/a&gt;&lt;label id=&quot;effinterp&quot;&gt;&lt;/label&gt;&lt;/p&gt;

&lt;p&gt;OCaml製Effのインタープリタ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/atnos-org/eff&quot;&gt;athnos-org/eff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ScalaのDSLとして実装されている&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://okmij.org/ftp/continuations/Eff/&quot;&gt;『Eff Directly in OCaml』&lt;/a&gt;[&lt;a href=&quot;#fn7&quot;&gt;7&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Oleg氏(またお前か)によるEffを､delimited continuationライブラリを使ってOCamlのDSLとして実装したもの｡
Effはdelimited continuationをエミュレートできるが､実はEff &lt;em&gt;を&lt;/em&gt; delimited continuationでエミュレートできることがわかる｡&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/project/koka/&quot;&gt;Koka&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MS Researchがやっていってる言語｡
手続き型っぽいシンタックスと､Row-typesというeffectsが型に滲み出る､さながらモナドみがある型システムを持っている｡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;multicoreOCaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OCamlに直接algebraic effects &amp;amp; handlerを追加した方言｡
continuationがoneshotとなっており､明示的にクローンしないと2回使えない｡
この&quot;2回使えない&quot;はlinear typeを導入して弾いてほしいが､実際はランタイムエラーである｡&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2&quot;&gt;2. さっそく試す&lt;/h1&gt;
&lt;p&gt;algebraic effects界隈ではスタンダードなEff言語を例に見てみる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* effect definition *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;(* invoke *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* value handler *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* continuation *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行すると､&lt;code&gt;47&lt;/code&gt;という表示が得られる｡
どういうことなんや｡
素直な心を使うと､&lt;code&gt;(+)&lt;/code&gt;は&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt;､&lt;code&gt;3 + perform (Eff 4)&lt;/code&gt;は&lt;code&gt;int&lt;/code&gt;､&lt;code&gt;perform (Eff 4)&lt;/code&gt;も&lt;code&gt;int&lt;/code&gt;ということが考えられる｡
なるほど&lt;code&gt;Eff&lt;/code&gt;のシグネチャ&lt;code&gt;int -&amp;gt; int&lt;/code&gt;は､矢印の左辺がeffectの引数､右辺はcontextのholeの型か｡
&lt;code&gt;perform&lt;/code&gt;は何??? ……じゃあ&lt;code&gt;Eff&lt;/code&gt;は&lt;code&gt;int -&amp;gt; int eff&lt;/code&gt;ということにして&lt;code&gt;perform&lt;/code&gt;は&lt;code&gt;'a eff -&amp;gt; 'a&lt;/code&gt;でどうだ､これでいいだろう!!!
という感じで推理していくと&lt;code&gt;4&lt;/code&gt;という表示は&lt;code&gt;effect (Eff x) k -&amp;gt; print_int x; k x&lt;/code&gt;という箇所で発射されたんじゃないかという感じがある｡
&lt;code&gt;7&lt;/code&gt;は&lt;code&gt;x -&amp;gt; print_int x&lt;/code&gt;ですね｡
&lt;a href=&quot;/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html&quot;&gt;前回の記事&lt;/a&gt;を読んでもらえると分かるが､&lt;code&gt;handle e with (handlers)&lt;/code&gt;がdelimiterで
&lt;code&gt;k&lt;/code&gt;が切り取られた継続になる｡
だいたいそう｡&lt;/p&gt;
&lt;p&gt;わかった｡
念のため他の例も見ておこう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;3102051020&lt;/code&gt;という表示になる｡
継続を複製してる感ありますね｡&lt;/p&gt;
&lt;p&gt;同じ&lt;code&gt;Choose&lt;/code&gt; effectでも型さえ合ってれば異なる処理が書ける､つまり定義と実装を分けることができるのが特徴となっている｡
ここでHaskellerは｢Freeモナドやんけ!｣となるらしいですがボクはHaskellをやっていってないのでわかりませんでした｡
型だけ定義して､interpretationはユーザに任せるということなので確かに同じようだ｡
そもそもalgebraic effectの&lt;em&gt;algebraic&lt;/em&gt;は&quot;free &lt;em&gt;algebra&lt;/em&gt;“から来てるそう&lt;sup id=&quot;fnref2&quot; title=&quot;Andrej Bauer. “What is algebraic about algebraic effects and handlers?.” eprint arXiv:1807.05923. 2018. &quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;なので､袂を分かつ存在である｡
実際&lt;a href=&quot;#effinterp&quot;&gt;Effインタプリタ&lt;/a&gt;はFreeモナドを使って実装しているようだ｡&lt;/p&gt;
&lt;p&gt;そしていろんなeffectsをいっぺんにハンドルするぜ!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手軽だ｡
HaskellではFreeモナドを発展させたextensible effects[&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;][&lt;a href=&quot;#fn4&quot;&gt;4&lt;/a&gt;]といったものが流行っているそうで､
確かにモナドトランスフォーマーガン積みして爆重になるという困難から抜け出せるらしい｡&lt;/p&gt;
&lt;h1 id=&quot;3&quot;&gt;3. 応用&lt;/h1&gt;
&lt;p&gt;delimited continuationが扱えるうえにCPS的な書き方ではなくdirect-styleで記述できるため､
syntacticにきれいに､バグらず簡単に書ける､というありがたみがある｡
ボクの語彙が少ないので詳細は文献[&lt;a href=&quot;#fn5&quot;&gt;5&lt;/a&gt;][&lt;a href=&quot;#fn6&quot;&gt;6&lt;/a&gt;]を読んでください｡&lt;/p&gt;
&lt;h1 id=&quot;4&quot;&gt;4. おわりに&lt;/h1&gt;
&lt;p&gt;また情報量が0になってしまった……!!!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Matija Prentar. &quot;An Introduction to Algebraic Effects and Handlers.” Electronic Notes in Theoretical Computer Science 319. 2015. &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Andrej Bauer. “What is algebraic about algebraic effects and handlers?.” eprint arXiv:1807.05923. 2018. &lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;快速のExtensible effects  – モナドとわたしとコモナド &lt;a href=&quot;https://fumieval.hatenablog.com/entry/2017/08/02/230422&quot;&gt;https://fumieval.hatenablog.com/entry/2017/08/02/230422&lt;/a&gt; &lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;Oleg Kiselyov, Amr Sabry, Cameron Swords. “Extensible Effeects: An Alternative to Monad Transformers.” ACM SIGPLAN Notices. Vol. 48. No. 12. ACM, 2013. &lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Anderj Bauer, Matija Prentar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming, 84(1), pp.108-123. &lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn6&quot;&gt;
&lt;p&gt;Dolan, Stephen, Spiros Eliopoulos, Daniel Hillerström, Anil Madhavapeddy, K. C. Sivaramakrishnan, Leo White. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming, pp. 98-117. Springer, Cham, 2017. &lt;a href=&quot;#fnref6&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn7&quot;&gt;
&lt;p&gt;Oleg Kiselyov, K. C. Sivaramakrishnan. “Eff directly in OCaml.” ML Workshop. 2016. &lt;a href=&quot;#fnref7&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 13 Aug 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html</guid>
        
        <category>OCaml</category>
        
        <category>Algebraic Effects</category>
        
        
      </item>
    
      <item>
        <title>delimited continuationの夏</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
control/promptとprompt tagへの理解が必要になったため､やっていきましょう｡&lt;/p&gt;
&lt;h1 id=&quot;1-continuation-is-power&quot;&gt;1. continuation??? 継続??? is power ???&lt;/h1&gt;
&lt;p&gt;継続とは &lt;em&gt;“残りの計算”&lt;/em&gt; などと言われます｡
\(e_1+e_2\)という式があって､左辺から計算がおこなわれていくとする｡
\(e_1 \Downarrow v_1\)となると､残りの計算は\(\lambda x. x + e_2 \)となります｡
\(\lambda x. x + e_2 \)はよく\([\ ]+e_2\)と表現され､この\([\ ]\)はholeと呼ばれたりする｡
この継続を\(E\)などとおいて､\(E\)をぶっこ抜いてきてなにか値を渡したりするときは\(E[x]\)と表記し､holeに\(x\)が入っていく｡
OK､私も皆さんも &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; と思うので話を進めよう｡&lt;/p&gt;
&lt;h1 id=&quot;2-delimited-continuation&quot;&gt;2. Delimited continuation&lt;/h1&gt;
&lt;p&gt;和訳すると限定継続です｡これで9割は分かったと思うが､call/ccよりも取ってくる継続の範囲が限定されているというイッメジです｡
StackOverflowのこれ&lt;sup id=&quot;fnref1&quot; title=&quot;What exactly is a “continuation prompt?” &quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;が図解付きでわかりやすい｡&lt;/p&gt;
&lt;h2 id=&quot;2-1-shift-reset&quot;&gt;2-1. shift/reset&lt;/h2&gt;
&lt;p&gt;久しぶりにRacket引っ張ってきます｡Schemeでもなんでもdelimited continuationが使えれば良いですが｡
Racketだとshift/resetを使うには&lt;code&gt;(require racket/control)&lt;/code&gt;する必要がある｡
Guileだと&lt;code&gt;(use-modules (ice-9 control))&lt;/code&gt;やね｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;call/cc&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;call/cc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;shift/reset&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; (require racket/control)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-13&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-13&quot; (work in the same way as above)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-19&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;雑な説明でしたが､&lt;code&gt;call/cc&lt;/code&gt;は中のコンテキスト&lt;code&gt;(+ 3 [])&lt;/code&gt;も継続の呼び出し時に捨ててますね｡
あとRacketの&lt;code&gt;shift&lt;/code&gt;は&lt;code&gt;reset&lt;/code&gt;が見つからなかったらエラーにならずに最外のコンテキストを持ってくるんですねぇ｡&lt;/p&gt;
&lt;p&gt;shift/resetの詳細は文献&lt;sup id=&quot;fnref2&quot; title=&quot;浅井健一. “shift/reset プログラミング入門.” ACM SIGPLAN Continuation Workshop 2011. 2011. http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-j.pdf &quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;をご覧ください｡
…ちょっと待って! &lt;code&gt;shift0&lt;/code&gt;が無いやん! ということで文献&lt;sup id=&quot;fnref3&quot; title=&quot;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;を見る｡&lt;/p&gt;
&lt;p&gt;まず&lt;code&gt;shift&lt;/code&gt;の定義を見ます｡&lt;/p&gt;
&lt;p&gt;\[
\begin{array}{r}
    M\left[\left(\mathtt{reset}\ C\left[\left(\mathtt{shift\ f}\ E\right)\right]\right)\right] \triangleright M\left[\left(\mathtt{reset}\ E’\right)\right]\\
    \mathrm{where}\ E’=E \{\mathtt{f}\mapsto \left(\mathtt{lambda}\ \left(\mathtt{x}\right)\ \left(\mathtt{reset}\ C[\mathtt{x}]\right)\right)\}
\end{array}
\]&lt;/p&gt;
&lt;p&gt;おk｡&lt;/p&gt;
&lt;p&gt;では&lt;code&gt;shift0&lt;/code&gt;はどうかな?&lt;/p&gt;
&lt;p&gt;\[
\begin{array}{r}
    M\left[\left(\mathtt{reset}\ C\left[\left(\mathtt{shift0\ f}\ E\right)\right]\right)\right] \triangleright M\left[E’\right]\\
    \mathrm{where}\ E’=E \{\mathtt{f}\mapsto \left(\mathtt{lambda}\ \left(\mathtt{x}\right)\ \left(\mathtt{reset}\ C[\mathtt{x}]\right)\right)\}
\end{array}
\]&lt;/p&gt;
&lt;p&gt;えっ何が違うん? と一瞬困るわけですが､&lt;code&gt;shift0&lt;/code&gt;では一発評価が進むと&lt;code&gt;M&lt;/code&gt;の中から&lt;code&gt;reset&lt;/code&gt;が消えてますね｡
なので&lt;code&gt;E'&lt;/code&gt;の中の最外の&lt;code&gt;shift0&lt;/code&gt;は&lt;code&gt;M&lt;/code&gt;まで行ってしまうわけです｡
&lt;code&gt;shift&lt;/code&gt;と&lt;code&gt;shift0&lt;/code&gt;の違いを実際に文献の例から見てみます｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;with-shift&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '(a)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ここの&lt;code&gt;reset&lt;/code&gt;外のコンテキスト&lt;code&gt;M&lt;/code&gt;は&lt;code&gt;(reset (cons 'a []))&lt;/code&gt;となる｡
つまり変換規則で対象となっている&lt;code&gt;reset&lt;/code&gt;は内側のほう｡
&lt;code&gt;shift&lt;/code&gt;外のコンテキスト&lt;code&gt;C&lt;/code&gt;は&lt;code&gt;[]&lt;/code&gt;､つまり空ですので最外の&lt;code&gt;shift&lt;/code&gt;が対象となっている｡
&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;(shift g '())&lt;/code&gt;となる｡&lt;/p&gt;
&lt;p&gt;ではワンステップすすめると&lt;code&gt;M[(reset E{f := (lambda (x) (reset C[x]))})]&lt;/code&gt;なので&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは同様にやっていく｡内側の&lt;code&gt;reset&lt;/code&gt;をやっていくので&lt;code&gt;(reset (cons 'a (reset '())))&lt;/code&gt;で､あとはアーナンダビッグステップに行くぞということで&lt;code&gt;'(a)&lt;/code&gt;が得られる｡&lt;/p&gt;
&lt;p&gt;続いて&lt;code&gt;shift0&lt;/code&gt;について見よう｡
文献&lt;sup id=&quot;fnref3&quot; title=&quot;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;ではdelimiterは&lt;code&gt;reset&lt;/code&gt;のみだったが､racket/controlの&lt;code&gt;shift0&lt;/code&gt;に対応するdelimiterは&lt;code&gt;reset0&lt;/code&gt;となる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;with-shift0&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;オッなんか違うな｡当然違うわけだ｡
だいたい形は同じなのですが､
ワンステップすすめると&lt;code&gt;M[(E{f := (lambda (x) (reset0 C[x]))})]&lt;/code&gt;となる｡
&lt;code&gt;E&lt;/code&gt;の外に&lt;code&gt;reset(0)&lt;/code&gt;がつかないわけだ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で&lt;code&gt;reset0&lt;/code&gt;と&lt;code&gt;shift0&lt;/code&gt;の間のコンテキストは拾われずに&lt;code&gt;shift0&lt;/code&gt;内のexpressionが生き残るので､&lt;code&gt;'()&lt;/code&gt;を返す｡&lt;/p&gt;
&lt;p&gt;あ〜〜 &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; ｡
この &lt;em&gt;“resetは1度しか使えない”&lt;/em&gt; という回数制限はlinear logicの影が潜んでいそうだ｡
実際この回数制限nessを型で表そうとするとそんな雰囲気になるはずだ｡&lt;/p&gt;
&lt;h2 id=&quot;2-2-control-prompt&quot;&gt;2-2. control/prompt&lt;/h2&gt;
&lt;p&gt;だいたいshift/resetというと語弊があるが､だいたいそんな感じという認識がある(間違ってると思うのでご教授願います｡)｡
&lt;code&gt;prompt&lt;/code&gt;は&lt;code&gt;control&lt;/code&gt;と対応するdelimiterに過ぎず､動きとしては&lt;code&gt;reset&lt;/code&gt;同様に継続を区切るだけだ｡
“control prompt&quot;で検索するときは､”-command&quot;を付けないとコマンドプロンプトに関する話が大量に出てきて血管ブチ切れそうになる｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;control&lt;/code&gt;は文献&lt;sup id=&quot;fnref3&quot; title=&quot;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;より､
\[
\begin{array}{r}
    M\left[\left(\mathtt{reset}\ C\left[\left(\mathtt{control\ f}\ E\right)\right]\right)\right] \triangleright M\left[\left(\mathtt{reset}\ E’\right)\right]\\
    \mathrm{where}\ E’=E \{\mathtt{f}\mapsto \left(\mathtt{lambda}\ \left(\mathtt{x}\right)\ \left(C[\mathtt{x}]\right)\right)\}
\end{array}
\]&lt;/p&gt;
&lt;p&gt;この論文ではdelimiterが&lt;code&gt;reset&lt;/code&gt;だがとりあえずOKとしたい｡
&lt;code&gt;f&lt;/code&gt;にバインドされる継続の中に&lt;code&gt;reset&lt;/code&gt;がないという点で&lt;code&gt;shift&lt;/code&gt;と異なっている｡
論文の例を見てみよう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;with-shift&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '(a)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Racketは3種類のカッコが使えるからS式もちょっぴり分かりやすくなるぞ!
これを規則にそって解いてくと次のように進む｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ふむふむ｡はい｡&lt;/p&gt;
&lt;p&gt;では&lt;code&gt;shift&lt;/code&gt;を&lt;code&gt;control&lt;/code&gt;にしたらどうなるか―&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果が異なるわけだな｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 4  gが使われないので `[cons 'a ...]` が破棄される&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わかった｡
とりあえずこのへんで &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; ということにいたしましょうか…｡&lt;/p&gt;
&lt;h1 id=&quot;3-prompt-tag&quot;&gt;3. prompt tag&lt;/h1&gt;
&lt;p&gt;継続をキャプチャするオペレータ(&lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;shift0&lt;/code&gt;,&lt;code&gt;control&lt;/code&gt;など)はそれぞれ対応する､取るべき継続を区切ってくれるdelimiterがある｡
例えばracket/controlでは&lt;code&gt;shift&lt;/code&gt;に対応するのは&lt;code&gt;reset&lt;/code&gt;で､&lt;code&gt;shift0&lt;/code&gt;には&lt;code&gt;reset0&lt;/code&gt;が対応する｡
更には同じ&lt;code&gt;shift&lt;/code&gt;でも､&lt;code&gt;shift&lt;/code&gt;式&lt;sup id=&quot;fnref4&quot; title=&quot;racket/controlのshiftはマクロ! はいごもっとも! &quot;&gt;&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;のコンテキストで最も近い&lt;code&gt;reset&lt;/code&gt;が動的に対応付けられる｡&lt;/p&gt;
&lt;p&gt;この､&lt;code&gt;shift&lt;/code&gt;や&lt;code&gt;control&lt;/code&gt;などのcontrol operatorとdelimiterの対応をもっと柔軟にしたい! という要望に応えるのがprompt tagである｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;prompt tag&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-continuation-prompt-tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p~&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-continuation-prompt-tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'p~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p~&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;begin&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this is p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p~&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;begin&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this is p~&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; display &quot;this is pthis is p~23&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;確かに､最寄りの&lt;code&gt;reset&lt;/code&gt;ではなく､プロンプトに対応する&lt;code&gt;reset-at&lt;/code&gt;の継続を取っている｡&lt;/p&gt;
&lt;p&gt;ちなみにOCamlのdelimited continuationライブラリ&lt;a href=&quot;http://okmij.org/ftp/continuations/implementations.html#caml-shift&quot;&gt;delimcc&lt;/a&gt;では､prompt tagのみが使われている｡
なんだか日本語が足りないが､Racketの&lt;code&gt;shift&lt;/code&gt;や&lt;code&gt;reset&lt;/code&gt;はなく､&lt;code&gt;shift-at&lt;/code&gt;や&lt;code&gt;reset-at&lt;/code&gt;のみ､という感じ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delimcc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;`A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* returns [] *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは何故か｡多分answer-type polymorphismをOCamlではサポートしてないからじゃないかな｡
詳細はdelimccに関する文献&lt;sup id=&quot;fnref5&quot; title=&quot;Oleg Kiselyov. “Delimited Control in OCaml, Abstractly and Concretely: System Description.” FLOPS 2010. 2010. https://link.springer.com/chapter/10.1007/978-3-642-12251-4_22 &quot;&gt;&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;を読めって話ですよ｡読んでへん｡&lt;/p&gt;
&lt;p&gt;とりあえずここは &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; ということで､よろしいでしょうか｡&lt;/p&gt;
&lt;h1 id=&quot;4&quot;&gt;4. おわりに&lt;/h1&gt;
&lt;p&gt;なんとなくつかめてきた気がします｡
夏服の剣持力也くんがうさんくさいメガネ掛けててよかった｡&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29838344/what-exactly-is-a-continuation-prompt&quot;&gt;What exactly is a “continuation prompt?”&lt;/a&gt; &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;浅井健一. “shift/reset プログラミング入門.” ACM SIGPLAN Continuation Workshop 2011. 2011. &lt;a href=&quot;http://pllab.is.ocha.ac.jp/%7Easai/cw2011tutorial/main-j.pdf&quot;&gt;http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-j.pdf&lt;/a&gt; &lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. &lt;a href=&quot;ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103&quot;&gt;ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103&lt;/a&gt; &lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;racket/controlの&lt;code&gt;shift&lt;/code&gt;はマクロ! はいごもっとも! &lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Oleg Kiselyov. “Delimited Control in OCaml, Abstractly and Concretely: System Description.” FLOPS 2010. 2010. &lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-642-12251-4_22&quot;&gt;https://link.springer.com/chapter/10.1007/978-3-642-12251-4_22&lt;/a&gt; &lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 19 Jul 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html</guid>
        
        <category>Delimited Continuation</category>
        
        <category>Racket</category>
        
        <category>OCaml</category>
        
        
      </item>
    
      <item>
        <title>Scala書いた</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
最近はヴァーチャルユーチューバーに脳を破壊されてしまってほぼ毎日観てます｡
剣持&lt;em&gt;力&lt;/em&gt;也くんが好きです｡&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;1. はじめに&lt;/h1&gt;
&lt;p&gt;Scalaに入門するついでに､文献…というかPDFを管理するシステムを作った｡&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;Nymphium/pnyao&quot;&gt;&lt;/div&gt;
&lt;p&gt;配色などはともかく､個人的には使いやすくなっとるんじゃないでしょうか｡
もちろんボクが作ったので､どこを押すと何が起きるかは100%分かっているため､他の人にとって使いやすいかどうかはよくわかりませんが…｡&lt;/p&gt;
&lt;h1 id=&quot;2-scala&quot;&gt;2. Scala&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;case class&lt;/code&gt;でADTのようなものを定義できる｡
トレイト&lt;code&gt;T&lt;/code&gt;を継承すれば型&lt;code&gt;T&lt;/code&gt;のデータコンストラクタでまとめられるということでいいのかな｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンマッチの実態はクラスオブジェクトの&lt;code&gt;unapply&lt;/code&gt;メソッドで､カスタマイザビリティがなかなか高い｡
&lt;code&gt;case class&lt;/code&gt;は&lt;code&gt;apply&lt;/code&gt;/&lt;code&gt;unapply&lt;/code&gt;メソッドが自動でクラスのメンバになる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
Javaでいうところの

class K1&amp;lt;A&amp;gt; {
  K1&amp;lt;A&amp;gt;(a: A) {
    this.a = a;
  }
}

でいいのか?
*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints &quot;match&quot; and returns 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数をクラスのメンバにしてくれたりもしているようだ｡&lt;/p&gt;
&lt;p&gt;また&lt;code&gt;implicit&lt;/code&gt;に定義されたメソッドにより安全な暗黙の型変換を定義できるのも面白い｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromStringToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aiueo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// convert &quot;aieuo&quot; to Seq(97, 105, 101, 117, 111) ~&amp;gt; (folded)
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Conv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5310
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型変換が必要そうなところで型の合う直近の&lt;code&gt;implicit&lt;/code&gt;メソッドを参照して変換する､のかな(わかってない)｡
またスコープはメソッドの定義されたクラスを超えない｡
ただし継承を使うと継承先のクラス内でも型変換が起こる｡&lt;/p&gt;
&lt;p&gt;Javaみもあって少々つらいときがある(&lt;code&gt;String&lt;/code&gt;集合に&lt;code&gt;null&lt;/code&gt;が含まれたり､Javaいライブラリを使うと&lt;code&gt;null&lt;/code&gt;が混入する)が､
概ねモダンでOOPとしつつFunctional Programmingもしっかりできる言語でなかなか良い｡
ビルドツールのsbtもカスタマイザビリティが高く､開発もわりとスムーズにいく｡&lt;/p&gt;
&lt;h1 id=&quot;3-play-web-framework&quot;&gt;3. Play web framework&lt;/h1&gt;
&lt;p&gt;Java/Scalaで使えるWebフレームワーク｡
結構面白いんじゃないでしょうか､Webフレームワークを触ったことがなかったので評価できませんが｡&lt;/p&gt;
&lt;h2 id=&quot;3-1&quot;&gt;3-1. ハマりポイント&lt;/h2&gt;
&lt;p&gt;現在はv2.6が最新だが､2.4､2.5､2.6で非互換な部分がいくつかあるが､インタネッツの記事にバージョンの表記がなかったりして､メソッドがないやんとか型合わないやんとかがあった｡&lt;/p&gt;
&lt;h1 id=&quot;4-pnyao&quot;&gt;4. Pnyao&lt;/h1&gt;
&lt;p&gt;本題｡
PDFのメタデータにはiTextを使っている｡
最初は何も考えずPDFメタデータの読み書きだけを実装したのでプロジェクトが分かれている｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;(root)
  + ...
  + (subprj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようなプロジェクトの構成になっとるとき､rootのbuild.sbtでサブプロジェクトをガバっとやる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;build.sbt&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subprj&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.dependsOn&lt;/code&gt;でビルドの依存関係をやっておる｡&lt;/p&gt;
&lt;p&gt;他はなんか読んでください｡&lt;/p&gt;
&lt;p&gt;あとはサーバのイベントにアクションをフックするところが面倒だった｡
クラスにDIして&lt;code&gt;ApplicationLifecycle&lt;/code&gt;をランタイムに突っ込んでいく｡&lt;/p&gt;
&lt;div class=&quot;codeline with_caption&quot;&gt;&lt;pre&gt;28
29&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;pnyao/app/services/Pnyao.scala&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Singleton&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pnyao&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ApplicationLifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PnyaoService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;このオブジェクトにPlayサーバのイベント時に発火するアクションをフックできる｡&lt;/p&gt;
&lt;div class=&quot;codeline with_caption&quot;&gt;&lt;pre&gt;59
60&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;pnyao/app/services/Pnyao.scala&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt; &lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addStopHook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;successful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addShutdownHook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;JVMの終了にもフックしている｡
Playサーバのイベントにフックしてたのは､sbtシェル上で起動/終了をしてたから必要であって､後述のとおりSystemdで起動/終了をまかせるようにしたのでもはや不要かも｡&lt;/p&gt;
&lt;p&gt;この場合JVMの終了かPlayの終了かどちらかだけでアクションを発火してほしいので､&lt;code&gt;lazy val&lt;/code&gt;として定義すればいい｡&lt;/p&gt;
&lt;p&gt;他はもうないな｡
JSONを扱う部分があり､circeとPlayのJSONライブラリという2つの変換器が混在している｡
これは先述の通りPDFメタデータ扱う部分だけ最初に実装したことに起因している｡&lt;/p&gt;
&lt;h1 id=&quot;5&quot;&gt;5. アッピケーション化&lt;/h1&gt;
&lt;p&gt;sbt-assemblyでプロジェクトをjarに固めて実行するようにした｡
さらにサーバをsystemd serviceとして起動/停止できるようにした｡&lt;/p&gt;
&lt;h1 id=&quot;6&quot;&gt;6. 所感&lt;/h1&gt;
&lt;p&gt;楽しかった､が､Webブラウザでのクリックイベントなどはジャバスクを書かざるをえなかったのがつらい｡
ScalaJSをPlayがサポートしてくれればいいのかもしれない､ScalaJS書いたことないんですけど｡
Scalaはちゃんとかいたのがここ3､4週間くらいなので､もうすこしやっていきたい｡&lt;/p&gt;
&lt;h1 id=&quot;7&quot;&gt;7. おわりに&lt;/h1&gt;
&lt;p&gt;人生おわった…｡&lt;/p&gt;</description>
        <pubDate>Sat, 09 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/06/09/Scala%E6%9B%B8%E3%81%84%E3%81%9F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/06/09/Scala%E6%9B%B8%E3%81%84%E3%81%9F.html</guid>
        
        <category>Scala</category>
        
        
      </item>
    
      <item>
        <title>Ensime-vimを入れる</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
最近は死んでるのでコードも全然書いてませんでした｡&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1&quot;&gt;1. はじめに&lt;/h1&gt;
&lt;p&gt;VimでScalaを書いている､というと赤黒いアイコンを思い出すかもしれないが､そんな感じになっている｡
動機としては､最近一切コードを書いてなかったのでなにか作ろうと思い､またScalaも以前から少し書いてみようと思っていたのでこの機会にと｡
Vimでやろうとしたのは当然手元に(Neo)Vimがあるからだ｡&lt;/p&gt;
&lt;h1 id=&quot;2&quot;&gt;2. プラギン&lt;/h1&gt;
&lt;h2 id=&quot;2-1-vim-scala&quot;&gt;2-1. &lt;a href=&quot;https://github.com/derekwyatt/vim-scala&quot;&gt;vim-scala&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;シンタックスハイライトが寂しいので入れる｡&lt;/p&gt;
&lt;h2 id=&quot;2-2-ensime-vim&quot;&gt;2-2. &lt;a href=&quot;https://github.com/ensime/ensime-vim&quot;&gt;ensime-vim&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Scalaも補完がされてほしい｡
VimでJava/Scalaというと､EclimというEclipseの情報をVimから引っ張ってグニャグニャするやつがありますが､俺達VimmerとしてはエディタのためにIDEを使うのはなんとなくはばかられる｡&lt;/p&gt;
&lt;p&gt;(中略)&lt;/p&gt;
&lt;p&gt;特にArchLinux(でyaourt)を使っており､Pythonなんて書かねーよハゲということでpipも基本的に触らない人用にインストールガイドを書こう｡
だいたいは&lt;a href=&quot;http://ensime.github.io/editors/vim/install/&quot;&gt;公式のインストールガイド&lt;/a&gt;に則ればいい｡&lt;/p&gt;
&lt;h3 id=&quot;2-2-1-python-modules&quot;&gt;2-2-1. Python modules&lt;/h3&gt;
&lt;p&gt;注意する点はpipに関する記述だが､Pythonは3で問題ない｡
pipでなくpacman/yourtに任せたいので､公式リポジトリから&lt;em&gt;python-websocket-client&lt;/em&gt;､AURから&lt;em&gt;python-sexpdata&lt;/em&gt;を引っ張る｡
後者は微妙にメンテされておらず､PKGSBUILDをいじる必要がある｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;# http -&amp;gt; httpsにするだけだが
&lt;span class=&quot;gd&quot;&gt;-source=(&quot;http://pypi.python.org/packages/source/s/sexpdata/sexpdata-${pkgver}.tar.gz&quot;)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+source=(&quot;https://pypi.python.org/packages/source/s/sexpdata/sexpdata-${pkgver}.tar.gz&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-2-2-sbt-plugin&quot;&gt;2-2-2. sbt plugin&lt;/h3&gt;
&lt;p&gt;あとはsbtのグローバルプラグインに以下を追加する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.ensime&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-ensime&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.6.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sbtで&lt;code&gt;ensimeConfig&lt;/code&gt;を実行すると､プロジェクトルートに&lt;code&gt;.ensime&lt;/code&gt;が生成される｡&lt;/p&gt;
&lt;h2 id=&quot;2-3-neoformat&quot;&gt;2-3. &lt;a href=&quot;https://github.com/sbdchd/neoformat&quot;&gt;neoformat&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;フォーマッター｡ScalaもscalafmtがあればOK｡
ただ何もしないとフォーマット時にファイル先頭にゴミが入るので以下をvimrcに追加&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neoformat_scala_scalafmt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'exe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'scalafmt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'replace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3&quot;&gt;3. おわりに&lt;/h1&gt;
&lt;p&gt;人生おわった&lt;/p&gt;</description>
        <pubDate>Sun, 27 May 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/05/27/Ensime-vim%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/05/27/Ensime-vim%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B.html</guid>
        
        <category>Scala</category>
        
        <category>Vim</category>
        
        <category>ArchLinux</category>
        
        
      </item>
    
      <item>
        <title>コンパイラ中間言語およびその最適化の設計と実装</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
年明けに買った対洗濯物用乾燥機のおかげで窓を開けたりカーテンレールにハンガーを吊るす日々が終わりました｡
ところで2月分の電気代はすでに1月分を越えようとしています｡&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1&quot;&gt;1. はじめに&lt;/h1&gt;
&lt;p&gt;今年は4年次なので卒業研究! ということでjoin pointを追加したコンパイラ中間言語の設計と､その上での最適化を定義してやっていきました｡
実装はこちら&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;nymphium/joel&quot;&gt;&lt;/div&gt;
&lt;p&gt;卒研発表をスライドを作るためにも､何をしたかを噛み砕いて文に起こしてみたいと思います｡&lt;/p&gt;
&lt;h1 id=&quot;2&quot;&gt;2. 関連研究&lt;/h1&gt;
&lt;p&gt;PLDI 2017で『Compiling without Continuations』&lt;sup id=&quot;fnref1&quot; title=&quot;Luke Maurer, et al. Compiling without Continuations. https://dl.acm.org/citation.cfm?id=3062380 &quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;という発表がありました｡
継続の緑の本をもじったタイトルですが､CPSと直接戦っている感じではないです｡
join pointと呼ばれるものを明示的に扱うことでコードサイズの爆発を抑えたり高速に動作するターゲット言語に変換しようという試みです｡&lt;/p&gt;
&lt;h2 id=&quot;2-1-join-point&quot;&gt;2-1. join pointとは&lt;/h2&gt;
&lt;p&gt;プログラム&lt;a href=&quot;#joinpoint-example&quot;&gt;2.1&lt;/a&gt;における分岐した制御フローが合流する場所をjoin pointと呼ぶ｡
あるいは制御フローグラフ&lt;a href=&quot;#cfg&quot;&gt;2.2&lt;/a&gt;の赤点で囲んだ部分｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#joinpoint-example&quot;&gt;2.1&lt;/a&gt; join point example&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;img src=&quot;/pictures/2018-01-31-%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E4%B8%AD%E9%96%93%E8%A8%80%E8%AA%9E%E3%81%8A%E3%82%88%E3%81%B3%E3%81%9D%E3%81%AE%E6%9C%80%E9%81%A9%E5%8C%96%E3%81%AE%E5%AE%9F%E8%A3%85/cfg.png&quot; alt=&quot;cfg.png&quot;&gt;
&lt;label id=&quot;cfg&quot;&gt;&lt;/label&gt;
図&lt;a href=&quot;#cfg&quot;&gt;2.2&lt;/a&gt; 制御フローグラフ
&lt;/center&gt;
&lt;p&gt;CPSでは継続になるし､ANFではコード複製で表現することになる｡
ここで最適化するとコードサイズがボワーっとなってしまう｡
そこでMaurerらは\(\text{System F}_J\)という､合流点を明示的に扱う中間言語を提案した｡
合流点を用いることでコードサイズの爆発が抑えられ､さらに再帰的な合流点を用いることでstream fusionができることを示した｡&lt;/p&gt;
&lt;p&gt;しかしSystem Fjは純粋な必要呼びの､Haskellのような言語を対象としたコンパイラ中間言語として設計されたので､ジャバなどの広く使われているプログラム言語とはギャップがある｡&lt;/p&gt;
&lt;h1 id=&quot;3&quot;&gt;3. 本研究&lt;/h1&gt;
&lt;p&gt;System Fjとその困った点を踏まえて､非純粋な値呼びの､明示的な合流点を持つコンパイラ中間言語\(Joel\)を提案する｡
非純粋性として､多くのプログラム言語で使われており､合流点と競合しそうなコントロールエフェクトを持っている例外を追加した｡&lt;/p&gt;
&lt;p&gt;例外を考慮した最適化を定義した｡
評価コンテキストをばらまく､commuting conversionの一種である最適化がtry-with式の位置を変えてトライキャッチプリキュアのメタモルフォーゼに失敗してプログラムの意味が変わってしまうのを防ぐために､
try-with式の含まれない評価コンテキストを新たに定義し､最適化規則に用いた｡&lt;/p&gt;
&lt;h1 id=&quot;4&quot;&gt;4. 性能評価&lt;/h1&gt;
&lt;p&gt;Joel上の最適化を評価するため､CPS上で最適化されて生成されたターゲット言語との比較をおこなった｡
ソース言語にはOCamlのサブセットであるCore MLを新たに定義し､!!!!ターゲット言語はOCamlとした｡!!!!
これがあまりよくなかった｡&lt;/p&gt;
&lt;p&gt;CPSも､Double-Barreled CPSをもとに複数の例外をハンドルできるような体系を新たに定義した｡&lt;/p&gt;
&lt;h2 id=&quot;4-1-20180321&quot;&gt;4-1. 追記20180321&lt;/h2&gt;
&lt;p&gt;ここからしばらく嘘が書いてある!! ので途中は飛ばしてください｡
おわり&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;stream fusionがうまくいったけど全然速くならなかったという結果でした(&lt;a href=&quot;https://github.com/Nymphium/joel/blob/bachelor_thesis_poc/test/benchmark/benchmark.ml#L60&quot;&gt;このへんの例&lt;/a&gt;)｡
予備実験をすべきでしたが､つまるところ以下の例がOCamlではほとんど同じ速度で実行されます｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんでOCamlこれ同じ速度で動くんだ､分からんということでここからなんとかしなければならない…｡
ちなみに&lt;code&gt;map&lt;/code&gt;を20回くらいやったものと&lt;code&gt;(fun x y -&amp;gt; x + (y * y * y * y * ... * y))&lt;/code&gt;を&lt;code&gt;fold&lt;/code&gt;に渡すものだと実行速度に差が出ました｡
同じようなコードをLuaで書いたら即差が出ましたので､ターゲット言語によってはしっかり実行速度に関してアドが言えるんじゃないでしょうか｡&lt;/p&gt;
&lt;h2 id=&quot;20180321&quot;&gt;追記20180321&lt;/h2&gt;
&lt;p&gt;私の手抜きが原因でした｡
&lt;a href=&quot;http://localhost:4000/2017/11/18/OCaml%E3%81%A7eval%E3%81%97%E3%81%A6%E7%B5%90%E6%9E%9C%E3%82%92string%E3%81%A7%E5%BE%97%E3%82%8B.html&quot;&gt;この記事&lt;/a&gt;で書いたようなものを使ってベンチマークを取っていた(!!!!)わけですが､
どうやら&lt;code&gt;execute_phrase&lt;/code&gt;は&lt;em&gt;何回も実行していくうちに遅くなる&lt;/em&gt;(???)ということが後に発覚したため､ベンチマーク周りを0から再実装しました…｡
よくわからないと思いますがボクもよくわからないので､とりあえず皆さんお手元で試してみてください｡&lt;/p&gt;
&lt;p&gt;仕切り直しです｡
Haskellならともかく､OCamlはstream fusionなんてやらないぜ｡
&lt;a href=&quot;https://github.com/janestreet/core_bench&quot;&gt;core_bench&lt;/a&gt;で試してみましょう｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/src/20180131ps/test.ml&quot;&gt;src/20180131ps/test.ml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;test.ml&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Core_bench&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Std&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fused&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foldf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self_init&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Core_bench&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Bench&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;map&quot;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foldl&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mapfold&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fused&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fused&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;うん&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ocamlfind ocamlopt &lt;span class=&quot;nt&quot;&gt;-package&lt;/span&gt; core_bench &lt;span class=&quot;nt&quot;&gt;-linkpkg&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-thread&lt;/span&gt; test.ml
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./a.out &lt;span class=&quot;nt&quot;&gt;-ascii&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Estimated testing time 40s (4 benchmarks x 10s). Change using -quota SECS.

  Name      Time/Run      mWd/Run   mjWd/Run   Prom/Run   Percentage
 --------- ---------- ------------ ---------- ---------- ------------
  map       139.93us   30_004.72w     2.03kw     2.03kw       87.99%
  foldl      37.26us        5.00w                             23.43%
  mapfold   159.04us   30_009.71w     1.79kw     1.79kw      100.00%
  fused      49.41us        6.00w                             31.07%
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注目すべきは下2つですね｡
&lt;code&gt;mapfold&lt;/code&gt;は読んで字の如く&lt;code&gt;map&lt;/code&gt;して&lt;code&gt;fold&lt;/code&gt;してます｡
&lt;code&gt;fused&lt;/code&gt;は&lt;code&gt;map&lt;/code&gt;に渡す関数と&lt;code&gt;fold&lt;/code&gt;に渡す関数を一気に適用してるので中間リストを生成しないしtail recursionだし良いね｡
実行速度の差が無いって言ったやつ誰やねん…｡&lt;/p&gt;
&lt;p&gt;1つのベンチマークのうちに実行速度にだいぶ差があるベンチマーク関数があると&lt;code&gt;Time/Run&lt;/code&gt;の表示がだいぶ怪しい数字を出すことも分かったので､結局卒論提出版ではcore_benchのソースを参考にしてお手製ベンチマークで切り抜けました｡おわり｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;生成されるコードサイズに関しては､Joelによる最適化を経て得られたものが一番小さかったので､そこはadvantageがあったと言えます｡&lt;/p&gt;
&lt;h1 id=&quot;5&quot;&gt;5. おわりに&lt;/h1&gt;
&lt;p&gt;終わらないんだよなぁ…&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Luke Maurer, et al. Compiling without Continuations. &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3062380&quot;&gt;https://dl.acm.org/citation.cfm?id=3062380&lt;/a&gt; &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 31 Jan 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/01/31/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E4%B8%AD%E9%96%93%E8%A8%80%E8%AA%9E%E3%81%8A%E3%82%88%E3%81%B3%E3%81%9D%E3%81%AE%E6%9C%80%E9%81%A9%E5%8C%96%E3%81%AE%E5%AE%9F%E8%A3%85.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/01/31/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E4%B8%AD%E9%96%93%E8%A8%80%E8%AA%9E%E3%81%8A%E3%82%88%E3%81%B3%E3%81%9D%E3%81%AE%E6%9C%80%E9%81%A9%E5%8C%96%E3%81%AE%E5%AE%9F%E8%A3%85.html</guid>
        
        <category>OCaml</category>
        
        <category>卒研</category>
        
        <category>最適化</category>
        
        <category>コンパイラ</category>
        
        
      </item>
    
      <item>
        <title>大学院における日本学生支援機構の奨学金</title>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
絶賛胃炎中で食事が老人並みになりました｡
新年あけまして暴飲が悪かったのか､ちょっと生っぽくて洗剤の味がした肉が悪かったのか､はたまた卒論によるストレスかー
とはいえ平時よりも少ない量の食事で動けるので燃費が良くなった､と思っていたが鏡を見ると頬が痩けた男が写っていてビビりました｡&lt;/p&gt;
&lt;h1 id=&quot;part-2a064f37de75b4c9&quot;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;びしょ〜じょ君は1､2年次でテンプレ的なダメ学生を謳歌し､無事留年しました｡
留年確定の年の終わりに日本学生支援機構から借りていた奨学金も廃止されました｡
3年次以降は気を改めて講義に臨んだが､どうしても取れない単位があったり興味がないのでギリギリまで手を抜いたりなどしてGPA&lt;sup id=&quot;fnref1&quot; title=&quot;Grade Point Averageのアクロニム｡簡単にいうと成績を数値化したもの｡ &quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;が芳しくなかった｡
さて､大学院で新たにびしょ〜じょ君は日本学生支援機構から奨学金を借りることができるのだろうか?&lt;/p&gt;
&lt;h1 id=&quot;part-2a00357080695c85&quot;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;できた(完)&lt;/p&gt;
&lt;p&gt;しかも間口の広い第2種ではなく､無利子の第1種である｡
どうやら学部の成績は加味されないようだ｡
重要な点は､先生に素晴らしい推薦書を書いてもらえるかどうかのようだ｡&lt;/p&gt;
&lt;p&gt;学部で奨学金廃止されたみなさんも､大学院では再度借りることができるので､借金地獄を味わってください｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(サンプル数: 1)&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Grade Point Averageのアクロニム｡簡単にいうと成績を数値化したもの｡ &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 11 Jan 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/01/11/%E5%A4%A7%E5%AD%A6%E9%99%A2%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%97%A5%E6%9C%AC%E5%AD%A6%E7%94%9F%E6%94%AF%E6%8F%B4%E6%A9%9F%E6%A7%8B%E3%81%AE%E5%A5%A8%E5%AD%A6%E9%87%91.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/01/11/%E5%A4%A7%E5%AD%A6%E9%99%A2%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%97%A5%E6%9C%AC%E5%AD%A6%E7%94%9F%E6%94%AF%E6%8F%B4%E6%A9%9F%E6%A7%8B%E3%81%AE%E5%A5%A8%E5%AD%A6%E9%87%91.html</guid>
        
        <category>雑感</category>
        
        
      </item>
    
      <item>
        <title>相互再帰の分解</title>
        <description>&lt;h1 id=&quot;part-3ef36be7cf2c473&quot;&gt;相互再帰とは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E7%9B%B8%E4%BA%92%E5%86%8D%E5%B8%B0&quot;&gt;https://ja.wikipedia.org/wiki/%E7%9B%B8%E4%BA%92%E5%86%8D%E5%B8%B0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;了解!!!&lt;/p&gt;
&lt;h1 id=&quot;example&quot;&gt;example&lt;/h1&gt;
&lt;p&gt;上記のウィキピージャの例を用いる｡
OCamlで表現するならこんな感じだろうか｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;example&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;が相互再帰となっている｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;は&lt;code&gt;and&lt;/code&gt;キーワードで同時に定義しないといけないんだろうか?&lt;/p&gt;
&lt;h1 id=&quot;part-65427f6cd2a&quot;&gt;分解&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt;を定義するなら､&lt;code&gt;b&lt;/code&gt;を外から受け取って使い､&lt;code&gt;b&lt;/code&gt;もまた逆を考えてみる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;レッツ結合!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっとまって､&lt;code&gt;b&lt;/code&gt;が無いやん! &lt;code&gt;b&lt;/code&gt;が欲しくて分解したのに……｡&lt;/p&gt;
&lt;h2 id=&quot;part-9622ee2d3edec720&quot;&gt;結合の解法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt;を作るには&lt;code&gt;a&lt;/code&gt;が必要､しかし&lt;code&gt;a&lt;/code&gt;を作るには&lt;code&gt;b&lt;/code&gt;が必要､なら俺達はどうすればいい?&lt;/p&gt;
&lt;p&gt;ああそうか､&lt;code&gt;a&lt;/code&gt;の定義に&lt;code&gt;b&lt;/code&gt;が必要なら&lt;code&gt;b&lt;/code&gt;を作ればいい､&lt;code&gt;b&lt;/code&gt;は&lt;code&gt;a&lt;/code&gt;が必要だが､再帰関数の中に&lt;code&gt;a&lt;/code&gt;は存在できるから&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen_b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK!!!!!!!!!!!!!&lt;/p&gt;
&lt;h1 id=&quot;part-65422eac633&quot;&gt;ほか&lt;/h1&gt;
&lt;p&gt;この分解は&lt;em&gt;必ず&lt;/em&gt;可能なんですか?
ご連絡ください｡&lt;/p&gt;</description>
        <pubDate>Fri, 29 Dec 2017 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2017/12/29/%E7%9B%B8%E4%BA%92%E5%86%8D%E5%B8%B0%E3%81%AE%E5%88%86%E8%A7%A3.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2017/12/29/%E7%9B%B8%E4%BA%92%E5%86%8D%E5%B8%B0%E3%81%AE%E5%88%86%E8%A7%A3.html</guid>
        
        <category>OCaml</category>
        
        <category>関数</category>
        
        
      </item>
    
  </channel>
</rss>
