<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lilyum ensemble</title>
    <description>lily, Aikatsu, Programming language, and more</description>
    <link>https://nymphium.github.io/</link>
    <atom:link href="https://nymphium.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 Feb 2020 02:01:15 +0900</pubDate>
    <lastBuildDate>Fri, 21 Feb 2020 02:01:15 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>fcontrol/runでshallow effect handler</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
気づけば2020年になってました｡
2020年ってなんだ? SFですか?&lt;/p&gt;&lt;hr&gt;&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB+-+Algebraic+Effects%E3%81%8A%E3%81%95%E3%82%89%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB+-+Algebraic+Effects%E3%81%8A%E3%81%95%E3%82%89%E3%81%84&quot;&gt;1. はじめに - Algebraic Effectsおさらい&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本日はshallow effect handlerを実装します｡
まず &lt;em&gt;shallow&lt;/em&gt; effect handlerとはなんでしょう?
最初にalgebraic effects and handlersについておさらいします｡
あれとかこれとかそれとかを読んでおさらいしてください｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pictures/github_icon.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Algebraic Effectsであそぼう - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;こんにちは､びしょ〜じょです｡ここしばらく20行/日くらいしかコード書いてません｡いやもっと少ないかも…｡いや研究してますんで! いや〜研究もそんなにしてないな…じゃあ何を…1. はじめにAlg…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
  &lt;a href=&quot;https://nymphium.github.io/pdf/mlday2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dive into Algebraic Effects - lilyum ensemble&lt;/a&gt;
&lt;/center&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Fogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&amp;amp;w=1200&amp;amp;mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DAlgebraic%2520Effects%25E3%2581%25A8%25E3%2581%25AF%253F%2520%25E5%2587%25BA%25E8%25BA%25AB%25E3%2581%25AF%253F%2520%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25E3%2581%25AF%253F%2520%25E3%2581%259D%25E3%2581%25AE%25E7%2589%25B9%25E5%25BE%25B4%25E3%2581%25A8%25E3%2581%25AF%253F%2520%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2521%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D1caabdbc9f6c0e53b796c74eee4ee35b&amp;amp;mark-align=center%2Cmiddle&amp;amp;blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540Nymphium%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dfd6494ecf386fd4832ae2af2ec363e6c&amp;amp;blend-align=center%2Cmiddle&amp;amp;blend-mode=normal&amp;amp;s=d981ca15ae673b02388b321b0c2231ea&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effect…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;なるほど､ &lt;strong&gt;復帰可能な例外&lt;/strong&gt; ですね｡承知しました｡&lt;/p&gt;&lt;h1 id=&quot;2.+shallow+effect+handler&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+shallow+effect+handler&quot;&gt;2. shallow effect handler&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;では改めて､ &lt;em&gt;shallow&lt;/em&gt; effect handlerとはなんでしょう?
上に挙げられたシステムでは､ハンドラが取ってきた継続を起動させたときにまた発生するエフェクトが､また同じハンドラによって捕捉されています｡
逆に &lt;em&gt;shallow&lt;/em&gt; effect handler は､ハンドラが取得した継続の中で発生するエフェクトは同じハンドラによっては捕捉されず､一つ外側のハンドラまで到達します｡
論文はこちら:&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-030-02768-1_22&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://static-content.springer.com/cover/book/978-3-030-02768-1.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-030-02768-1_22&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Shallow Effect Handlers&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Plotkin and Pretnar’s effect handlers offer a versatile abstraction for modular programming with user-defined effects. Traditional deep handlersare defined by folds over computation trees. In this…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;感覚としては､ &lt;code&gt;shift/reset&lt;/code&gt; の &lt;code&gt;shift&lt;/code&gt; が継続を切り取るときに &lt;code&gt;reset&lt;/code&gt; がくっついてくるけど､ &lt;code&gt;shift0/reset0&lt;/code&gt; ではくっついてこないという関係と同じですね｡
&lt;code&gt;shift/reset&lt;/code&gt; などについてはコチラ&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://nymphium.github.io/pictures/github_icon.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;delimited continuationの夏 - lilyum ensemble&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;こんにちは､びしょ〜じょです｡control/promptとprompt tagへの理解が必要になったため､やっていきましょう｡1. continuation??? 継続??? is power…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;ごちゃごちゃ言ったけど&lt;a href=&quot;https://www.eff-lang.org/&quot;&gt;Eff言語&lt;/a&gt;でサクッと例を見てみましょう｡
こんなエフェクトと関数を定義します｡
ハンドラ&lt;code&gt;h&lt;/code&gt;で&lt;code&gt;P&lt;/code&gt;エフェクトが2回発生する式をハンドルします｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ほんで&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うん､よさそうだ｡
&lt;code&gt;(+)&lt;/code&gt; の評価は左辺の部分項を評価してから右辺に移る､と自然に考えると､最初に&lt;code&gt;P&lt;/code&gt;が発生したときにハンドラが取得する継続 &lt;code&gt;k&lt;/code&gt; は &lt;code&gt;with h handle □ + perform (P 3)&lt;/code&gt; となる｡
&lt;code&gt;□&lt;/code&gt;に&lt;code&gt;(i + i)[i/2]&lt;/code&gt;を放り込むので(中略) &lt;code&gt;4 + 9 (= 13)&lt;/code&gt; という結果が得られる｡&lt;/p&gt;&lt;p&gt;続いてshallow handlerを使います｡
ジッサイのEffにはないんですが､ &lt;code&gt;handler†&lt;/code&gt; をshallow handlerとします｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;†&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effecf&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;†&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;フーム妙だ､妙だな……｡
最初に&lt;code&gt;perform (P 2)&lt;/code&gt;をハンドルすると､取得する継続 &lt;code&gt;k&lt;/code&gt; は &lt;code&gt;□ + perform (P 3)&lt;/code&gt; です｡
おや､これは&lt;code&gt;a1&lt;/code&gt;の評価と異なりますね｡
これが &lt;strong&gt;shallow&lt;/strong&gt; です｡
ハンドラは継続の中まで追っていきません｡
なので2回めのエフェクトの発生は､ &lt;code&gt;P&lt;/code&gt; のマッチアーム内で新たに定義しているハンドラによってハンドルされます｡
なので &lt;code&gt;4 + 10 (= 14)&lt;/code&gt; が返ってきます｡&lt;/p&gt;&lt;h2 id=&quot;2-1.+%E5%BD%B9%E3%81%AB%E7%AB%8B%E3%81%A4%E3%82%93%E3%81%A7%E3%81%99%E3%81%8B%3F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+%E5%BD%B9%E3%81%AB%E7%AB%8B%E3%81%A4%E3%82%93%E3%81%A7%E3%81%99%E3%81%8B%3F&quot;&gt;2-1. 役に立つんですか?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Hillerströmらの論文では､pipe/copipeのように生成と消費をおこなう相互再帰関数を例にあげている｡
またコルーチンのようにリターンポイントをハンドラで実装するときなども､shallow handlerで事足りるだろう｡&lt;/p&gt;&lt;h1 id=&quot;3.+%3Ccode%3Efcontrol%2Frun%3C%2Fcode%3E%E3%81%A7shallow+effect+handler%E3%81%AE%E5%AE%9F%E8%A3%85&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+%3Ccode%3Efcontrol%2Frun%3C%2Fcode%3E%E3%81%A7shallow+effect+handler%E3%81%AE%E5%AE%9F%E8%A3%85&quot;&gt;3. &lt;code&gt;fcontrol/run&lt;/code&gt;でshallow effect handlerの実装&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ところでわたくし&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/tfp2020.pdf&quot;&gt;こういう研究&lt;/a&gt;をしてるんですが､実は先日もポーランドに行って&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/tfp2020-slide.pdf&quot;&gt;発表しました&lt;/a&gt;(隙自語)｡
このコルーチンによるalgebraic effectsの実装は､ハンドラがdeepになってます｡
&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/master_thesis.pdf&quot;&gt;修論&lt;/a&gt;ではshallowな方の埋め込み方法も乗せているんですが､ご覧の通りなんかぱっとしないし効率もよく無さそうだ｡&lt;/p&gt;&lt;p&gt;ところで &lt;code&gt;fcontrol/run&lt;/code&gt; というコントロールオペレータがあるのですが
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.7256&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;/images/csx_logo_front.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.7256&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Handling Control&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;CiteSeerX - Document Details (Isaac Councill, Lee Giles, Pradeep Teregowda): Non-local control transfer and exception handling have a long tradition in higher-order programming languages such as Common Lisp, Scheme and ML. However, each language stops short of providing a full and complementary approach — control handling is provided only  if the corresponding control operator is first-order. In this work, we describe handlers in a higher-order control setting. We invoke our earlier theoretical result that all denotational models of control languages invariably include capabilities that handle control. These capabilities, when incorporated into the language, form an elegant and powerful higher-order generalization of the first-order exception-handling mechanism.  1 Introduction  Control manipulation in applicative programming languages comes in two flavors. First-order control operators allow computations to abort to a dynamically enclosing control context, e.g., Common Lisp’s [23, 24]  throw and ML’s [9, 17] raise. They are invariably accompanied by forms th…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;あんまりいい感じに意味論が書かれてないんで&lt;a href=&quot;https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fcontrol..rkt%29._fcontrol%29%29&quot;&gt;&lt;code&gt;racket/control&lt;/code&gt; のドキュメント&lt;/a&gt;より引用すると&lt;/p&gt;&lt;p&gt;$$
\begin{array}{rcll}
    \left(\%\ \mathit{val}\ \mathit{proc}\right) &amp;amp; \rightarrow &amp;amp; \mathit{val} &amp;amp; \cr
    \left(\%\ E \left[\left(\mathtt{fcontrol}\ \mathit{val}\right)\right] \mathit{proc} \right) &amp;amp; \rightarrow &amp;amp; \left(\mathit{proc}\ \mathit{val}\ \left(\lambda \left(x\right)\ E\left[x\right]\right)\right) &amp;amp; \text{$E$ has no $\%$}
\end{array}
$$&lt;/p&gt;&lt;p&gt;となっています｡
&lt;code&gt;%&lt;/code&gt; は&lt;code&gt;run&lt;/code&gt;のwrapperで､&lt;code&gt;(% exp handler) === (run (λ () exp) handler)&lt;/code&gt;とのことです｡
&lt;code&gt;%&lt;/code&gt; がdelimiterで &lt;code&gt;fcontrol&lt;/code&gt; が継続を取り出すオペレータです｡
面白いのは &lt;code&gt;shift/reset&lt;/code&gt; や &lt;code&gt;control/prompt&lt;/code&gt; と違い､ &lt;code&gt;fcontrol&lt;/code&gt; 自体は継続を扱わずにdelimiterの &lt;code&gt;%&lt;/code&gt; の引数の &lt;code&gt;proc&lt;/code&gt; が継続を使います｡
アレッ?! これすでに &lt;code&gt;(% □ proc)&lt;/code&gt; がハンドラで &lt;code&gt;fcontrol&lt;/code&gt; がエフェクト発生じゃん?!
ところでRacketの &lt;code&gt;fcontrol/run&lt;/code&gt; はプロンプトタグが使えます｡
つまり &lt;code&gt;fcontrol&lt;/code&gt; が評価されたときに､どのdelimiterまで戻ればいいかをタグにより指定することができるんですねえ｡
ここで吉報です｡multi-prompt shift/resetによるEff言語の埋め込みはKiselyovらにより示されています｡
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/308969161_Eff_Directly_in_OCaml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://i1.rgstatic.net/publication/308969161_Eff_Directly_in_OCaml/links/57fb885c08ae280dd0c4b6d3/largepreview.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.researchgate.net/publication/308969161_Eff_Directly_in_OCaml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;(PDF) Eff Directly in OCaml&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;PDF | We present the embedding of the language Eff into OCaml, using the library of delimited continuations or the OCaml-effects branch. The embedding… | Find, read and cite all the research you need on ResearchGate&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;よし! では実装しましたはいこちら&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcontrol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-effect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make-continuation-prompt-tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エフェクト&lt;code&gt;eff&lt;/code&gt;を引数&lt;code&gt;v&lt;/code&gt;を渡して発生させるので､そのまま&lt;code&gt;fcontrol&lt;/code&gt;を使います｡
Racketの&lt;code&gt;fcontrol&lt;/code&gt;ではオプショナル引数&lt;code&gt;#:tag&lt;/code&gt;でタグを渡せます｡&lt;/p&gt;&lt;p&gt;エフェクトはプロンプトタグに対応するのでそのままです｡&lt;/p&gt;&lt;p&gt;ハンドラの実装がメインディッシュです｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-with-shallow-handler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;effh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make-continuation-prompt-tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;effh~&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fcontrol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;effh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;effh~&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:tag&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;(call-with-shalow-handler effe vh effh)&lt;/code&gt;で､エフェクト&lt;code&gt;eff&lt;/code&gt;をハンドルするハンドラを作ります｡
んでサンク&lt;code&gt;th&lt;/code&gt;をこのハンドラに渡すと､ハンドラのもとでサンクが潰れて評価が走ります｡&lt;/p&gt;&lt;p&gt;基本的な考え方は非常に簡単､&lt;code&gt;fcontrol/run&lt;/code&gt;がalgebraic effects &amp;amp; handlersであるという直感をそのまま使います｡
&lt;code&gt;(% (th) effh #:tag eff)&lt;/code&gt; でエフェクト&lt;code&gt;eff&lt;/code&gt;が起きたときにエフェクトハンドラ&lt;code&gt;effh&lt;/code&gt;でハンドルします｡
しかし&lt;code&gt;fcontrol/run&lt;/code&gt;に足りないものがある｡なにか｡value handlerである｡
shallow effect handlerにおいてvalue handlerが介入するタイミングはdeepな場合と同じ､値をハンドルする場合のみです｡
そしてshallowなので一度エフェクトをハンドルしたらハンドラは撤退しなければならない｡
なのでこういう戦略でいきます｡
- 戻り値は常にvalue handlerで取るようにする
- しかしエフェクトが発生したらvalue handlerを迂回する
ベストか? と言われると自信ないですが､ハンドリングされた式を評価したときにエフェクトハンドラでハンドルされたかどうかのフラグを持っておくのはなんかダサいし状態を持ちたくないというのはピュアな感覚です｡
またタグをつけたり外したりもちょっと面倒です｡
なので今回はどうにかして迂回します｡
幸い今回はコントロールオペレータが1つ､&lt;code&gt;fcontrol/run&lt;/code&gt;が与えられています｡
しかも今回はプロンプトタグのおまけ付きだ｡
エフェクトハンドラの戻り値を&lt;code&gt;fcontrol&lt;/code&gt;で飛ばしてvalue handlerに渡るのを阻止しました｡
吹っ飛んだときの継続は使わなくていいので､&lt;code&gt;const&lt;/code&gt;関数でエフェクトハンドラの戻り値だけ受け取って返します｡&lt;/p&gt;&lt;p&gt;いい感じじゃないですか｡
それではコルーチンを実装してみます｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;coroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:mutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;#:extra-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Coroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-effect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-with-shallow-handler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Yield&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-coroutine-it!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;nv&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coroutine-it&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;yield&lt;/code&gt;はエフェクトの発生､&lt;code&gt;resume&lt;/code&gt;はハンドラ､コルーチンスレッドは継続が保存されたセルです｡
実装うまくいったかな?&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-racket&quot; data-lang=&quot;racket&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;coroutine&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;displayln&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;))))]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こいつ､動くぞ……!&lt;/p&gt;&lt;h1 id=&quot;4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;4. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;fcontrol/run&lt;/code&gt;というおもしろいコントロールオペレータとそれを利用したshallow effect handlerの実装を紹介しました｡
パフォーマンス比較とか他のコントロールオペレータとの関係は読者の皆さんの課題と勝手にさせて､ええ､いただきます｡
夏休み最終日に絶望する小学生にならないように､日々こつこつと取り組んでください｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;エッ修論?! 俺は卒業したのか……｡&lt;/p&gt;</description>
        <pubDate>Thu, 20 Feb 2020 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2020/02/20/shallow_effec_handler_with_fcontrol.md.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2020/02/20/shallow_effec_handler_with_fcontrol.md.html</guid>
        
        <category>Algebraic Effects</category>
        
        <category>Delimited Continuation</category>
        
        <category>Racket</category>
        
        
      </item>
    
      <item>
        <title>『エフェクトに部分型のある代数的効果』</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これは&lt;a href=&quot;https://qiita.com/advent-calendar/2019/type&quot;&gt;型Advent Calendar 2019&lt;/a&gt;の9日目の記事の記事です｡
空いてるので9日目にタイムスリップして&lt;a href=&quot;https://qiita.com/Nymphium/items/7ec2512fe85fe7aaebf4&quot;&gt;前日&lt;/a&gt;に続いて記事を突っ込みました｡&lt;/p&gt;&lt;p&gt;実際の記事はこちら: &lt;a href=&quot;/src/2019/12/22/effsub/main.pdf&quot;&gt;エフェクトに部分型のある代数的効果(pdf)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;実装が先立ってたものを適当に定式化しました｡&lt;/p&gt;</description>
        <pubDate>Sun, 22 Dec 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/12/22/effsub.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/12/22/effsub.html</guid>
        
        <category>型</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>『その言語､定義されてますか』</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これは&lt;a href=&quot;https://qiita.com/advent-calendar/2019/lang_dev&quot;&gt;言語実装Advent Calendar 2019&lt;/a&gt;の15日目の記事の記事です｡&lt;/p&gt;&lt;p&gt;実際の記事はこちら: &lt;a href=&quot;/src/2019/12/15/%E3%80%8E%E3%81%9D%E3%81%AE%E8%A8%80%E8%AA%9E%EF%BD%A4%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B%E3%80%8F/main.pdf&quot;&gt;その言語､定義されてますか(pdf)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;\(\LaTeX\)記法をバンバン使うため\(\KaTeX\)はイライラして台パンしちゃうと思うんで､素直に\(\LaTeX\)使わせていただきます｡
本記事は『その言語､定義されてますか』のポインタです｡&lt;/p&gt;</description>
        <pubDate>Sun, 15 Dec 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/12/15/%E3%81%9D%E3%81%AE%E8%A8%80%E8%AA%9E-%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/12/15/%E3%81%9D%E3%81%AE%E8%A8%80%E8%AA%9E-%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B.html</guid>
        
        <category>言語実装</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>エフェクト､do､ANF､継続､継続</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;&lt;p&gt;修士中間発表終わったのでもう研究しなくてOK!!!!!!!!&lt;/p&gt;&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;突然ですがみなさんエフェクトを発生させていますか｡
ところでエフェクトはどこで発生するのでしょうか｡
あ! とりあえずcall-by-valueでいいですか｡はい｡&lt;/p&gt;&lt;p&gt;エフェクトは値でないexpression､つまり関数呼び出しで発生する､というのはなんとなく分かるんじゃないでしょうか｡
値を使ったり変数を参照したり&lt;sup id=&quot;fnref1&quot; title=&quot;変数の参照もエフェクトとして考えることができるがここでは割愛 &quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;するだけでなんかよくわからんことが起きては困る｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:example&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:example&quot;&gt;1.1&lt;/a&gt;
. 計算エフェクトの発生&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* ここで発生 *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;ところで計算エフェクトの発生に印を付けたいのですがOCamlでは…｡&lt;/p&gt;&lt;h1 id=&quot;2.+notion+of+computation&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+notion+of+computation&quot;&gt;2. notion of computation&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;effect-and-type systemを思い出してみましょう｡
なにか&lt;code&gt;t&lt;/code&gt;型の値を返すが､途中に計算エフェクト&lt;code&gt;T&lt;/code&gt;が発生する場合､&lt;code&gt;T t&lt;/code&gt;と書いたりします｡
高カインド型は今回あまり触れないかもしれないですが､念の為Haskellでいきましょう｡
Scalaもあるがエフェクトがどこでも発生させられるので今回はやめておこう｡
自分､ &lt;code&gt;-XStrict&lt;/code&gt; いいっすか&lt;/p&gt;&lt;h2 id=&quot;2-1.+%E5%80%A4%E3%81%AE%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A8%E7%B6%99%E7%B6%9A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+%E5%80%A4%E3%81%AE%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A8%E7%B6%99%E7%B6%9A&quot;&gt;2-1. 値の取り出しと継続&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;T t&lt;/code&gt;から&lt;code&gt;t&lt;/code&gt;を取り出したいときはどうするんでしょうか｡
そうだね､bind(&lt;code&gt;(&amp;gt;&amp;gt;=) :: T t -&amp;gt; (t -&amp;gt; T u) -&amp;gt; T u&lt;/code&gt;)だね(プログラム&lt;a href=&quot;#lst:bind&quot;&gt;2.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:bind&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:bind&quot;&gt;2.1&lt;/a&gt;
. bind&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- わかりやすくeta expansion&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;左辺で計算エフェクトが発生しつつ値が出てきて(&lt;code&gt;T t&lt;/code&gt;)､値を取り出して(&lt;code&gt;t&lt;/code&gt;)処理をおこなって値を返す(&lt;code&gt;T u&lt;/code&gt;)｡
ところでHaskellならdoがありますねえ(プログラム&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
)&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:do&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
. do記法&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 手続き感を出すためにケツセミコロン&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;#lst:bind&quot;&gt;2.1&lt;/a&gt;
から&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
への変換はみたまんまで､&lt;code&gt;do&lt;/code&gt;(の一部)は&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の糖衣構文である｡
ところでこの変換により､bindの右辺が&lt;code&gt;do&lt;/code&gt;記法における残りの計算部分､つまり&lt;strong&gt;継続&lt;/strong&gt;になることが分かる｡
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;でチェインしまくるのがCPSを手で書くことにあたるのに対し､&lt;code&gt;do&lt;/code&gt;による書き方はCPSをうまく隠蔽しています｡&lt;/p&gt;&lt;h1 id=&quot;3.+A-Normal+Form%EF%BD%A4%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFMonadic+Normal+Form&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+A-Normal+Form%EF%BD%A4%E3%81%82%E3%82%8B%E3%81%84%E3%81%AFMonadic+Normal+Form&quot;&gt;3. A-Normal Form､あるいはMonadic Normal Form&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ところでOCamlはエフェクト発生させ放題プランに加入してるのでどこでもエフェクトが発生します(プログラム&lt;a href=&quot;#lst:effectful&quot;&gt;3.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:effectful&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:effectful&quot;&gt;3.1&lt;/a&gt;
. 計算エフェクトの大量発生&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* prints &quot;hello\nhello\n11&quot; *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;計算エフェクトがどこで起きるのかよくわかんね〜〜
&lt;code&gt;e1 e2&lt;/code&gt;のような場合､先に&lt;code&gt;e2&lt;/code&gt;で発生しうるエフェクトを解消してから､つまり評価をおこなって出てきた値を､&lt;code&gt;e1&lt;/code&gt;を評価して出てきた関数に渡したい｡
ではexpressionがネストしないような形にしよう(プログラム&lt;a href=&quot;#lst:anf&quot;&gt;3.2&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:anf&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:anf&quot;&gt;3.2&lt;/a&gt;
. 値を逐一取り出し太郎&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;このような形式は&lt;em&gt;A-Normal Form&lt;/em&gt;(略してANF)と呼ばれ､&lt;code&gt;let&lt;/code&gt;の右辺はredexが一つしか無い状態に制限されている｡
それにしてもこれは&lt;a href=&quot;#lst:do&quot;&gt;2.2&lt;/a&gt;
に近いですねえ｡
MoggiがHaskellのモナドのコンセプトとなる論文&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; title=&quot;Moggi, Eugenio. “Notions of computation and monads.” Information and computation 93.1 (1991): 55-92. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;
で計算エフェクトを扱う計算体系として提案しているものは､&lt;code&gt;let (x : t) &amp;lt;= (e1 : T t) in (e2 : T u)&lt;/code&gt;のように非常にANFに似た形の構文を持っている｡
そしてANFは&lt;strong&gt;Monadic&lt;/strong&gt; &lt;em&gt;Normal Form&lt;/em&gt;ともよばれている&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn3&quot; title=&quot;Danvy, Olivier. “A new one-pass transformation into monadic normal form.” International Conference on Compiler Construction. Springer, Berlin, Heidelberg, 2003. &quot; id=&quot;fnref3&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;
｡
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;のシグネチャを思い出してみると､&lt;code&gt;let&lt;/code&gt;をラムダ抽象でエイヤッできることと合わせれば言いたいことが分かる｡&lt;/p&gt;&lt;h1 id=&quot;4.+%E5%8F%97%E3%81%91%E7%B6%99%E3%81%8C%E3%82%8C%E3%82%8B%3Ccode%3Edo%3C%2Fcode%3E%EF%BD%A4%E3%81%9D%E3%81%97%E3%81%A6%E7%B6%99%E7%B6%9A%E3%81%AF%E3%81%AA%E3%81%9C%E7%8F%BE%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E5%8F%97%E3%81%91%E7%B6%99%E3%81%8C%E3%82%8C%E3%82%8B%3Ccode%3Edo%3C%2Fcode%3E%EF%BD%A4%E3%81%9D%E3%81%97%E3%81%A6%E7%B6%99%E7%B6%9A%E3%81%AF%E3%81%AA%E3%81%9C%E7%8F%BE%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B&quot;&gt;4. 受け継がれる&lt;code&gt;do&lt;/code&gt;､そして継続はなぜ現れるのか&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;時は令和､現在計算エフェクトを扱う機能として代数的効果が爆流行りである&lt;sup&gt;&lt;em&gt;[要出展]&lt;/em&gt;&lt;/sup&gt;｡
いや令和は関係ないんですが､代数的効果という概念の初出が2003年なので､計算機科学においては非常に新しいものである｡
代数的効果とは､計算エフェクトを代数的に扱うような言語機能である｡
代数的に､というのはソレ自体には意味がなく､ただ構造があるだけで…なんたらかんたら…｡
では意味はどこで付くかというと､ハンドラというものによって与えられる｡
代数的や例外というキーワードから､とりあえずOCamlの例外機構を思い出してもらえるとなんとなく分かってもらえるかもしれない｡&lt;/p&gt;&lt;p&gt;Eff&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
 &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn5&quot; title=&quot;Eff Programming Language - https://www.eff-lang.org/ こちらの実際のプログラム言語はMLっぽい構文になっているので本文では[4]
に従う｡ &quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;
という言語で例を見てみよう(プログラム&lt;a href=&quot;#lst:eff&quot;&gt;4.1&lt;/a&gt;
)｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
との構文的な差分として､エフェクトの発生にはわかりやすさのため､慣習的に使われる&lt;code&gt;#&lt;/code&gt;をつけるようにした｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:eff&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:eff&quot;&gt;4.1&lt;/a&gt;
. Effの例 (&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
のFig.2より引用､一部改変)&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;ここで&lt;code&gt;#get&lt;/code&gt;と&lt;code&gt;#print&lt;/code&gt;がエフェクトの発生を表している｡
また､&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
にある通り､&lt;code&gt;do y &amp;lt;- #op v in c&lt;/code&gt;は&lt;code&gt;#op(v; y. c)&lt;/code&gt;の糖衣構文となっている｡
つまり&lt;code&gt;do n &amp;lt;- #get () in e&lt;/code&gt;は&lt;code&gt;#get((); n. e)&lt;/code&gt;となる｡
おや､&lt;code&gt;#get((); n. e)&lt;/code&gt;のうち&lt;code&gt;n. e&lt;/code&gt;は継続じゃないですか､
そして&lt;code&gt;do&lt;/code&gt;の右辺でエフェクトが発生しているではないか｡
先述のとおり､エフェクトに意味を与えるのはハンドラでした｡
ハンドラでどうにかなる様子を､desugarしながら見てみよう(プログラム&lt;a href=&quot;#lst:effhandle&quot;&gt;4.2&lt;/a&gt;
)｡
&lt;label id=&quot;lst:effhandle&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:effhandle&quot;&gt;4.2&lt;/a&gt;
. 脱糖&amp;amp;エフェクトのハンドル&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_stdout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;このdesugaringを見てみると､エフェクトが&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;の左辺､継続が右辺に対応しそうだ｡
Haskellにおける型クラスのようにimplicitに実装が与えられるのではなく､例外発生箇所をハンドラでexplicitにハンドルするというところが異なりますね｡&lt;/p&gt;&lt;p&gt;エフェクトが発生するとハンドラにコントロールが移り､エフェクトの引数がパターンマッチ風に渡る｡
ハンドラでは継続がファーストクラスで使える｡
継続はつまりハンドルされている式の残りの部分なので､継続を実行するとコントロールがハンドラから元の式に戻る｡&lt;/p&gt;&lt;p&gt;エフェクトを扱いたい場合に継続はなぜ現れるのか､分かってきたかもしれません｡
エフェクトに意味を与えるもの(Monadのインスタンス､エフェクトハンドラ)にコントロールが移ったあと､元の式に復帰するためには継続をハンドラに渡して呼んでもらうのがシンプルである｡
そして､&lt;code&gt;List&lt;/code&gt;モナドとか､非決定計算など､継続が複数回(あるいは末尾位置以外で)呼び出されるのがそもそも計算エフェクトに織り込まれている場合もあり､継続がファーストクラスであることがそもそもエフェクトシステムには必要なのである｡&lt;/p&gt;&lt;h1 id=&quot;5.+%E7%B6%99%E7%B6%9A%E3%81%8B%E3%82%89%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E7%B6%99%E7%B6%9A%E3%81%8B%E3%82%89%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8&quot;&gt;5. 継続からエフェクトへ&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;5-1.+OCaml4.08%E3%81%AEbinding+operator&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5-1.+OCaml4.08%E3%81%AEbinding+operator&quot;&gt;5-1. OCaml4.08のbinding operator&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;OCaml4.08で新たな構文拡張が生まれました｡
詳細はこちらに書いた｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/a13ed0fe3461708fe306&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Fogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&amp;amp;w=1200&amp;amp;mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DOCaml%25204.08%25E3%2581%25AEbinding%2520operator%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3Dc4fa026ede7396b5c817d96bd051bdae&amp;amp;mark-align=center%2Cmiddle&amp;amp;blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540Nymphium%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dfd6494ecf386fd4832ae2af2ec363e6c&amp;amp;blend-align=center%2Cmiddle&amp;amp;blend-mode=normal&amp;amp;s=19d3690eb2370f83368badc6e88426de&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/a13ed0fe3461708fe306&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OCaml 4.08のbinding operator - Qiita&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;# はじめにOCaml 4.08よりbinding operatorというものが追加されました｡[8.24  Binding operators](http://caml.inria.fr/pub/docs/manual-ocam…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;簡単にいうと､ただならぬ&lt;code&gt;let&lt;/code&gt;が定義できる(プログラム&lt;a href=&quot;#lst:ocamlbinding&quot;&gt;5.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:ocamlbinding&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:ocamlbinding&quot;&gt;5.1&lt;/a&gt;
. binding operatorを使ったOptionモナド風&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* val ( let* ) : 'a option -&amp;gt; ('a -&amp;gt; 'b option) -&amp;gt; 'b option *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;none&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;継続が使えるようになったのでeffectfulな計算を手続き的に書けるようになった､という逆の流れである｡
流れは逆であるが､やりたかったのは上記のように&lt;em&gt;monadic&lt;/em&gt;な&lt;code&gt;let&lt;/code&gt;である｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/1947&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1841483?s=400&amp;amp;v=4&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml/pull/1947&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Add “monadic” let operators by lpw25 · Pull Request #1947 · ocaml/ocaml&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Based on a few recent comments and PRs, I thought it might be a good time to revive the idea of adding some support for &amp;amp;quot;monadic&amp;amp;quot; syntax to OCaml. I can&amp;amp;#39;t find the last at…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;=&amp;lt; 4.07までは&lt;a href=&quot;https://github.com/janestreet/ppx_let&quot;&gt;ppxによる拡張&lt;/a&gt;もあり､非常に期待されていた機能である｡&lt;/p&gt;&lt;h2 id=&quot;5-2.+%3Ccode%3EContT%3C%2Fcode%3E%0A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5-2.+%3Ccode%3EContT%3C%2Fcode%3E%0A&quot;&gt;5-2. &lt;code&gt;ContT&lt;/code&gt;
&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;継続があれば計算エフェクトを手続き的に書けるのか! ということでcontinuationモナドになんでも突っ込めばいいんじゃないか｡
そこで&lt;code&gt;ContT&lt;/code&gt; monad transformerです｡
という話を読みました!!!&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
  &lt;a href=&quot;https://haskell.e-bigmoon.com/posts/2018/06-26-cont-param.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ContT を使ってコードを綺麗にしよう! - BIGMOON Haskeller’s BLOG&lt;/a&gt;
&lt;/center&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://haskell.jp/blog/posts/2019/fallible.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://haskell.jp/blog/img/logo-square.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://haskell.jp/blog/posts/2019/fallible.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fallibleというパッケージをリリースしました - Haskell-jp&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;—タイトルの通り、fallibleというパッケージを紹介します。- [matsubara0507/fallible: interface for fallible data type like Maybe and Either. - GitHub](https://github.com/matsubara0507/fallible)ちなみに、fallibleはHaskell-jp Slackで&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h1 id=&quot;6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;6. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;継続はつよい&lt;/p&gt;&lt;p&gt;エフェクトフルコンピュテーションはおもしろい&lt;/p&gt;&lt;p&gt;DSLの組み立てにも継続がめっちゃ使えるやんみたいな話を書こうと思ったけど別の機会に｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;この記事はHERP労働時間に書かれた｡
HERPは本物のcontinuationプログラマーも募集しています｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/334093&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://d2v9k5u4v94ulw.cloudfront.net/small_light(dw=1440,dh=1440,da=l,ds=n,cc=FFFFFF)/assets/images/3926988/original/9bd536c7-433a-4e21-ab8b-9ff26fc870aa?1563425939&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/334093&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Haskellで普通にWebサービスを開発していきたいエンジニア募集！ by 株式会社HERP&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;スクラム採用を実現する採用管理プラットフォーム『HERP ATS』の新規コンポーネントの開発をお願いします．新規のコンポーネントを…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;変数の参照もエフェクトとして考えることができるがここでは割愛 &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Moggi, Eugenio. “Notions of computation and monads.” Information and computation 93.1 (1991): 55-92. &lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Danvy, Olivier. “A new one-pass transformation into monadic normal form.” International Conference on Compiler Construction. Springer, Berlin, Heidelberg, 2003. &lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Eff Programming Language - &lt;a href=&quot;https://www.eff-lang.org/&quot;&gt;https://www.eff-lang.org/&lt;/a&gt; こちらの実際のプログラム言語はMLっぽい構文になっているので本文では&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Pretnar, Matija. “An introduction to algebraic effects and handlers. invited tutorial paper.” Electronic Notes in Theoretical Computer Science 319 (2015): 19-35. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
に従う｡ &lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 21 Jul 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/07/21/effect_cont.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/07/21/effect_cont.html</guid>
        
        <category>Continuation</category>
        
        <category>CPS</category>
        
        <category>ANF</category>
        
        <category>effect system</category>
        
        <category>OCaml</category>
        
        <category>Haskell</category>
        
        
      </item>
    
      <item>
        <title>ScalaMatsuri2019いってきた</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;h1 id=&quot;%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;こんにちは､びしょ〜じょです｡
ScalaMatsuri2019にいってきました｡
Scalaはちょっとしか書いてないうえにだいぶ前ですが､論文やコードはぼちぼち読んでるので興味は依然としてだいぶある､という感じの人間です｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;頑張ってる感を出したんでスカラマツリに大学の金で行けないかな〜〜&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1110532965455540224?ref_src=twsrc%5Etfw&quot;&gt;March 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ScalaMatsuriの参加費が皆さんの税金で賄われることとなりました｡ありがとうございます｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1121697171089182735?ref_src=twsrc%5Etfw&quot;&gt;April 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;良いですね!
東京で開催なので宿泊の必要がなかったので(とはいえ茨城から東京はめんどいので宿泊したかったが……)すんなり申請できました｡
懇親会分はレギュレーションにより自費です｡
ボクが研究しているalgebraic effectsに類似する機能であるextensible effectsに関する複数の発表を聞くのが主な目的でした｡
他にも面白い目標があったしよく会う人とか久しぶりに会う人とか､知り合いの知り合いと知り合いになるなど､様々な実りのある会合でした｡&lt;/p&gt;&lt;p&gt;聞いてて特に面白いなと思ったセッションについていくつか振り返っていきます｡&lt;/p&gt;&lt;h1 id=&quot;Day1&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Day1&quot;&gt;Day1&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;The+advantage+of+using+%E2%80%98Eff%E2%80%99+in+Scala+Project&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#The+advantage+of+using+%E2%80%98Eff%E2%80%99+in+Scala+Project&quot;&gt;The advantage of using ‘Eff’ in Scala Project&lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/ma2k8/the-advantage-of-using-eff-in-scala-project&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/9b8316049f8748f1b4cd3f73718f43c2/slide_0.jpg?525359&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/ma2k8/the-advantage-of-using-eff-in-scala-project&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The advantage of using ’Eff’ in Scala Project&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;R社のスタディサプリではextensible effects, 通称Effをプロダクトで使っているようです｡良いですね｡
話が前後しますが､Effはまあまあ難しいのが短所です｡
それでも複数のエフェクトをfor式内で扱えるのがありあまる長所となっています｡&lt;/p&gt;&lt;p&gt;発生させいエフェクトはなんだったのかというと､例えば&lt;code&gt;Future[A]&lt;/code&gt;などです｡
&lt;code&gt;Future[A]&lt;/code&gt;はとにかくシンプルという長所がある一方､セマフォの制御が難しかったりエラーハンドリングが大雑把になるなどの欠点がある｡&lt;/p&gt;&lt;p&gt;では&lt;code&gt;Future[Try[A]]&lt;/code&gt;にポケモン進化! となるが､エラーハンドリングが&lt;code&gt;Throwable&lt;/code&gt;どまりです｡
Javaのライブラリをラップするときには内部で&lt;code&gt;Try&lt;/code&gt;を使うようです｡インターフェースは&lt;code&gt;Either&lt;/code&gt;にしてScala的に利用できるようにするようだ｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;Future[E Either A]&lt;/code&gt;にすることで､上記のようにScalaっぽく柔軟にエラーハンドリングができるが､&lt;code&gt;Either&lt;/code&gt;を引き回す必要がある｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;EitherT[Future, E, A]&lt;/code&gt;でモナトラを使うことで&lt;code&gt;for&lt;/code&gt;の中がシンプルになる｡
一方モナトラの問題点がそのまま出てくるわけですね｡lift問題やモナドスタック､合成の順番､パフォーマンスなど｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;Eff[R, A]&lt;/code&gt;はモナトラ同様に複数のエフェクトをいちどきに使うことができる｡
のみならず､モナトラの持つ合成順序による振る舞いの違いやパフォーマンス問題が解決されている｡
欠点はやはり理解が難しい部分｡&lt;/p&gt;&lt;p&gt;extensible effectsはモナトラとの比較がよくされますが､確かにモナトラ以前というものがあり､それらのpros/consがまとまっているのがEffのありがたみをもっと噛みしめるのに役立ちました｡
Clean Architectrueと一緒にEffを使っているようですが､CAとEffの相性の良さとかは聞いておくべきだった……｡
&lt;code&gt;for&lt;/code&gt;式といえばDSL!(短絡的発想) なのでCAの例の図の層ごとにDSLが定義され､DSLの使えるエフェクトがEffでひとまとまりになっている､などで使えそうな印象があります｡&lt;/p&gt;&lt;h2 id=&quot;Making+Logic+Moand+%3Clabel+id%3D%22logicmonad%22%3E%3C%2Flabel%3E%0A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Making+Logic+Moand+%3Clabel+id%3D%22logicmonad%22%3E%3C%2Flabel%3E%0A&quot;&gt;Making Logic Moand &lt;label id=&quot;logicmonad&quot;&gt;&lt;/label&gt;
&lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://www.slideshare.net/SanshiroYoshida/making-logic-monad&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://cdn.slidesharecdn.com/ss_thumbnails/matsurihalcat-190628054808-thumbnail-4.jpg?cb=1561704714&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://www.slideshare.net/SanshiroYoshida/making-logic-monad&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Making Logic Monad&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Making Logic Monad @halcat0x15a Recruit Marketing Partners Co., Ltd.  &lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;論理プログラミングをScalaでもやろう! という話｡
論理プログラミングといえばPrologですが､その本質はbacktrackingとunification｡
これをScalaで実現するには……?&lt;/p&gt;&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;のようなcomputationはバックトラッキングと考えられる｡
つまり&lt;strong&gt;&lt;em&gt;バックトラッキングはMonadPlusである&lt;/em&gt;&lt;/strong&gt;｡&lt;/p&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;backtracking&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;monadplus&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;\/&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;plus&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;/\&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;成功&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;pure&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;失敗&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;MonadPlusとしてListを使う｡&lt;/p&gt;&lt;p&gt;unificationは変数と値を表す適当なデータ構造でうまくやる｡
また変数に対応する値を保つ状態を持つ｡
ところでbacktrackingとmutable dataは相性が悪い｡
なので状態をimmutableに表したい､つまりStateモナドを使う｡
ということで論理プログラミングをおこなうLogiモナド(List + State)を構築する｡&lt;/p&gt;&lt;p&gt;よっしゃOKや! というわけではなく､問題点がある｡
スタックセーフでない点と､データ構造がListに依存してる点｡
これらを解決するために､Freerモナドを利用する｡&lt;/p&gt;&lt;p&gt;Freerモナドの継続を持つ部分でType-aligned Sequenceを利用する｡
簡単にいうと&lt;code&gt;TASeq(A =&amp;gt; B, B =&amp;gt; C) === A =&amp;gt; C&lt;/code&gt; みたいな感じで関数合成がリストで表現される｡
これによって&lt;code&gt;flatMap&lt;/code&gt;の継続を合成するところがスタックセーフになる｡
トランポリンなどを使わなくてもスタックセーフになるのが良いですね｡&lt;/p&gt;&lt;p&gt;そしてFreerからalgebraic effectsを作る｡
各プリミティブをエフェクトとして追加していく｡
そしてalgebraic effectsによりLogicモナドを構成して､Listへの依存がなくなる｡
Freerの&lt;code&gt;run&lt;/code&gt;を書くことで､&lt;code&gt;Vector&lt;/code&gt;の戻り値にして有限個の解を得たり､&lt;code&gt;Stream&lt;/code&gt;にして無限の解をいっぱいとってきたり､などなど｡
また各プリミティブが個別に定義されているので探索アルゴリズムをカスタマイズしたり追加できる｡
例えばカットを定義するなど｡&lt;/p&gt;&lt;p&gt;なかなか聴きごたえのある内容でした｡
パフォーマンスに関する質問はやはり(やはり?)でてきて､どうすればパフォーマンス良くなるんでしょうね｡
静的になんとかなる部分をなんとかするとだいぶパフォーマンスがよくなるので､今はとりあえずcompilationしておきましょう｡
『Efficient Compilation of Algebraic Effects and Handlers』を読んでください｡&lt;/p&gt;&lt;h2 id=&quot;CPS+or+DI&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#CPS+or+DI&quot;&gt;CPS or DI&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
  &lt;a href=&quot;https://gakuzzzz.github.io/slides/cps_or_di/#1&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CPS or DI Scala Matsuri 2019 2019/06/28&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;コンポーネントの分割と合成の方法として､DIを使う方法とCPSを使う方法の比較でした｡
複数の関連する処理内容を渡したいときにはDI､そうでなければCPS､アドホックに処理を合成する場合はCPS､という使い分けをすると良いということでした｡
CPSはcontinuation monadでサラッと書けるのが良い｡
FPとOOPができるScalaならではの使い分けですねえ｡&lt;/p&gt;&lt;p&gt;CPSといえばコントロールフローが使えるのが利点ですが､そこに関してあまり活きてないのと､DIとその点の比較がないのがちょっと残念でした｡
みなさんご存知ですがCPSは強力なので､なんでもできてしまうからなんでもしたくなってしまうのでいけない｡&lt;/p&gt;&lt;h2 id=&quot;%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BB%96&quot;&gt;他&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;かぶっていけなかったけど興味あるやつとか&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/phenan/intro-to-typeclass-in-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/44d8f1ad47f64c09a53d71231d5c3a4c/slide_0.jpg?525383&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/phenan/intro-to-typeclass-in-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Intro to typeclass in Scala&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/petitviolet/pure-domain-model-and-the-technology-behind-it&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/99b05b9a08014f3fbb3881785b849b06/slide_0.jpg?525398&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/petitviolet/pure-domain-model-and-the-technology-behind-it&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ピュアなドメインを支える技術/pure domain model and the technology behind it&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Presented at ScalaMatsuri2019 https://2019.scalamatsuri.org&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/mshibuya/scalaraiburariwozuo-ruqian-nizhi-tuteokitaimentenansufalsekoto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/2077a7d9ebb947e9b9647c617bd742a0/slide_0.jpg?525374&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/mshibuya/scalaraiburariwozuo-ruqian-nizhi-tuteokitaimentenansufalsekoto&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Scalaライブラリを作る前に知っておきたいメンテナンスのこと&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;in ScalaMatsuri 2019&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/atty303/case-of-ad-delivery-system-is-implemented-by-scala-and-ddd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/d35ddff2c51f48cd8ce1e17cd003de80/slide_0.jpg?525430&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/atty303/case-of-ad-delivery-system-is-implemented-by-scala-and-ddd&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Case of Ad Delivery System is Implemented by Scala and DDD&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;ScalaMatsuri 2019&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/yoshiyoshifujii/clean-architecture-in-practice-at-scalamatsuri2019&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/201e2c6be65845599e9884bdd4526389/slide_0.jpg?525424&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/yoshiyoshifujii/clean-architecture-in-practice-at-scalamatsuri2019&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clean Architecture in Practice @ScalaMatsuri2019&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;実践 Clean Architecturehttp://2019.scalamatsuri.org/&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h1 id=&quot;Day+2&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Day+2&quot;&gt;Day 2&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;2日目は主にアンカンファレンスでした｡
1日目からアイデアボードに発表案を貼っていって､シールとかで聞きたい意思を表明すると､人気な案が2日目におこなわれる､というシステム｡&lt;/p&gt;&lt;h2 id=&quot;Bengal%3A+Dotty+Cats&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Bengal%3A+Dotty+Cats&quot;&gt;Bengal: Dotty Cats&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;(スライドみつからね〜〜涙)&lt;/p&gt;&lt;p&gt;Scala3向けのCatsライクなライブラリとして開発されているBengal｡
結局あんまりわかんなかった｡
Bengalを作るにあたってキーになるScala3の新機能なんだろうか｡
とはいえ知らない新機能が多くて面白かった｡&lt;/p&gt;&lt;h3 id=&quot;extension+methods&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#extension+methods&quot;&gt;extension methods&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;コレはKokaのdot記法みたいなやつか｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circumference&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scala的には､オブジェクトにメソッドを新しく生やすという感覚だろうか｡
またextension methodsの定義の構文のおかげで二項演算子が直感的に書ける｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nf&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;%3Ccode%3Edelegate-given%3C%2Fcode%3E&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%3Ccode%3Edelegate-given%3C%2Fcode%3E&quot;&gt;&lt;code&gt;delegate-given&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;implicit parameterがいい感じに書ける&lt;/p&gt;&lt;h3 id=&quot;delegate+imports&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#delegate+imports&quot;&gt;delegate imports&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;importがいい感じに書ける&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;importe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bengal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;delegates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;importe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bengal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;delegates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Monad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;export+clauses&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#export+clauses&quot;&gt;export clauses&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;OCamlの&lt;code&gt;open&lt;/code&gt;的なやつ｡
例ではクラスかなんかのスコープにopenしていたが､OCamlの&lt;code&gt;let open&lt;/code&gt;よろしく式としても書けるのだろうか?&lt;/p&gt;&lt;h3 id=&quot;type+lambdas&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#type+lambdas&quot;&gt;type lambdas&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;とうとう言語標準に入った!&lt;/p&gt;&lt;h3 id=&quot;opaque+type+alias&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#opaque+type+alias&quot;&gt;opaque type alias&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;type aliasを作るが､完全なaliasではなく､特定のメソッドを生やすことができるようになる｡
余計なオブジェクトを作らないのでランタイムのコストを下げることが期待できるんじゃないでしょうか｡&lt;/p&gt;&lt;h3 id=&quot;typeclass+derivation&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#typeclass+derivation&quot;&gt;typeclass derivation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;はい神&lt;/p&gt;&lt;h3 id=&quot;local+coherence&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#local+coherence&quot;&gt;local coherence&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;delegationでメソッドが衝突したときに手動で解決するやつっぽい｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Haskellかよ〜〜という感じでますますアツくなるな｡&lt;/p&gt;&lt;h2 id=&quot;fujitask+meets+extensible+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#fujitask+meets+extensible+effects&quot;&gt;fujitask meets extensible effects&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
  &lt;a href=&quot;https://y-yu.github.io/fujitask-eff-slide/fujitask_without_animation.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fujitask meets extensible effects&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;トランザクションを型でうまく表現するfujitaskはsubtypingを利用したテクを利用している｡
subtyping関係は半順序集合であり､特にScalaの場合は束を作る｡
そしてトランザクションは束を作る!
なのでこれをScalaのsubtypingで表現できる｡
つまりトランザクションがScalaの型でエンコードできる｡&lt;/p&gt;&lt;p&gt;そしてFujitaskはモナドだワーイワーイということでfor式でトランザクションをスッキリ書ける｡
型クラスとsubtypingのあるScalaだからこそでき､型クラスのないJavaやsubtypingのないHaskellでは実現できない｡&lt;/p&gt;&lt;p&gt;ところで様々なforで効果を使いたいわけですが､(中略)extensible effectsを使う｡
extensible effectsはsubtypingを持たないHaskellを起源に持ち､antos-effもsubtypingが考慮されていない｡
しかし&lt;a href=&quot;#logicmonad&quot;&gt;logic monadの発表&lt;/a&gt;
をしたねこはるさん作の､subtypingを考慮した&lt;a href=&quot;https://github.com/halcat0x15a/kits-eff&quot;&gt;kits-eff&lt;/a&gt;を利用すればイケる!&lt;/p&gt;&lt;p&gt;fujitaskひいてはトランザクションとsubtypingの話がおもしろかった(小並感)｡&lt;/p&gt;&lt;h2 id=&quot;%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BB%96&quot;&gt;他&lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/tanishiking/how-we-replaced-a-10-year-old-perl-product-using-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/3eb0c03150414e2193134e2d5caa24f8/slide_0.jpg?525626&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/tanishiking/how-we-replaced-a-10-year-old-perl-product-using-scala&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How we replaced a 10-year-old Perl product using Scala&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;ScalaMatsuri 2019http://2019.scalamatsuri.org/index_en.html&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;どっかスライドまとまってないかな……&lt;/p&gt;&lt;hr&gt;&lt;h1 id=&quot;%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Scalaおもろいしもっと面白くなる! という気持ちをゲインしたのですごく良かった｡
ぼくのかんがえたさいきょうのプログラム言語へのモチベーションも高まってしまった〜〜研究やってる場合じゃねえ!!&lt;/p&gt;</description>
        <pubDate>Sun, 30 Jun 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/06/30/ScalaMatsuri2019%E3%81%84%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%9F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/06/30/ScalaMatsuri2019%E3%81%84%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%9F.html</guid>
        
        <category>Scala</category>
        
        <category>雑感</category>
        
        
      </item>
    
      <item>
        <title>技術書典6に合同誌を出した; effect system勉強会をやった</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
なんか最近時間なくないですか? モンスターをハントしてる場合ではないんですが…｡&lt;/p&gt;&lt;h1 id=&quot;%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B86&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B86&quot;&gt;技術書典6&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;4月の話なんですが5月にやっていいですか｡やります｡
典5に続いてDragon Universityやっていきました｡&lt;/p&gt;&lt;p&gt;首謀者の&lt;a href=&quot;https://twitter.com/rizaudo&quot;&gt;@rizaudo &lt;/a&gt;､&lt;a href=&quot;https://twitter.com/ntsc_j&quot;&gt;@ntsc_j &lt;/a&gt;や&lt;a href=&quot;https://twitter.com/xrekkusu&quot;&gt;@xrekkusu &lt;/a&gt;とだいたい似た面子で行った｡
前回同様ぼちぼち売れたので打ち上げで無事生肉を焼く儀式を開くことができました｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Dragon Universityの売上を可視化してる様子を撮りました。 &lt;a href=&quot;https://t.co/YX1pLUet9n&quot;&gt;pic.twitter.com/YX1pLUet9n&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1119188965997678592?ref_src=twsrc%5Etfw&quot;&gt;April 19, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;しかし前回と比べて売上はやや落ち込みました｡
貴重なAI人材(AI人材ではない)rizaudo氏が今回はネットワークシミュレータの記事で挑んだためではないかと推察されます｡&lt;/p&gt;&lt;p&gt;『Let’s go Algebraic Effects and Handlers: from an introduction to advanced topics』というタイトルで書きましたが､3月はPPLに行ったり九州旅行に行ったりして気づけばギリギリになってしまいadvanced topicsに関してはちょっと物足りなくなってます｡
他3記事も面白いのでそれで目をつぶってください｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1317197&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://booth.pximg.net/c/620x620/a00fe615-aca9-4ac2-9e73-c117987944f4/i/1317197/bd45f811-5cda-44ff-addf-b6306223184d_base_resized.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1317197&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dragon University 2019.4(技術書典6) - Dragon University - BOOTH&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Dragon Universityも今回で4回目、今回は人気のAlgebraic Effectsやスマートコントラクト・SGXに加えCORE(本当に人気か？)の各種解説記事が揃ってます！ 「Let’s go Algebraic Effects and Handlers: from an introduction to advanced topics」 「スマートコントラクトCTF入門」 「SGX-ROP 不完全解説」 「CORE で作るテストベッド」&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h1 id=&quot;effect+system%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E3%82%84%E3%81%A3%E3%81%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#effect+system%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E3%82%84%E3%81%A3%E3%81%9F&quot;&gt;effect system勉強会をやった&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://nymphium.github.io/2019/03/28/%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E9%96%8B%E5%82%AC%E3%81%97%E3%81%9F%E3%82%89big-name%E3%82%92%E5%8F%AC%E5%96%9A%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F.html&quot;&gt;前回&lt;/a&gt;触れたとおり､来る5月26日に日本全国のeffect system researcherやuserが集うかもしれないeffect system勉強会がありました｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://connpass.com/event/124786/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://connpass.com/static/img/468_468.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://connpass.com/event/124786/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;effect system勉強会 (2019/05/26 13:00〜)&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;## 会場の入館について  入館方法についてはこちらをご確認ください｡ 入館IDについてはメッセージを送ってあるのでそちっらをご確認ください｡  ## タイムテーブル  時間 | 発表者 | タイトル   —|—|—   12:45~ | - | 開場   13:00~13:10 | びしょ〜じょ | 諸注意など   13:10~13:40 | halcat0x15a | Extensible Eff Applicative   13:40~13:50 | fumieval | (LT) 名前付きeffects   13:50~14:00 | - | 休憩 (10分)   1…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;“日本全国のeffect system researcherやuserが集うかもしれない” なんて適当言いましたが､予想を上回る数の参加者に驚きました｡
最初はマイナージャンルだし集まるのは高々20人くらいだろうと思ってたんですがなんかめちゃくちゃ人きた……｡&lt;/p&gt;&lt;p&gt;ボクが適当人間であることを知ってるので会場を積極的に用意してくれた &lt;a href=&quot;https://twitter.com/linerlock&quot;&gt;@linerlock &lt;/a&gt;センパイおよびサイボウズ株式会社様ありがとうございました｡
カンファレンスルームは最大200人収容できるそうです｡あとパークがある｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ピザを待っています &lt;a href=&quot;https://t.co/xcgMOjyPPk&quot;&gt;pic.twitter.com/xcgMOjyPPk&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1132562844807884800?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;また､主催として同行していただいていろいろやっていただいた&lt;a href=&quot;https://twitter.com/ryotakameoka&quot;&gt;@ryotakameoka &lt;/a&gt;さん&lt;a href=&quot;https://twitter.com/hiroqn&quot;&gt;@hiroqn &lt;/a&gt;さんありがとうございました｡
そして発表者の皆さんと参加者の皆さんも勉強会を盛り上げて頂いて大変ありがとうございました｡&lt;/p&gt;&lt;p&gt;発表は20分枠が私含め5人+10分枠が3人と､8人も集まりました｡effect systemというジャンルで8人集まるのはすごいと思いました｡&lt;/p&gt;&lt;p&gt;それでは発表を軽く見直してみましょう｡&lt;/p&gt;&lt;h2 id=&quot;Extensible+Eff+Applicative&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Extensible+Eff+Applicative&quot;&gt;Extensible Eff Applicative&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/halcat0x15a&quot;&gt;@halcat0x15a &lt;/a&gt;さんによる発表でした｡資料は&lt;a href=&quot;https://www.slideshare.net/SanshiroYoshida/extensible-eff-applicative&quot;&gt;こちら&lt;/a&gt;｡&lt;/p&gt;&lt;p&gt;Free ApplicativeをOpen UnionでEffのように複数の文脈をいちどきに扱えるように拡張するという内容でした｡
皆さんへの課題として､簡潔なハンドラの定義と､データ構造をどうするかというものが与えられました｡&lt;/p&gt;&lt;p&gt;HaskellをモリモリやってないんでApplicativeにできてMonadにできないことがあるのは知らなかったデス｡
モチベーションがわかりやすくて課題とそれに対する複数の解法とそれらの利点欠点がまとまっており非常にわかりやすかったです｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;そもそもApplicativeのトランスフォーマー（？）を考えたことがなかったな。 &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 吉村 優 / YOSHIMURA Yuu (@_yyu_) &lt;a href=&quot;https://twitter.com/_yyu_/status/1132501011866607618?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Monadだと後ろの計算は前の計算に依存してしまうので個別に実行できないけど、Applicativeだと依存関係がないので大丈夫なのか &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— でこれき (@dico_leque) &lt;a href=&quot;https://twitter.com/dico_leque/status/1132500764197236736?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; ありそうでなかなかなかったFree applicativeの紹介と、そのextensible化。途中の計算結果に依存しないという性質を利用してRPCなどの記述に使えそう&lt;/p&gt;— 𓅵ふみ (@fumieval) &lt;a href=&quot;https://twitter.com/fumieval/status/1132501183875100672?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Free ApplicativeとFree Monadのliftを共通化するのは面白そうだ &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 𓅵ふみ (@fumieval) &lt;a href=&quot;https://twitter.com/fumieval/status/1132502512680833024?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;CiteSeerX — Algebraic Effects and Effect Handlers for Idioms and Arrows&lt;a href=&quot;https://t.co/jQp8jkVQid&quot;&gt;https://t.co/jQp8jkVQid&lt;/a&gt; みたいな話が来るかと思ったけどちがった（未読 &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— でこれき (@dico_leque) &lt;a href=&quot;https://twitter.com/dico_leque/status/1132503577019133953?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;h2 id=&quot;%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8Dextenslble+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8Dextenslble+effects&quot;&gt;名前付きextenslble effects&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;次は&lt;a href=&quot;https://twitter.com/fumieval&quot;&gt;@fumieval &lt;/a&gt;さんの発表でした｡資料は&lt;a href=&quot;https://shared-assets.adobe.com/link/a5ae0acd-4d78-4774-6590-2b6b79b5dcc1&quot;&gt;こちら&lt;/a&gt;｡
イラレでスライド作っとる!!? すごい……｡&lt;/p&gt;&lt;p&gt;内容は､extensible effectsに名前をつけることで種々の問題を解決するというものでした｡
モナトラの問題点とextensible effectsによる解決と､extensible effectsに残った問題点と名前付きextensible effectsによる解決と､うまく要点のまとまった発表でした｡&lt;/p&gt;&lt;p&gt;open unionをdictionaryにするのはなかなかおもしろいですね｡&lt;/p&gt;&lt;div style=&quot;font-size: 34pt;&quot;&gt;
&lt;p&gt;今すぐダウンロー&lt;/p&gt;

&lt;center&gt;
  &lt;a href=&quot;http://hackage.haskell.org/package/extensible&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://hackage.haskell.org/package/extensible&lt;/a&gt;
&lt;/center&gt;


&lt;p&gt;ド&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://github.com/fumieval/extensible&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://repository-images.githubusercontent.com/28671219/0ce84a80-cb6b-11e9-8882-b3e82c2f327d&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://github.com/fumieval/extensible&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fumieval/extensible&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Extensible records, variants, structs, effects, tangles - fumieval/extensible&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;毎回思うけどイラレで発表資料作るの気合入っててすごい &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— Ryota Kameoka 𓆉 @ HERP, Inc. (@ryotakameoka) &lt;a href=&quot;https://twitter.com/ryotakameoka/status/1132504296530989056?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;extensible effectsの問題点: &lt;br&gt;* 型が推論されない&lt;br&gt;* 対応できない&lt;br&gt;* 再利用できない&lt;br&gt;&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— κeen (@blackenedgold) &lt;a href=&quot;https://twitter.com/blackenedgold/status/1132504993011912704?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;型レベルリストを型レベルマップに変えるのか &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— でこれき (@dico_leque) &lt;a href=&quot;https://twitter.com/dico_leque/status/1132505654705283072?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;エフェクトをキーで指定できるの、本当に便利そう &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— ryna (@ryna4c2e) &lt;a href=&quot;https://twitter.com/ryna4c2e/status/1132505916241108992?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;DataKind &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— ryna (@ryna4c2e) &lt;a href=&quot;https://twitter.com/ryna4c2e/status/1132506703084212224?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;名前は型レベル(DataKindsを使用)なのでstaticに作られる &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1132507189275348993?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;h2 id=&quot;Effect%7Bive%2Cful%7D+Cycle.js&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Effect%7Bive%2Cful%7D+Cycle.js&quot;&gt;Effect{ive,ful} Cycle.js&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;3番手は&lt;a href=&quot;https://twitter.com/ryotakameoka&quot;&gt;@ryotakameoka &lt;/a&gt;さんの発表でした｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://qiita.com/ryota-ka/items/b46f43dc18a9229feb03&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Fogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&amp;amp;w=1200&amp;amp;mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DEffect%257Bive%252Cful%257D%2520Cycle.js%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D8594d81f0fd54a49f769e0d846079a30&amp;amp;mark-align=center%2Cmiddle&amp;amp;blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540ryota-ka%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3D693198cfce1c2b85edaa1d62c002b284&amp;amp;blend-align=center%2Cmiddle&amp;amp;blend-mode=normal&amp;amp;s=26de0597a86ee2e94c281231e2b924ab&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://qiita.com/ryota-ka/items/b46f43dc18a9229feb03&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Effect{ive,ful} Cycle.js - Qiita&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;# おことわり- この発表はかなり&amp;lt;b&amp;gt;お気持ち&amp;lt;/b&amp;gt;です- 他の発表とは異なり(？)なんら学術的裏付けがあるものではありません- なんと(？)まったく数式が出てきません— # 自己紹介…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;内容は､Webフロントエンドにおける様々な副作用をCycle.jsでうまくやっていくというものでした｡&lt;/p&gt;&lt;p&gt;副作用を分離して処理したい､まさにalgebraic effectsがやろうとしてることですね｡
実際にHERP社さんですか?でもプロダクトですでに活用しているとのことです｡
HERP社さん面白いですね｡
product-capableなCycle.jsの実装を見ていくと面白いものが見られるかも｡&lt;/p&gt;&lt;p&gt;ryotakaさんがトゥギャ(?)ってたのを引用します｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://twitter.com/i/moments/1132869165562310656&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://pbs.twimg.com/media/D7jE_-uU0AAilKd.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://twitter.com/i/moments/1132869165562310656&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Effect{ive,ful} Cycle.js&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;2019年5月26日に行われた effect system 勉強会での “Effect{ive,ful} Cycle.js” の様子です．&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h2 id=&quot;Effective+Rust&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Effective+Rust&quot;&gt;Effective Rust&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;続いて&lt;a href=&quot;https://twitter.com/__pandaman64__&quot;&gt;@__pandaman64__ &lt;/a&gt;さんの発表でした｡資料は&lt;a href=&quot;https://docs.google.com/presentation/d/1RYu-XDa0GWGGxAcOq2LzYEjJLbQYcWM-DJcN2hN9g2I&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Rustのcoroutinesを使ってalgebraic effectsを実装したぜ､という内容でした｡
なんと&lt;a href=&quot;https://nymphium.github.io/2018/12/09/asymmetric-coroutines%E3%81%AB%E3%82%88%E3%82%8Boneshot-algebraic-effects%E3%81%AE%E5%AE%9F%E8%A3%85.html&quot;&gt;ボクの記事&lt;/a&gt;を読んでインスピレーションを受けたそうです｡
書いた甲斐がありました｡&lt;/p&gt;&lt;p&gt;Rustだと所有権が絡んできて大変な場面があり､Frankを参考にするとうまくいったという面白い噛み合わせの話が聞けました｡
また序盤のいらすとやによる所有権の話がわかりやすくて面白かった｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;所有権でoneshotnessを保証するの良いですよね〜良い &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1132520285477847040?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;コルーチンがあればAlgebraic Effectが実装できる記事→Rustにコルーチンが入るよー → Rustで実装できるのでは&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— κeen (@blackenedgold) &lt;a href=&quot;https://twitter.com/blackenedgold/status/1132520179206725634?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Rustは副作用使い放題の素晴らしい言語 &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— だめぽラボ@技術書典7 し03D (@mod_poppo) &lt;a href=&quot;https://twitter.com/mod_poppo/status/1132520819630804992?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;可変な変数でStateを実装しようとすると型チェックで弾かれる。RefCellではつらい &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— だめぽラボ@技術書典7 し03D (@mod_poppo) &lt;a href=&quot;https://twitter.com/mod_poppo/status/1132521274125590528?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Frank 言語これ？ &lt;a href=&quot;https://t.co/277z76pxLr&quot;&gt;https://t.co/277z76pxLr&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— かずき – 技術書典 8 1日目 お35 (@kakkun61) &lt;a href=&quot;https://twitter.com/kakkun61/status/1132522163989204992?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Rustのジェネレータはpollingモデルっていうのが伝わらないとFrankスタイルの方が速いってのが伝わらなそう。あとクロージャはできる限り作らない方がいいとか。&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— κeen (@blackenedgold) &lt;a href=&quot;https://twitter.com/blackenedgold/status/1132523401271074816?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Effective Rustでも非同期実行を扱えるようにしたくて，となるとFutureは良くできてるのでわざと真似て設計してます．しかもFutureへの変換が簡単にできるのでFutureランタイム(tokio, runtime)を流用できるのもうれしい！&lt;a href=&quot;https://t.co/hZPw3Ie6Tj&quot;&gt;https://t.co/hZPw3Ie6Tj&lt;/a&gt;&lt;br&gt;この記事は関係を詳しく書いてます &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; &lt;a href=&quot;https://t.co/nODGlQrAUG&quot;&gt;https://t.co/nODGlQrAUG&lt;/a&gt;&lt;/p&gt;— 井山梃子歴史館 (@__pandaman64__) &lt;a href=&quot;https://twitter.com/__pandaman64__/status/1132590740159131649?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;買わせてもらいました！ / Rustジェネレータ徹底解説 | 井山梃子歴史館 &lt;a href=&quot;https://t.co/KvD7oQ8BN4&quot;&gt;https://t.co/KvD7oQ8BN4&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/booth_pm?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#booth_pm&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 画力・博士号・油田 (@bd_gfngfn) &lt;a href=&quot;https://twitter.com/bd_gfngfn/status/1132524127556739072?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;書典6で販売したRustのジェネレータの解説本をBOOTHでも販売中とのこと｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://booth.pm/ja/items/1318774&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://booth.pximg.net/c/620x620/b3df3e2a-38d7-4eda-8df5-f70aa806cdfa/i/1318774/6f724242-516e-425b-a2bc-5fdc97f23bab_base_resized.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://booth.pm/ja/items/1318774&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Rustジェネレータ徹底解説 - 井山梃子歴史館 - BOOTH&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;技術書典6で頒布した『Rustジェネレータ徹底解説』です． ジェネレータとは，RustでもPythonやJavaSciprtのyield式を使うために実装された言語機能であり，Rustにおける非同期プログラミングを裏から支えています． 『Rustジェネレータ徹底解説』では 1. なぜFutureに基づく非同期プログラミングがジェネレータの発明に繋がったのか 2. ジェネレータはコンパイラ内部でどのように扱われるのか などコンパイラのソースコードも見ながら紹介します&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h2 id=&quot;Monads+and+Effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Monads+and+Effects&quot;&gt;Monads and Effects&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;5番目は&lt;a href=&quot;https://twitter.com/myuon_myon&quot;&gt;@myuon_myon &lt;/a&gt;さんの発表でした｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/myuon/monads-and-effects&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://speakerd.s3.amazonaws.com/presentations/32863616b9924a559e5f0c307d38e788/slide_0.jpg?518860&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/myuon/monads-and-effects&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Monads and Effects&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;effect systemとはなにかから､Kokaを題材にあげ､最終的にmonadsとの関係について述べるという内容でした｡&lt;/p&gt;&lt;p&gt;Kokaの処理系の&lt;a href=&quot;https://github.com/koka-lang/koka/pull/74&quot;&gt;ビルドシステム周りで少しだけcontributionした&lt;/a&gt;ので勝手に親近感を持ってる言語です｡
あとshift0/reset0は書けるけどshift/resetは型で弾かれた経験があるので､もう少し頑張ってトライしてみたいです｡
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://gist.github.com/Nymphium/3cb574cb511a179a30390599e6e51669&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://github.githubassets.com/images/modules/gists/gist-og-image.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://gist.github.com/Nymphium/3cb574cb511a179a30390599e6e51669&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;typed prompt-less shift/reset in Koka language&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;typed prompt-less shift/reset in Koka language. GitHub Gist: instantly share code, notes, and snippets.&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;圏論におけるMonadわからんマンなのでがんばっていかんとな……&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Effect System: Γ├ M : A ! e &lt;br&gt;(Type system estimates the effect of computation M to be at most e) &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— Yasuhiro Inami (@inamiy) &lt;a href=&quot;https://twitter.com/inamiy/status/1132527229370478594?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Effects can be stacked&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— ゆーちき (@yuchiki1000yen) &lt;a href=&quot;https://twitter.com/yuchiki1000yen/status/1132527206490447873?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/jtyN9nZOrk&quot;&gt;https://t.co/jtyN9nZOrk&lt;/a&gt;&lt;br&gt;&amp;gt;Koka is a function-oriented programming language that seperates pure values from side-effecting computations, where the effect of every function is automatically inferred.&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— ゆーちき (@yuchiki1000yen) &lt;a href=&quot;https://twitter.com/yuchiki1000yen/status/1132528208065073152?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; Kokaにdivergenceというeffectがある！（もちろん、100%の精度は期待できない）&lt;/p&gt;— non-garbage, collected ᴋᴏɴ (@GolDDranks) &lt;a href=&quot;https://twitter.com/GolDDranks/status/1132528469156302849?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;kokaの語源は効果(effect)であってほしい &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— iintyo (@e_ntyo) &lt;a href=&quot;https://twitter.com/e_ntyo/status/1132528132940951553?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;“The word ‘koka’ (or 効果) means “effect” or “effective” in Japanese” &lt;a href=&quot;https://t.co/VW4SslMsnI&quot;&gt;https://t.co/VW4SslMsnI&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— zakuro (@zakurozakuro) &lt;a href=&quot;https://twitter.com/zakurozakuro/status/1132528733217148928?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; KokaはEffectをより細かく分類して制御できるようになっている。printとerrorの副作用は分類されて別物として扱われている。おお！&lt;/p&gt;— よんた (@keita44_f4) &lt;a href=&quot;https://twitter.com/keita44_f4/status/1132529327411613699?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; λ抽象と関数適用のeffectの答え合わせ。なるほど、λ抽象自体はeffectが推論されないけど、λ抽象のbody内に適用時に起こるeffectが内包されているのか。&lt;/p&gt;— よんた (@keita44_f4) &lt;a href=&quot;https://twitter.com/keita44_f4/status/1132530399161139200?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;関数適用は､例えばEffとかだと `v v` の形でしか適用を許さないようにしてたりして､この辺は言語の違いに味が出る &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1132530719325020160?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;EffectはMonadにparameterを付けたようなもの&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— κeen (@blackenedgold) &lt;a href=&quot;https://twitter.com/blackenedgold/status/1132530858819088384?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;このあたりを読むとわかりやすい話ですね： &lt;br&gt;The marriage of effects and monads [Wadler 1998]&lt;a href=&quot;https://t.co/mzP4NT5hMH&quot;&gt;https://t.co/mzP4NT5hMH&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 画力・博士号・油田 (@bd_gfngfn) &lt;a href=&quot;https://twitter.com/bd_gfngfn/status/1132531060141506561?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Do be do be do [Lindley, McBride &amp;amp; McLaughlin 2016] &lt;a href=&quot;https://t.co/Xum448lhRL&quot;&gt;https://t.co/Xum448lhRL&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 画力・博士号・油田 (@bd_gfngfn) &lt;a href=&quot;https://twitter.com/bd_gfngfn/status/1132533468221493248?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;↑Frankの論文のタイトルが『Do be do be do』なのってFrank Sinatraの捩りか&lt;/p&gt;&lt;h2 id=&quot;How+do+you+implement+Algebraic+Effects%3F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#How+do+you+implement+Algebraic+Effects%3F&quot;&gt;How do you implement Algebraic Effects?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;6番目はボクが発表しました｡資料は&lt;a href=&quot;https://nymphium.github.io/pdf/effect_study.html&quot;&gt;こちら&lt;/a&gt;｡&lt;/p&gt;&lt;p&gt;内容は､Algebraic Effects and Handlersのさまざまなインプリ方法について考える｡というものでした｡&lt;/p&gt;&lt;p&gt;libhandler, eff.lua, Multicore OCaml, Effekt, Effの内部の実装方針について軽くまとめてみました｡
いかがでしたか?
ライブラリとしてのalgebraic effectsの利点というのは､まさにボクの研究のモチベーションとして強く主張すべき部分なので言いたかったです｡
適切な場所がなかったのでconclusionの1枚手前という微妙な位置になってしまったのはかなり反省です｡
というわけでみなさんやっていきましょう｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Algebraic Effectの実装、libhandlerの場合：longjmp, stack frame+ip &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— だめぽラボ@技術書典7 し03D (@mod_poppo) &lt;a href=&quot;https://twitter.com/mod_poppo/status/1132534088089292800?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「Java で&quot;すら&quot;コルーチンを持っている」 &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— Ryota Kameoka 𓆉 @ HERP, Inc. (@ryotakameoka) &lt;a href=&quot;https://twitter.com/ryotakameoka/status/1132534848910872577?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Coroutine: Multicore OCaml, eff.lua&lt;br&gt;effect invocation → yield&lt;br&gt;effect handler → create &amp;amp; resume&lt;br&gt;continuation → coroutine (one-shot)&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— Yasuhiro Inami (@inamiy) &lt;a href=&quot;https://twitter.com/inamiy/status/1132535016355901440?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Obj.clone_continuationの実装:&lt;br&gt; ocaml-multicore/fiber.c at 75362d1f2cae362e45c67aa4e32b641a5485f845 · ocaml-multicore/ocaml-multicore&lt;a href=&quot;https://t.co/TSX35MJhId&quot;&gt;https://t.co/TSX35MJhId&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— でこれき (@dico_leque) &lt;a href=&quot;https://twitter.com/dico_leque/status/1132535471500718085?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; 「Multiprompt shift/resetの説明をします」 &lt;br&gt;こ、これは！！名古屋の &lt;a href=&quot;https://twitter.com/hashtag/k_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#k_study&lt;/a&gt; でやったやつだ！！&lt;/p&gt;— よんた (@keita44_f4) &lt;a href=&quot;https://twitter.com/keita44_f4/status/1132535385085448193?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;A Monadic Framework for Delimited Continuations - Microsoft Research&lt;a href=&quot;https://t.co/3rTfvWx39S&quot;&gt;https://t.co/3rTfvWx39S&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— でこれき (@dico_leque) &lt;a href=&quot;https://twitter.com/dico_leque/status/1132536355332825089?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;コントロール的何かを全部Algebraic Effectsに落とせると思うとすごいすっきりするな 良いモチベーションだ &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— みょん (@myuon_myon) &lt;a href=&quot;https://twitter.com/myuon_myon/status/1132538503844073473?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;FSCD 2017で継続のない計算体系への変換が議論されてる&lt;br&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— κeen (@blackenedgold) &lt;a href=&quot;https://twitter.com/blackenedgold/status/1132538873425174528?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;手前味噌で持ってきたN-Barreled CPSですが､質問で耳寄り情報をいただきましたが､すでにAlgebraic EffectsをCPS変換する研究はあるそうです(当然)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
  &lt;a href=&quot;https://bentnib.org/handlers-cps.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Continuation Passing Style for Effect Handlers&lt;/a&gt;
&lt;/center&gt;&lt;p&gt;あと&lt;a href=&quot;https://twitter.com/__pandaman64__&quot;&gt;@__pandaman64__ &lt;/a&gt;さんが宣伝してたんでボクもしようと思ってそのまま忘れてたんで宣伝します｡
なんかいろいろまとめたやつです｡
大事なことなので2回&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1317197&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://booth.pximg.net/c/620x620/a00fe615-aca9-4ac2-9e73-c117987944f4/i/1317197/bd45f811-5cda-44ff-addf-b6306223184d_base_resized.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1317197&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dragon University 2019.4(技術書典6) - Dragon University - BOOTH&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Dragon Universityも今回で4回目、今回は人気のAlgebraic Effectsやスマートコントラクト・SGXに加えCORE(本当に人気か？)の各種解説記事が揃ってます！ 「Let’s go Algebraic Effects and Handlers: from an introduction to advanced topics」 「スマートコントラクトCTF入門」 「SGX-ROP 不完全解説」 「CORE で作るテストベッド」&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;h2 id=&quot;Effective+Idris%3A+Effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Effective+Idris%3A+Effects&quot;&gt;Effective Idris: Effects&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;次は&lt;a href=&quot;https://twitter.com/blackenedgold&quot;&gt;@blackenedgold &lt;/a&gt;さんの発表でした｡ 資料は&lt;a href=&quot;https://keens.github.io/slide/effective_idris__effects/&quot;&gt;こちら&lt;/a&gt;｡&lt;/p&gt;&lt;p&gt;Effを参考にしたIdrisのAlgebraic Effectsライブラリの話でした｡
Idrisに詳しくないんで “型がfirst-class” というところでspace catになってしまいました｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「Idrisって言語知らないですかね？依存型のあるHaskellです」 &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— Yuki Ishikawa (@rider_yi) &lt;a href=&quot;https://twitter.com/rider_yi/status/1132545126603952128?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;– Idris Effect&lt;br&gt;Effect : Type&lt;br&gt;Effect = (x : Type) -&amp;gt; Type -&amp;gt; (x -&amp;gt; Type) -&amp;gt; Type&lt;br&gt;&lt;br&gt;data EFFECT : Type where &lt;br&gt;    MkEff : Type -&amp;gt; Effect -&amp;gt; EFFECT&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— Yasuhiro Inami (@inamiy) &lt;a href=&quot;https://twitter.com/inamiy/status/1132545844941533184?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;インターフェースはHaskellのeffect-monad library的な何かなのだろうか？(よく知らずに言ってる)&lt;a href=&quot;https://t.co/F0x1Q9roFj&quot;&gt;https://t.co/F0x1Q9roFj&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— みょん (@myuon_myon) &lt;a href=&quot;https://twitter.com/myuon_myon/status/1132546912035278849?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Effの作り方がバリバリ依存型ですごい さすがIdris &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— みょん (@myuon_myon) &lt;a href=&quot;https://twitter.com/myuon_myon/status/1132547550618120192?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Type -&amp;gt; Typeすき &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 井山梃子歴史館 (@__pandaman64__) &lt;a href=&quot;https://twitter.com/__pandaman64__/status/1132547897025687553?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;h2 id=&quot;Row-based+type+systems+for+algebraic+effect+handlers&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Row-based+type+systems+for+algebraic+effect+handlers&quot;&gt;Row-based type systems for algebraic effect handlers&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最後は&lt;a href=&quot;https://twitter.com/skymountain_&quot;&gt;@skymountain_ &lt;/a&gt;さんによる発表でした｡資料は&lt;a href=&quot;https://www.slideshare.net/TaroSekiyama/rowbased-effect-systems-for-algebraic-effect-handlers&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;&lt;p&gt;内容は､parameterized effectsを持つrow-based type systemsにおけるeffect handlerの話でした｡&lt;/p&gt;&lt;p&gt;序盤ではAlgebraic Effectsについて簡単な例から初めて丁寧な説明があり､effect systemを知らない方にも優しいintroductionでした｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;最初に聞きたい感じの発表だった &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— かずき – 技術書典 8 1日目 お35 (@kakkun61) &lt;a href=&quot;https://twitter.com/kakkun61/status/1132554009481322497?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;これは私がミスったわね｡&lt;/p&gt;&lt;p&gt;parameterized effectsの導入から､row-based effect systemとその特徴について述べ､他のset-based onesとの比較など大変わかり易く面白い内容でした｡&lt;/p&gt;&lt;p&gt;Kokaの論文を中途半端に読んでたのでtype systemの部分をちゃんと読み直そうと思います｡
fumievalさんの名前付きextensible effectsとrow-based effect systemはなにか近そうな感じがするので､深堀りしてみると面白い発見があるかもしれない｡&lt;/p&gt;&lt;p&gt;call for collaborationも出していらっしゃったので興味のある方はぜひ｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;operationに型をつけて型ごとにhandlerを与えられるの面白いな &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— みょん (@myuon_myon) &lt;a href=&quot;https://twitter.com/myuon_myon/status/1132550779267477506?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;setじゃないので複数の同じeffectが起こるかもしれない状況を表現できる&lt;br&gt;(row polymorphism)&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— ゆーちき (@yuchiki1000yen) &lt;a href=&quot;https://twitter.com/yuchiki1000yen/status/1132552819586658304?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;row-polymorphismだとsubtypingが簡単になる､なるほど &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1132553055377866753?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;rowの順序はhandlingに対応する &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1132553610686951424?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;“Row Polymorphism Isn’t Subtyping” 関係の質問かな？ &lt;a href=&quot;https://t.co/bb2HDXSAFD&quot;&gt;https://t.co/bb2HDXSAFD&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— ねっけつ (@nekketsuuu) &lt;a href=&quot;https://twitter.com/nekketsuuu/status/1132554452349595649?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「名前が違えは順序が入れ替えられるが名前が同じだと順序が意味をなす」はlabel-selective lambda calculusと似てる気がします &lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt;&lt;/p&gt;— 画力・博士号・油田 (@bd_gfngfn) &lt;a href=&quot;https://twitter.com/bd_gfngfn/status/1132555193713741824?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;h2 id=&quot;%E3%81%93%E3%82%93%E3%81%97%E3%82%93%E3%81%8B%E3%81%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%93%E3%82%93%E3%81%97%E3%82%93%E3%81%8B%E3%81%84&quot;&gt;こんしんかい&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;(めっちゃ腹減ってたししこたま酒を飲んだんで写真などは)ないです&lt;/p&gt;&lt;p&gt;25人くらい参加してくださいました｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;開催しといてなんですがどうなるかと思ってました､が､参加者5､60人くらい+発表者8人と大きな会で無事発表もつつがなく終わって本当に良かったです｡&lt;/p&gt;&lt;h1 id=&quot;%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BB%96&quot;&gt;他&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ん?&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/effect_study?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#effect_study&lt;/a&gt; 宣伝させてください。再来週6/6(木)・7(金)のIPSJ-PRO@名古屋はエフェクト計算の講演2件を初日に予定しています。 &lt;a href=&quot;https://t.co/oReOjrwzyi&quot;&gt;https://t.co/oReOjrwzyi&lt;/a&gt;&lt;/p&gt;— Keigo Imai (@keigoi) &lt;a href=&quot;https://twitter.com/keigoi/status/1132522206502633472?ref_src=twsrc%5Etfw&quot;&gt;May 26, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;(うち一人ですが資料づくり終わって)ないです…&lt;/p&gt;</description>
        <pubDate>Tue, 28 May 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/05/28/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B86%E3%81%AB%E5%90%88%E5%90%8C%E8%AA%8C%E3%82%92%E5%87%BA%E3%81%97%E3%81%9F;-effect-system%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E3%82%84%E3%81%A3%E3%81%9F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/05/28/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B86%E3%81%AB%E5%90%88%E5%90%8C%E8%AA%8C%E3%82%92%E5%87%BA%E3%81%97%E3%81%9F;-effect-system%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E3%82%84%E3%81%A3%E3%81%9F.html</guid>
        
        <category>技術書典</category>
        
        <category>effect system</category>
        
        <category>勉強会</category>
        
        <category>Algebraic Effects</category>
        
        
      </item>
    
      <item>
        <title>勉強会を開催したらbig nameを召喚してしまった</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
ところで諸君!! こんな勉強会を開催する予定です｡
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://connpass.com/event/124786/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://connpass.com/static/img/468_468.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://connpass.com/event/124786/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;effect system勉強会 (2019/05/26 13:00〜)&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;## 会場の入館について  入館方法についてはこちらをご確認ください｡ 入館IDについてはメッセージを送ってあるのでそちっらをご確認ください｡  ## タイムテーブル  時間 | 発表者 | タイトル   —|—|—   12:45~ | - | 開場   13:00~13:10 | びしょ〜じょ | 諸注意など   13:10~13:40 | halcat0x15a | Extensible Eff Applicative   13:40~13:50 | fumieval | (LT) 名前付きeffects   13:50~14:00 | - | 休憩 (10分)   1…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;おかげさまで一般枠はいっぱいですが､発表､LT枠が余ってますので発表していただける方お待ちしております｡&lt;/p&gt;&lt;p&gt;さて､今湘南でalgebraic effectsに関するなんやかがおこなわれているわけですが､
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;http://shonan.nii.ac.jp/shonan/blog/2018/05/07/no-146-programming-and-reasoning-with-algebraic-effects-and-effect-handlers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://shonan.nii.ac.jp/_libs/images/common/ogp.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;http://shonan.nii.ac.jp/shonan/blog/2018/05/07/no-146-programming-and-reasoning-with-algebraic-effects-and-effect-handlers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;No.146 Programming and Reasoning with Algebraic Effects and Effect Handlers | SeminarsNII Shonan Meeting&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;NII Shonan Meeting is a series of informatics seminars managed by NII, aiming to promote informatics research by providing premier venue in order for the leading scientists, young researchers, and practitioners to exchange, discuss and explore their research findings and cutting-edge topics.&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;Organizersの一人のOleg Kiselyovさんが上記の勉強会を発見して私ほか数名に連絡をくださいました｡
曰く､湘南ミーティングの後にもGordon Plotkin先生がしばらく日本にいらっしゃるので講演をしていただける可能性がある､とのことでした｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
え?!
&lt;/center&gt;&lt;p&gt;Gordon Plotkin先生､なんか知ってる名前ですね…｡
algebraic effectsの最初の論文&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; title=&quot;Plotkin, Gordon, and John Power. “Algebraic operations and generic effects.” Applied categorical structures 11.1 (2003): 69-94. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;
とかハンドラを付けた論文とか&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; title=&quot;Plotkin, Gordon, and Matija Pretnar. “Handlers of algebraic effects.” European Symposium on Programming. Springer, Berlin, Heidelberg, 2009. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;
のfirst authorですね…｡
というか他にもいろいろやってるcomputer scienceでブイブイいわせてる大先生じゃないですか…｡&lt;/p&gt;&lt;p&gt;なんだか大変なことになっちゃった…｡
メールを頂いた日は外出してたので出先であうあうしてたら､同じくメールを受け取っていた&lt;a href=&quot;https://twitter.com/blackenedgold&quot;&gt;@blackenedgold &lt;/a&gt;さんが調整してくださって良い感じの勉強会が開催されることになりました｡
(上と下のconnpassのリンクは別物なので注意)&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://connpass.com/event/125885/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://connpass.com/static/img/468_468.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://connpass.com/event/125885/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gordon Plotkin先生に学ぶAlgebraic Effect (2019/03/30 14:00〜)&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Algebraic Effectの提唱者であるGordon Plotkinさんが来日されており、Oleg Kiselyovさんの案内の下、講演をいただく機会が得られました。 少し急ではありますがPlotkin先生、Oleg先生を囲みAlgebraic Effectについて学びましょう。 また勉強会の後にPlotkin先生とともに食事に向かう予定です。熱い議論を交わしましょう。  時間 | 内容   —|—   13:30-14:00 | 開場   14:00-15:30 | Gordon Plotkinさん講演   15:30-15:40 | 休憩   15:40-16:40 |…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;今日が3月28でこの会合が3月30日なんでだいぶ急ですが貴重な機会なので是非ご参加ください｡
また､声をかけてくださったOlegさん､connpassでイベント作成したり会場をとったりしてくださったκeenさん重ねてありがとうございます｡&lt;/p&gt;&lt;p&gt;なんだか日本でalgebraic effectsがにわかに流行りそうで良いですね｡
観測範囲が狭いだけですね､すみません､寝ます｡&lt;/p&gt;&lt;hr&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Plotkin, Gordon, and John Power. “Algebraic operations and generic effects.” Applied categorical structures 11.1 (2003): 69-94. &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Plotkin, Gordon, and Matija Pretnar. “Handlers of algebraic effects.” European Symposium on Programming. Springer, Berlin, Heidelberg, 2009. &lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 28 Mar 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/03/28/%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E9%96%8B%E5%82%AC%E3%81%97%E3%81%9F%E3%82%89big-name%E3%82%92%E5%8F%AC%E5%96%9A%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/03/28/%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%82%92%E9%96%8B%E5%82%AC%E3%81%97%E3%81%9F%E3%82%89big-name%E3%82%92%E5%8F%AC%E5%96%9A%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F.html</guid>
        
        <category>雑感</category>
        
        <category>Algebraic Effects</category>
        
        
      </item>
    
      <item>
        <title>stackfulness of coroutines</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
気づいたら1月も終わりますね｡
お前も俺も､もう終わりだ｡&lt;/p&gt;&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;研究ではコルーチンを使っている｡
ここでひとつコルーチンについてまとめておきたい｡
特にstackfulnessについての考察をこれまでおこなっていなかったため､そこに重点を置く｡
本稿では文献&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; title=&quot;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;
を参考にする｡&lt;/p&gt;&lt;h1 id=&quot;2.+%E5%AF%BE%E7%A7%B0%E6%80%A7%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E9%A1%9E&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+%E5%AF%BE%E7%A7%B0%E6%80%A7%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E9%A1%9E&quot;&gt;2. 対称性による分類&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;コルーチンとは､一時停止､再開のできるサブルーチンを指す｡
コルーチンを呼び出した呼び出し元にコントロールを戻す操作の有無により､コルーチンを対称コルーチンと&lt;em&gt;非&lt;/em&gt;対称コルーチンの2種類に分けることができる(図&lt;a href=&quot;#tbl1&quot;&gt;2.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl1&quot;&gt;&lt;/label&gt;

&lt;p&gt;表&lt;a href=&quot;#tbl1&quot;&gt;2.1&lt;/a&gt;
. コルーチンの対称性による分類
&lt;/p&gt;
&lt;/center&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;対称コルーチン&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;非対照コルーチン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;“戻る” 操作&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;ない&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;ある&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;対称コルーチンを持つプログラム言語は筆者は知らない｡
非対称コルーチンはわりとメジャーな機能で､コルーチンやFiberと言われる言語機能は概ね非対称コルーチンと思われる｡
“戻る” 操作とは､多くの非対称コルーチンを持つプログラム言語では&lt;code&gt;yield&lt;/code&gt;というキーワードや関数名として使うことができる｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;yield example&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- callerに&quot;戻る&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h1 id=&quot;3.+stackfulness%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E9%A1%9E&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+stackfulness%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E9%A1%9E&quot;&gt;3. stackfulnessによる分類&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;コールスタックをまたいで&lt;/strong&gt; yieldできるかどうかで､非対称コルーチンをさらに2つに分類できる(表&lt;a href=&quot;#tbl2&quot;&gt;3.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl2&quot;&gt;&lt;/label&gt;

&lt;p&gt;表&lt;a href=&quot;#tbl2&quot;&gt;3.1&lt;/a&gt;
. stackfulnessによる分類&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;stackful&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;stackless&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;またいでyield&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;できる&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;できない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;examples&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Luaのcoroutine, RubyのFiber&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Rustのcoroutine, JSのGenerator&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;&lt;p&gt;stackful coroutinesは単に “coroutine” ､ あるいは “fiber” と呼ばれ､
stackless coroutinesは “generator” と称される傾向にある｡&lt;/p&gt;&lt;p&gt;では､ “コールスタックをまたげる” とはどういうことか?
これはyieldがネストした関数呼出しから一気にコルーチンの呼び出し元まで戻れる､またyieldした位置にコントロールを戻せるということである｡
次の例を見てみる(プログラム&lt;a href=&quot;#lst:stackfulexample&quot;&gt;3.2&lt;/a&gt;
, プログラム&lt;a href=&quot;#lst:stacklessexample&quot;&gt;3.3&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lst:stackfulexample&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:stackfulexample&quot;&gt;3.2&lt;/a&gt;
. stackful example in Lua&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- prints 10&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- prints 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;label id=&quot;lst:stacklessexample&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lst:stacklessexample&quot;&gt;3.3&lt;/a&gt;
. stackless example in JS&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* syntax error
function send(x) {
  yield x
}
*/&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// prints 10&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;#lst:stackfulexample&quot;&gt;3.2&lt;/a&gt;
を見てみる｡
関数&lt;code&gt;send&lt;/code&gt;の中で&lt;code&gt;yield&lt;/code&gt;しているが､&lt;code&gt;send&lt;/code&gt;自体はただの関数である｡
&lt;code&gt;send&lt;/code&gt;をコルーチン&lt;code&gt;co&lt;/code&gt;の中で呼び出すと､この&lt;code&gt;yield&lt;/code&gt;で一時停止する｡
2度目の&lt;code&gt;resume&lt;/code&gt;で渡した&lt;code&gt;2&lt;/code&gt;が､&lt;code&gt;yield&lt;/code&gt;の戻り値となり､&lt;code&gt;send&lt;/code&gt;の戻り値は&lt;code&gt;2 + 3&lt;/code&gt;となる｡&lt;/p&gt;&lt;p&gt;一方&lt;a href=&quot;#lst:stacklessexample&quot;&gt;3.3&lt;/a&gt;
は､コルーチン(generator)の中でしか&lt;code&gt;yield&lt;/code&gt;できない｡
特にJSは&lt;code&gt;yield&lt;/code&gt;がキーワードとして扱われ､generatorの中でしか書けないというsyntacticな制約がある｡&lt;/p&gt;&lt;h1 id=&quot;4.+pros%2Fcons&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+pros%2Fcons&quot;&gt;4. pros/cons&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;非対称コルーチンをさらにstaclful､stacklessの2種類に分類した｡
利点と欠点をまとめてみると､次のようになる(表&lt;a href=&quot;#tbl3&quot;&gt;4.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl3&quot;&gt;&lt;/label&gt;

&lt;p&gt;表&lt;a href=&quot;#tbl3&quot;&gt;4.1&lt;/a&gt;
. 利点･欠点まとめ
&lt;/p&gt;
&lt;/center&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;stackful&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;stackless&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;利点&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;関数呼出しをまたいだyieldができ､&lt;br&gt;stacklessよりも表現力が高い&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;ステートマシンに変換でき､実装が簡潔な&lt;br&gt;だけでなく実行のパフォーマンスも良い&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;欠点&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;実装が煩雑となり､コンテキストスイッチの&lt;br&gt;オーバーヘッドがかかる&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;表現力が低い&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;stackful coroutinesの利点･欠点が､逆にstackless coroutinesの欠点･利点と､一長一短となっている｡&lt;/p&gt;&lt;h1 id=&quot;5.+%E7%A0%94%E7%A9%B6%E3%81%A8%E3%81%AE%E9%96%A2%E9%80%A3%E6%80%A7&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E7%A0%94%E7%A9%B6%E3%81%A8%E3%81%AE%E9%96%A2%E9%80%A3%E6%80%A7&quot;&gt;5. 研究との関連性&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;筆者の研究では “ネストした関数呼出しから一気に飛び出せる” というstackful coroutinesの特性を利用している｡
そのためstackless coroutinesではすぐには代替できない｡
stackful coroutines → stackless coroutinesの変換がある場合はなんとかなるかもしれないので､教えてください｡&lt;/p&gt;&lt;h1 id=&quot;6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;6. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;という話をゼミでやった｡
(研究の進捗は)ないです&lt;/p&gt;&lt;h1 id=&quot;%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BB%96&quot;&gt;他&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;なんかわかりやすいやつ&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28977302/how-do-stackless-coroutines-differ-from-stackful-coroutines&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28977302/how-do-stackless-coroutines-differ-from-stackful-coroutines&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How do stackless coroutines differ from stackful coroutines?&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Background:I’m asking this because I currently have an application with many (hundreds to thousands) of threads. Most of those threads are idle a great portion of the time, waiting on work items …&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;hr&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 27 Jan 2019 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2019/01/27/stackfulness-of-coroutines.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2019/01/27/stackfulness-of-coroutines.html</guid>
        
        <category>Coroutines</category>
        
        
      </item>
    
      <item>
        <title>Asymmetric CoroutinesによるOneshot Algebraic Effectsの実装</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これは&lt;a href=&quot;https://qiita.com/advent-calendar/2018/lang_dev&quot;&gt;言語実装Advent Calendar 2018&lt;/a&gt;の9日目の記事です｡
最初は “変数が全部箱の言語の設計と実装” と題して全部optionにくるまれてる参照とかそういう感じの何かを作ろうとしたけど多分面白くなくなって筆者の熱も醒めると思ったのでやめた｡
またそうこうしてるうちに良い感じのものが作れたので､論理的背景を整理するためにも内容を再考して今回のような内容となりました｡
ほならね早速いってみましょう｡&lt;/p&gt;&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Algebraic effects and handlers(以降 “algebraic effects” と省略)は､いわば限定継続を取れる例外である｡
try節をdelimiterとし､例外発生位置から残りの計算を限定継続として受け取り､継続をもちいて例外から復帰したり､単に継続を捨てて例外として扱うこともできる｡
最近各所で注目されており､組み込みの言語機能やライブラリとしていくつか提供されている｡
しかし､強力なコントロールオペレータとしての様々な使用が期待される一方､実装はそれほど多くないのが難点である｡&lt;/p&gt;&lt;p&gt;Asymmetric coroutinesは､コントロール抽象化機構の一つであり､ノンプリエンプティブなマルチタスクをおこなうことができる｡
Lua､Rubyなどの言語機能またはライブラリとして提供されており､様々な場面で使うことができる｡
一方コントロールオペレータとして扱うには操作が低級であり､スパゲッティコードになりがちである｡&lt;/p&gt;&lt;p&gt;本稿では､oneshot algebraic effectsからasymmetric coroutinesへの変換､つまり､asymmetric coroutinesによる､継続の使用をワンショットに制限したalgebraic effectsの実装を考える｡
これによりalgebraic effectsをよりカジュアルにあつかえるようになり､さらにasymmetric coroutinesよりも高級なコントロールの操作により､コードを簡潔に書くことが期待される｡&lt;/p&gt;&lt;p&gt;コントロールオペレータとしてのasymmetric coroutinesについて述べ､asymmetric coroutinesとoneshot algebraic effectsとの関係について述べる｡
余力があれば実際に変換を考え､変換を元にした実装を眺める｡
変換の正しさについては証明はないため､読者への課題､あるいは筆者の研究の一環とする｡&lt;/p&gt;&lt;p&gt;本稿の実装はLuaのモジュールとして公開してある｡
お手元にご用意したりして本稿をお楽しみください｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;repo&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;github-widget&quot; data-repo=&quot;Nymphium/eff.lua&quot;&gt;&lt;/div&gt;&lt;h1 id=&quot;2.+algebraic+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+algebraic+effects&quot;&gt;2. algebraic effects&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;これについては直近でそこそこ話したので､&lt;a href=&quot;/2018/08/13/algebraic_effects_tutorial.html&quot;&gt;あれ&lt;/a&gt;とか&lt;a href=&quot;/pdf/mlday2.html&quot;&gt;これ&lt;/a&gt;とか&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot;&gt;それ&lt;/a&gt;とかをご参照ください｡&lt;/p&gt;&lt;h2 id=&quot;2-1.+Core+Eff&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+Core+Eff&quot;&gt;2-1. Core Eff&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;今回は1つのハンドラでハンドルできるエフェクトは1つというCore Effという言語を考える(図&lt;a href=&quot;#ce-syn&quot;&gt;2.1&lt;/a&gt;
)｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; title=&quot;Kiselyov, Oleg, and Kc Sivaramakrishnan. “Eff directly in OCaml.(2016).” ACM SIGPLAN Workshop on ML. 2016. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;
を参考にした｡&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;ce-syn&quot;&gt;&lt;/label&gt;

\[
\begin{array}{rrl}
  x &amp;amp; \in &amp;amp; \text{\textit{Variables}}\\
  \text{\textit{eff}} &amp;amp; \in &amp;amp; \text{\textit{Effects}}\\
  v &amp;amp; ::= &amp;amp; x \mid h \mid \lambda x. e \mid \mathtt{perform}\ \text{\textit{eff}}\ v \\
  e &amp;amp; ::= &amp;amp; v \mid v\ v \mid \mathtt{let}\ x=e\ \mathtt{in}\ e\\
    &amp;amp;\mid &amp;amp; \mathtt{inst}\ \left(\right) \mid \mathtt{with}\ h\ \mathtt{handle}\ e \\
  h &amp;amp; ::= &amp;amp; \mathtt{handler}\ v\ \left(\mathtt{val}\ x \rightarrow e\right)\ \left(\left(x, k\right)\rightarrow e\right)
\end{array}

\]
図&lt;a href=&quot;#ce-syn&quot;&gt;2.1&lt;/a&gt;
. the syntax of Core Eff
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;ラムダ計算に&lt;code&gt;let&lt;/code&gt;が付いて､あとはalgebraic effects関連の項が追加されている｡
&lt;code&gt;inst ()&lt;/code&gt;でエフェクトインスタンスを生成する｡
エフェクトインスタンスは任意のエフェクト定義に対応する｡
例えば&lt;code&gt;State&lt;/code&gt;モナドっぽい&lt;code&gt;State&lt;/code&gt;エフェクトを定義するとなどきに､ハンドラと対応するエフェクトを一意に定められるという点とか各所メリットがある｡
&lt;code&gt;perform eff e&lt;/code&gt;は引数&lt;code&gt;e&lt;/code&gt;を渡しエフェクト&lt;code&gt;eff&lt;/code&gt;を発生する｡
&lt;code&gt;handler eff vh effh&lt;/code&gt;でエフェクト&lt;code&gt;eff&lt;/code&gt;のハンドラを定義する｡
&lt;code&gt;vh&lt;/code&gt;はvalue handlerとなり､ハンドラがエフェクトをハンドルしきって値を返すときにvalue handlerによりハンドルした値を返す｡
&lt;code&gt;effh&lt;/code&gt;はエフェクトの引数と継続を取る｡&lt;/p&gt;&lt;p&gt;ハンドルできるエフェクトが少ないため一見して弱くなったか? と思うがそんなことはない｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; title=&quot;Kiselyov, Oleg, and Kc Sivaramakrishnan. “Eff directly in OCaml.(2016).” ACM SIGPLAN Workshop on ML. 2016. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;
ではエフェクトにADTを渡してハンドラ内でさらにパターンマッチする方法で事実上n個のエフェクトをハンルするようにしている｡&lt;/p&gt;&lt;p&gt;意味論に関してはっきりと示せる自信がない(面倒くさいとも言う)のと､後述のように継続の使用回数を制限するので省略します｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; title=&quot;Bauer, Andrej, and Matija Pretnar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming 84.1 (2015): 108-123. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;
にあるような､よくあるcall by valueの体系を想定している｡
次の例題で雰囲気を掴んでもらいたい｡&lt;/p&gt;&lt;h2 id=&quot;2-2.+%E4%BE%8B%E9%A1%8C&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-2.+%E4%BE%8B%E9%A1%8C&quot;&gt;2-2. 例題&lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* instantiate *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* choose left *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* returns `8` *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;突然tupleが出てきましたが､純真な心で呼んでみてください｡
&lt;code&gt;inst ()&lt;/code&gt;が返す値はeffect instancesの中でuniqueならなんでもいい｡
ハンドラ&lt;code&gt;lh&lt;/code&gt;を定義する｡
エフェクトハンドラ&lt;code&gt;((l, r), k) -&amp;gt; k l&lt;/code&gt;を見ると､&lt;code&gt;(l, r)&lt;/code&gt;というtupleを受け取って継続&lt;code&gt;k&lt;/code&gt;に&lt;code&gt;l&lt;/code&gt;だけ渡して&lt;code&gt;r&lt;/code&gt;は捨てる｡&lt;/p&gt;&lt;h2 id=&quot;2-3.+oneshot+algebraic+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-3.+oneshot+algebraic+effects&quot;&gt;2-3. oneshot algebraic effects&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;今回はさらに､継続の使用を高々1回に制限する｡
マイナーな言語機能でさらに制限を加えてしまっているが､例えば&lt;a href=&quot;http://ocamllabs.io/doc/multicore.html&quot;&gt;Multicore OCaml&lt;/a&gt;は原則的に継続の使用は1回に制限されている&lt;sup id=&quot;fnref3&quot; title=&quot;むしろ他に継続がワンショットのalgebraic effectsを知りませんが…｡あとMulticore OCamlにはObj.clone_continuationという継続を複製する関数が用意されており､ランタイムにコストを支払うことで継続を2回以上使うことができる｡ &quot;&gt;&lt;a href=&quot;#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;｡
例えば次のような例(コード&lt;a href=&quot;#ng-twice&quot;&gt;2.2&lt;/a&gt;
)はNGにしたい｡
continuationを2回使ってはいけない(戒め)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;ng-twice&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;コード&lt;a href=&quot;#ng-twice&quot;&gt;2.2&lt;/a&gt;
. NG: using &lt;em&gt;k&lt;/em&gt; twice&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* NG!!! 2回使うな!!! *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Affine typesなどにより継続を2回使う箇所を検出したいが､それはまたいつかお話しましょう｡
高級な型システムでなくても､継続に適当な型を付けてdef-use chainを使えばヒューリスティックに解決できそうですね｡&lt;/p&gt;&lt;p&gt;今回は継続を2回以上使ってはいけない&lt;em&gt;お約束&lt;/em&gt;しかないので誰も注意してくれない｡
そのため我々が注意するしかない｡&lt;/p&gt;&lt;p&gt;継続が1回しか使えないのはmultishot(ノーマルな) algebraic effectsと比較すると真にパワーが弱くなっている｡
とはいえ継続を2回も使う必要のない場面&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; title=&quot;Dolan, Stephen, et al. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming. Springer, Cham, 2017. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;
が多く､継続がワンショットであることを前提にするとパフォーマンスの良い実装ができる&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn5&quot; title=&quot;Bruggeman, Carl, Oscar Waddell, and R. Kent Dybvig. “Representing control in the presence of one-shot continuations.” ACM SIGPLAN Notices. Vol. 31. No. 5. ACM, 1996. &quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn6&quot; title=&quot;Dolan, Stephen, et al. “Effective concurrency through algebraic effects.” OCaml Workshop. 2015. &quot; id=&quot;fnref6&quot;&gt;6&lt;/a&gt;]&lt;/span&gt;
｡&lt;/p&gt;&lt;h1 id=&quot;3.+asymmetric+coroutines&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+asymmetric+coroutines&quot;&gt;3. asymmetric coroutines&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;3-1.+asymmetric%3F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-1.+asymmetric%3F&quot;&gt;3-1. asymmetric?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;非常に簡単に説明すると､みなさんがお使いのコルーチンは概ねasymmetric coroutineです｡
Asymmetric coroutineがあるのでsymmetric coroutineももちろん存在する｡
Asymmetric coroutinesは対象のコルーチンへ&lt;em&gt;飛ぶ&lt;/em&gt;操作resumeと操作してるコルーチンから&lt;em&gt;戻る&lt;/em&gt;操作yieldの2つを持つ｡
一方symmetric coroutinesはコントロールを移すという唯一の操作controlのみを持ちます(表&lt;a href=&quot;#tbl-cor&quot;&gt;3.1&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl-cor&quot;&gt;&lt;/label&gt;

&lt;p&gt;表&lt;a href=&quot;#tbl-cor&quot;&gt;3.1&lt;/a&gt;
. the comparision of a?symmetric coroutines&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;
&lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt;symmetric coroutines&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;symmetric coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;control manipuration&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;resume, yield&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;conttrol&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;&lt;p&gt;Asymmetric coroutinesはresumeで呼び出す呼び出し側と､呼び出される側という呼ぶ呼ばれるの関係がコルーチン(とメインスレッド)間にあるのが特徴となっている｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;example.lua&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;--[[ prints
a
 1
b
c
 2
d
 3
--]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;なるほど､&lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt;｡&lt;/p&gt;&lt;h2 id=&quot;3-2.+%CE%BB%3Csub%3Ecor%3C%2Fsub%3E%0A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-2.+%CE%BB%3Csub%3Ecor%3C%2Fsub%3E%0A&quot;&gt;3-2. λ&lt;sub&gt;cor&lt;/sub&gt;
&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Luaだとちょっと大きすぎるし扱いづらいため､変換のための小さな計算体系として\(\lambda_{\text{\textit{cor}}}\)を考える(図&lt;a href=&quot;#lcor-syn&quot;&gt;3.2&lt;/a&gt;
)｡&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;lcor-syn&quot;&gt;&lt;/label&gt;

\[
\begin{array}{rrl}
  x &amp;amp; \in &amp;amp; \text{\textit{Variables}}\\
  K &amp;amp; \in &amp;amp; \{\text{\textit{Eff}}, \text{\textit{Val}}, \text{\textit{UncaughtEff}}\} \text{ // constructors} \\
  \text{\textit{eff}} &amp;amp; \in &amp;amp; \text{\textit{Effects}}\\
  v &amp;amp; ::= &amp;amp; x \mid \lambda x. e\\
  e &amp;amp; ::= &amp;amp; v \mid e\ e \mid \mathtt{let}\ x = e\ \mathtt{in}\ e \mid \mathtt{inst}\ \left(\right) \\
    &amp;amp; \mid&amp;amp; \mathtt{match}\ e\ \mathtt{with}\ \overrightarrow{case} \\
    &amp;amp; \mid&amp;amp; \mathtt{create}\ e \mid \mathtt{resume}\ e\ e \mid \mathtt{yield}\ e \text{ // coroutine manipurations} \\
  case    &amp;amp; ::= &amp;amp; K\ x \rightarrow e \mid K\ x\ \textit{when}\ e = e \rightarrow e \\
  letrec &amp;amp; ::= &amp;amp; \mathtt{let}\ \mathtt{rec}\ f\ x = e\ mutrec\\
  mutrec &amp;amp; ::= &amp;amp; \mathtt{and}\ f\ x = e \mid \mathtt{in}\ e
\end{array}
\]
図&lt;a href=&quot;#lcor-syn&quot;&gt;3.2&lt;/a&gt;
. the syntax of \(\lambda_{\text{\textit{cor}}}\)
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;こちらも筆者が疲れたので意味論はフィーリングで行く｡
すまんが&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn7&quot; title=&quot;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &quot; id=&quot;fnref7&quot;&gt;7&lt;/a&gt;]&lt;/span&gt;
を参照されたし｡
ランタイムにラベルストアなどを用意してがちゃがちゃやっていく感じ｡&lt;/p&gt;&lt;p&gt;構成員としては､ラムダ計算にくわえ､&lt;code&gt;let&lt;/code&gt;式､(相互)再帰､ADTとパターンマッチに加え､コルーチンの操作&lt;code&gt;create&lt;/code&gt; &lt;code&gt;resume&lt;/code&gt; &lt;code&gt;yield&lt;/code&gt;がある｡
各エフェクトを一意にするために&lt;code&gt;inst ()&lt;/code&gt;もそのまま持ってきている｡
小さくなるよう努力したものの､依然としてゴタゴタしているのはひとえに筆者の力不足である｡&lt;/p&gt;&lt;p&gt;ところで上記のプログラムは書けるのだろうか?
&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;mutual referring(なんて言うのか?) objectをmutual recursionでなんとかできる? できない? 今の脳の稼働率ではわからん｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1070882855582986241?ref_src=twsrc%5Etfw&quot;&gt;December 7, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;変換のターゲットとしてコルーチンが出てくるため､上記のようなプログラムは\(\lambda_{\text{\textit{cor}}}\)では書けなくても問題はないので問題ない｡&lt;/p&gt;&lt;h2 id=&quot;3-3.+asymmetric+coroutines+and+oneshot+continuation&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-3.+asymmetric+coroutines+and+oneshot+continuation&quot;&gt;3-3. asymmetric coroutines and oneshot continuation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Asymmetric coroutinesは強力なコントロールオペレータであり､まずsymmetric coroutinesを模倣することができ､のみならずcall/1ccもasymmetric coroutinesにより実装することができる&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn7&quot; title=&quot;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &quot; id=&quot;fnref7&quot;&gt;7&lt;/a&gt;]&lt;/span&gt;
｡
call/1ccとは､継続の実行が高々1回に制限されているcall/ccである｡&lt;/p&gt;&lt;p&gt;オッoneshotnessが出てきた｡
これはcontinuationがコルーチンに対応し､コルーチンは状態を複製する操作が基本的に提供されてないためである｡
したがってコルーチンの状態を複製する操作が追加されない限りは､コルーチンで継続をエミュレーションするときは基本的にワンショットである(表&lt;a href=&quot;#tbl-cont-cor&quot;&gt;3.3&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl-cont-cor&quot;&gt;&lt;/label&gt;

&lt;p&gt;表&lt;a href=&quot;#tbl-cont-cor&quot;&gt;3.3&lt;/a&gt;
. the correspondence between continuations and asymmetric coroutines&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;continuations&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;asymmetric coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;continuation object&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;function&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;coroutine thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;run continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;call function&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;suspend&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;waste continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;&lt;h2 id=&quot;%E3%82%B3%E3%83%A9%E3%83%A0%3A+JavaScript%E3%81%AEgenerator&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%B3%E3%83%A9%E3%83%A0%3A+JavaScript%E3%81%AEgenerator&quot;&gt;コラム: JavaScriptのgenerator&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ES2015からgeneratorというものが追加された｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: 3, done: false }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: 5, done: false }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: 0, done: true }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: undefined, done: true }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おっこれはasymmetric coroutineか? と一瞬錯覚するが､実はasymmetric coroutinesよりも表現力が低い｡
理由は簡単､&lt;code&gt;yield&lt;/code&gt;はgenerator &lt;strong&gt;リテラル&lt;/strong&gt;の直下にしか書けないためである｡
つまり以下のようなことがsyntacticに書けない｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yieldf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;yieldf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;yieldf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
const yieldf = x =&amp;gt; yield x;
                          ^

SyntaxError: Unexpected identifier
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;筆者の推理としては､(おそらく)asymmetric coroutinesをCPSで表現するのは難しいが､
JSのgeneratorなら多分CPS変換できるので､babelなどによるES2015以前のJSへのコンパイルが可能になるからではないかと考えられる｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;JSのgeneratorってそうかyieldをgnerator関数の直下にしかかけないから継続の実行がワンショットのCPSに変換できるんだな。babel的な理由でcoroutineにしなかったんだろうか。&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1069176528032849923?ref_src=twsrc%5Etfw&quot;&gt;December 2, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;ところで､generatorも(おそらく)状態を複製する操作が用意されてないので､変換先のCPSの継続はワンショットになるはずである｡&lt;/p&gt;&lt;h1 id=&quot;4.+oneshot+algebraic+effects+%E2%86%92+asymmetric+coroutines&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+oneshot+algebraic+effects+%E2%86%92+asymmetric+coroutines&quot;&gt;4. oneshot algebraic effects → asymmetric coroutines&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Core Effから\(\lambda_{\text{\textit{cor}}}\)への変換､つまり言語Aから言語Bへの変換なのでコンパイルですね｡本稿の変換の実装はすなわちコンパイラになります｡
言語実装アドベントカレンダーにふさわしいですね｡
本稿では変換の実装はしないので読者の課題あるいは筆者の研究の一環です｡&lt;/p&gt;&lt;h2 id=&quot;4-1.+%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AA%E5%AF%BE%E5%BF%9C&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-1.+%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AA%E5%AF%BE%E5%BF%9C&quot;&gt;4-1. 直感的な対応&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;筆者は直観で実装してしまったので､とりあえず直感的なところからかためていく｡
方針としてはこんな感じになるだろうか(表&lt;a href=&quot;#tbl-aeac&quot;&gt;4.1&lt;/a&gt;
).&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl-aeac&quot;&gt;&lt;/label&gt;

&lt;p&gt;表&lt;a href=&quot;#tbl-aeac&quot;&gt;4.1&lt;/a&gt;
. the intuitional correspondence between (oneshot ) algebraic effects and asymmetric coroutines&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;(oneshot) algebraic effects&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;asymmetric coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;handler&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;(&lt;code&gt;create&lt;/code&gt; &amp;amp; &lt;code&gt;resume&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;perform&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;coroutine thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;run continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;&lt;p&gt;ハンドラは対応が取りづらいので曖昧になっている｡
ハンドラの動作を思い出そう｡
エフェクトインスタンス､value handler, effect handlerを受け取ったらthunkを取ってそのthunkをハンドラでハンドルする､という動作である｡
thunk内でエフェクトを発生(&lt;code&gt;yield&lt;/code&gt;)すると一時停止してハンドラに操作が移ってほしい､とするとthunkをコルーチンでencapsulateして即実行､という流れになる｡
なのでとりあえず&lt;code&gt;create&lt;/code&gt; &amp;amp; &lt;code&gt;resume&lt;/code&gt;としてある｡&lt;/p&gt;&lt;h2 id=&quot;4-2.+%E5%A4%89%E6%8F%9B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-2.+%E5%A4%89%E6%8F%9B&quot;&gt;4-2. 変換&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;%E8%BF%BD%E8%A8%9820181209&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181209&quot;&gt;追記20181209&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;投稿即バグが見つかり泣きました｡
まずは修正前をご覧ください｡&lt;/p&gt;&lt;p&gt;最新は&lt;a href=&quot;#%E8%BF%BD%E8%A8%9820190127&quot;&gt;こちら&lt;/a&gt;&lt;/p&gt;&lt;p&gt;追記suspend&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv&quot;&gt;&lt;/label&gt;

\[
\begin{array}{c}
  \left[\left[e_{ce}\right]\right]\eta = e_{\lambda \textit{cor}}\\
  \ \\
  \text{  // $c$ is anything to run coroutine at first, like \textit{nil}, $\left(\right)$, etc.}\\
  \begin{aligned}
    \left[\left[x\right]\right]\eta &amp;amp;= \eta(x) \\
    \left[\left[\textit{eff}\right]\right]\eta &amp;amp;= \textit{eff}\\
    \left[\left[\lambda x. e\right]\right]\eta &amp;amp;= \lambda x’. \left[\left[e\right]\right]\eta\left[x\mapsto x’\right] \\
    \left[\left[\mathtt{let}\ x = e\ \mathtt{in}\ e’\right]\right]\eta &amp;amp;= \mathtt{let}\ x’ = \left[\left[e\right]\right]\eta\ \mathtt{in}\ \left[\left[e’\right]\right]\eta\left[x\mapsto x’\right]\\
    \left[\left[v_1\ v_2\right]\right]\eta &amp;amp;= \left(\left[\left[v_1\right]\right]\eta\right) \ \left(\left[\left[v_2\right]\right]\eta\right) \\
    \left[\left[\mathtt{inst}\ \left(\right)\right]\right]\eta &amp;amp;= \mathtt{inst}\ \left(\right)\\
    \left[\left[\mathtt{perform}\ \text{\textit{eff}}\ v\right]\right]\eta &amp;amp;= \mathtt{yield}\ \left(\text{\textit{Eff}}\left(\left[\left[\textit{eff}\right]\right]\eta, \left[\left[v\right]\right]\eta\right)\right)\\
    \left[\left[\mathtt{with}\ h\ \mathtt{handle}\ e\right]\right]\eta &amp;amp;= \left[\left[h\right]\right]\eta\ \left(\lambda c. \left[\left[e\right]\right]\eta\right)\\
    \left[\left[\mathtt{handler}\ \textit{eff}\ (\mathtt{val}\ x\rightarrow e_v) \ \left(\left(x, k\right) \rightarrow e_{\textit{eff}}\right) \right]\right]\eta%
                                                                   &amp;amp;= \\
                                                                   &amp;amp; \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
                                                                   &amp;amp; \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta\left[x \mapsto x’\right] \ \mathtt{in}\\
                                                                   &amp;amp; \mathtt{let}\ \textit{effh} = \lambda x’\ k’. \left[\left[e_{\textit{eff}}\right]\right]\eta\left[x \mapsto x’, k \mapsto k’\right]\ \mathtt{in}\\
                                                                   &amp;amp; \lambda \textit{th}.\\
                                                                   &amp;amp; \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in} \\
                                                                   &amp;amp; \quad  \mathtt{let\ rec}\ \textit{handle}\ r =\\
                                                                   &amp;amp; \qquad \mathtt{match}\ r\ \mathtt{with}\\
                                                                   &amp;amp; \qquad \mid \textit{Eff}\ \left(\textit{eff’}, v\right)\ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow\\
                                                                   &amp;amp; \qquad \quad \textit{effh}\ v\ (\lambda \textit{arg}.\\
                                                                   &amp;amp; \qquad \quad \mathtt{let}\ \textit{ret} =\textit{continue}\ \textit{arg}\ \mathtt{in}\\
                                                                   &amp;amp; \qquad \quad (\mathtt{match}\ \textit{ret}\ \mathtt{with}\\
                                                                   &amp;amp; \qquad \quad \mid \textit{Val}\ \text{\textunderscore} \rightarrow \textit{ret}\\
                                                                   &amp;amp; \qquad \quad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \textit{ret}))\\
                                                                   &amp;amp; \qquad \mid \textit{Eff}\ \left(\text{\textunderscore}, \text{\textunderscore}\right)\rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\ \left(r, \textit{continue}\right)\right)\\
                                                                   &amp;amp; \qquad \mid \textit{UncaughtEff}\ \left(\textit{Eff}\ \left(\textit{eff’}, v\right) , k\right) \ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow \\
                                                                   &amp;amp; \qquad \quad \textit{effh}\ v\ (\lambda \textit{arg}.\\
                                                                   &amp;amp; \qquad \qquad \mathtt{let}\ \textit{ret} = k\ \textit{arg} \ \mathtt{in}\\
                                                                   &amp;amp; \qquad \qquad \textit{continue}\ (\mathtt{match}\ \textit{ret} \ \mathtt{with}\\
                                                                   &amp;amp; \qquad \qquad \mid \textit{Val}\ \text{\textunderscore} \rightarrow \textit{ret}\\
                                                                   &amp;amp; \qquad \qquad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \textit{ret}))\\
                                                                   &amp;amp; \qquad \mid \textit{UncaughtEff}\ (\textit{effv’}, k’) \rightarrow\\ 
                                                                   &amp;amp; \qquad \qquad \mathtt{yield}\ (\textit{UncaughtEff}\ (\textit{effv’}, \lambda \textit{arg}.\\
                                                                   &amp;amp; \qquad \qquad \quad \mathtt{let}\ \textit{ret} = k’\ \textit{arg} \ \mathtt{in}\\
                                                                   &amp;amp; \qquad \qquad \quad \textit{continue}\ (\mathtt{match}\ \textit{ret} \ \mathtt{with}\\
                                                                   &amp;amp; \qquad \qquad \quad \mid \textit{Val}\ \text{\textunderscore} \rightarrow \textit{ret}\\
                                                                   &amp;amp; \qquad \qquad \quad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \textit{ret}))) \\
                                                                   &amp;amp; \qquad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \left(\textit{vh}\ r\right)\\
                                                                   &amp;amp; \quad  \mathtt{and}\ \textit{continue}\ \textit{arg} =\\
                                                                   &amp;amp; \qquad \text{ // 追記20181209 resumeにcoを渡し忘れてたのを修正 } \\
                                                                   &amp;amp; \qquad \mathtt{let}\ r = \mathtt{resume}\ \textit{co}\ \textit{arg}\ \mathtt{in}\\
                                                                   &amp;amp; \qquad \mathtt{match}\ r\ \mathtt{with}\\
                                                                   &amp;amp; \qquad \mid \textit{Val}\ v \rightarrow v\\
                                                                   &amp;amp; \qquad \mid \text{\textunderscore} \rightarrow \textit{handle}\ r\\
                                                                   &amp;amp; \quad  \mathtt{in}\\
                                                                   &amp;amp; \quad  \mathtt{match}\ \textit{continue}\ c\ \mathtt{with} \\
                                                                   &amp;amp; \quad  \mid \textit{Val}\ v \rightarrow v\\
                                                                   &amp;amp; \quad  \mid r \rightarrow r\\
  \end{aligned}
\end{array}
\]
図&lt;a href=&quot;#conv&quot;&gt;4.2&lt;/a&gt;
. the conversion \(\left[\left[e_{ce}\right]\right] = e_{\lambda_{\textit{cor}}}\)
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;handler&lt;/code&gt;長すぎんじゃボケー!!!&lt;/em&gt;&lt;/strong&gt;
ただの実装やろがい!!!
散々引っ張っておいて大変申し訳無いが､今の所スッキリできそうにないので勘弁してもらいたい｡
さらに見返してみるとなんだか洗練されてない｡
もう少しCPSっぽく書ける部分がたしかにあり､そうすれば末尾呼び出しになって良いことがありそうだが､筆者はCPSで実装を試みたところバグバグになって一回諦めているため､読者への課題としたい｡
CPSにすればvalue handlerを複数使ってしまうのを防ぐための&lt;code&gt;Val&lt;/code&gt;コンストラクタが不要になるだろう｡&lt;/p&gt;&lt;p&gt;メタの話はこの程度にして､内容を見てみよう｡
&lt;code&gt;handler&lt;/code&gt;以外はだいたいふ〜んて感じで､&lt;code&gt;perform&lt;/code&gt;も表&lt;a href=&quot;#tbl-aeac&quot;&gt;4.1&lt;/a&gt;
でぼんやりと考えたとおりに&lt;code&gt;yield&lt;/code&gt;に対応している｡&lt;/p&gt;&lt;p&gt;問題は爆発している&lt;code&gt;handler&lt;/code&gt;である｡
thunkを受け取ってコルーチンを作り､&lt;code&gt;resume&lt;/code&gt;のラッパーとなっている&lt;code&gt;continue&lt;/code&gt;を走らせてるので､なるほど&lt;code&gt;create&lt;/code&gt; &amp;amp; &lt;code&gt;resume&lt;/code&gt;である｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;handler&lt;/code&gt;の内部の&lt;code&gt;handle&lt;/code&gt;が一番仕事してる雰囲気を出している｡
&lt;code&gt;handle&lt;/code&gt;は&lt;code&gt;contiue&lt;/code&gt;からのみ呼ばれており､呼び出し時に&lt;code&gt;resume&lt;/code&gt;の戻り値､つまり&lt;code&gt;yield&lt;/code&gt;に渡された引数かコルーチンでencapsulateされた関数の戻り値である｡
&lt;code&gt;Val&lt;/code&gt;以外でコルーチンから戻ってくるものとなると､&lt;code&gt;yield&lt;/code&gt;は&lt;code&gt;perform&lt;/code&gt;だから&lt;code&gt;Eff&lt;/code&gt;だな｡&lt;/p&gt;&lt;p&gt;そして&lt;code&gt;Eff(eff', v)&lt;/code&gt;の&lt;code&gt;eff'&lt;/code&gt;がハンドルすべきエフェクト&lt;code&gt;eff&lt;/code&gt;の場合は&lt;code&gt;effh&lt;/code&gt;によって処理をおこなっている｡
&lt;code&gt;effh&lt;/code&gt;に渡される第2引数は限定継続であるが､ここでは&lt;code&gt;continue&lt;/code&gt;をさらにラップして&lt;code&gt;Val&lt;/code&gt;タグを剥がしている｡
ハンドルしないエフェクトの場合は&lt;code&gt;UncaughtEff&lt;/code&gt;にエフェクトと継続を渡して&lt;strong&gt;&lt;code&gt;yield&lt;/code&gt;している&lt;/strong&gt;｡
これによって一つ外側のハンドラにエフェクトを飛ばしているのである｡
だからさっき述べた&lt;code&gt;continue&lt;/code&gt;内の&lt;code&gt;resume&lt;/code&gt;が返すのは関数の戻り値と&lt;code&gt;Eff&lt;/code&gt;だけでなく&lt;code&gt;UncaughtEff&lt;/code&gt;もある｡&lt;/p&gt;&lt;p&gt;では&lt;code&gt;handle&lt;/code&gt;内で&lt;code&gt;UncaughtEff&lt;/code&gt;をハンドルしてる部分を見る｡
だいたい同じ要領だが､&lt;code&gt;effh&lt;/code&gt;に渡している継続は様子がちょっとちがう｡
&lt;code&gt;UncaughtEff&lt;/code&gt;は継続を一緒にもってくるので､まずこれを走らせる｡
そして継続の戻り値をさらに&lt;em&gt;現在の&lt;/em&gt;継続に渡して現在の継続を走らせる｡
ハンドルできない&lt;code&gt;UncaughtEff&lt;/code&gt;の場合も面白い｡
さらに外側のハンドラにエフェクトの処理をまかせたいので同様に&lt;code&gt;UncaughtEff&lt;/code&gt;を&lt;code&gt;yield&lt;/code&gt;で飛ばしている｡
ただし&lt;code&gt;UncaughtEff&lt;/code&gt;に渡している継続は､渡ってきた継続の結果をさらに現在の継続に渡している｡
つまりこれは継続をネストさせている｡
ますますCPSで実装したくなりますね｡
実装に自信ニキはよろしくお願いします｡
脳が発光しますね｡&lt;/p&gt;&lt;p&gt;最後に&lt;code&gt;Val&lt;/code&gt;が来た場合､中身を剥がしてvalue handlerに突っ込んでいる｡
型がない世界でよかったですね｡&lt;/p&gt;&lt;h2 id=&quot;%E8%BF%BD%E8%A8%9820181209+resume&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181209+resume&quot;&gt;追記20181209 resume&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;多分これが一番正しいと思います｡&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv2&quot;&gt;&lt;/label&gt;

\[
\begin{array}{c}
  \left[\left[e_{ce}\right]\right]\eta = e_{\lambda \textit{cor}}\\
  \ \\
  \begin{aligned}
      &amp;amp;\left[\left[\mathtt{handler}\ \textit{eff}\ (\mathtt{val}\ x\rightarrow e_v) \ \left(\left(x, k\right) \rightarrow e_{\textit{eff}}\right) \right]\right]\eta%
      = \\
      &amp;amp;\qquad \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
      &amp;amp;\qquad \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta\left[x \mapsto x’\right] \ \mathtt{in}\\
      &amp;amp;\qquad \mathtt{let}\ \textit{effh} = \lambda x’\ k’. \left[\left[e_{\textit{eff}}\right]\right]\eta\left[x \mapsto x’, k \mapsto k’\right]\ \mathtt{in}\\
      &amp;amp;\qquad \lambda \textit{th}.\\
      &amp;amp;\qquad \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in} \\
      &amp;amp;\qquad \quad  \mathtt{let\ rec}\ \textit{handle}\ r =\\
      &amp;amp;\qquad \qquad \mathtt{match}\ r\ \mathtt{with}\\
      &amp;amp;\qquad \qquad \mid \textit{Eff}\ \left(\textit{eff’}, v\right)\ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \textit{continue}\\
      &amp;amp;\qquad \qquad \mid \textit{Eff}\ \left(\text{\textunderscore}, \text{\textunderscore}\right)\rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\ \left(r, \textit{continue}\right)\right)\\
      &amp;amp;\qquad \qquad \mid \textit{UncaughtEff}\ \left(\textit{Eff}\ \left(\textit{eff’}, v\right) , k\right) \ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow \\
      &amp;amp;\qquad \qquad \quad \textit{effh}\ v\ \left(\lambda \textit{arg}. \textit{handle}\ \left(\mathtt{resume}\ \left(\mathtt{create}\ k\right)\ \mathtt{arg}\right)\right)\\
      &amp;amp;\qquad \qquad \mid \textit{UncaughtEff}\ \left(\textit{effv’}, k\right) \rightarrow\\ 
      &amp;amp;\qquad \qquad \qquad \mathtt{yield}\ \left(\textit{UncaughtEff}\ \left(\textit{effv’}, \lambda \textit{arg}. \textit{handle}\ \left(\mathtt{resume}\ \left(\mathtt{create}\ k\right)\ \mathtt{arg}\right)\right)\right)\\
      &amp;amp;\qquad \qquad \mid \text{\textunderscore\ /* ANY value */} \rightarrow \textit{vh}\ r\\
      &amp;amp;\qquad \quad  \mathtt{and}\ \textit{continue}\ \textit{arg} = \textit{handle}\ \left(\mathtt{resume}\ \textit{co}\ \textit{arg}\right)\\
      &amp;amp;\qquad \quad  \mathtt{in}\\
      &amp;amp;\qquad \quad  \textit{continue}\ c
  \end{aligned}
\end{array}
\]
図&lt;a href=&quot;#conv2&quot;&gt;4.3&lt;/a&gt;
. the revision of the conversion
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;handler&lt;/code&gt;だけの変更だが､だいぶダイエットに成功した｡
&lt;code&gt;Val&lt;/code&gt;タグはそもそも不要だったことがわかった｡
&lt;code&gt;UncaughtEff&lt;/code&gt;をハンドルしてる部分も様子が変わっている｡
&lt;code&gt;UncaughtEff&lt;/code&gt;が持ってきた継続をコルーチンでencapsulateして即走らせ､その値を&lt;code&gt;handle&lt;/code&gt;に渡す､という関数を&lt;code&gt;effh&lt;/code&gt;に継続として渡している｡
&lt;code&gt;continue&lt;/code&gt;を見るとだいたい同じことをやっており､encapsulateしない場合コルーチンを突き抜けて&lt;code&gt;yield&lt;/code&gt;してしまうパターンがあった｡
また現在の継続は&lt;code&gt;handle&lt;/code&gt;が内部で&lt;code&gt;continue&lt;/code&gt;を呼んでくれるため､わざわざ&lt;code&gt;continue&lt;/code&gt;を引っ張る必要はなく､走らせる継続の戻り値は&lt;code&gt;handle&lt;/code&gt;でハンドルするという元からの考えを使えばいいだけだった｡
操作を継続の中に押し込んでいく感じが､なんとなく&lt;code&gt;Functor Free&lt;/code&gt;を思わせる｡&lt;/p&gt;&lt;p&gt;追記おわり&lt;/p&gt;&lt;h1 id=&quot;%E8%BF%BD%E8%A8%9820181216&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181216&quot;&gt;追記20181216&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;さらに大学のゼミ発表などを経てコンパクトになりました｡&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv3&quot;&gt;&lt;/label&gt;

\[
\begin{aligned}
  &amp;amp;\left[\left[\mathrm{handler}\ \textit{eff}\ \left(\mathtt{val}\ x \rightarrow e_v\right)\ \left(\left(x, k\right) \rightarrow e_\textit{eff}\right)\right]\right]\eta = \\
  &amp;amp; \qquad \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
  &amp;amp; \qquad \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta \left[x \mapsto x’\right]\ \mathtt{in}\\
  &amp;amp; \qquad \mathtt{let}\ \textit{effh} = \lambda x’\, k’. \left[\left[e_\textit{eff}\right]\right]\eta \left[x\mapsto x’, k \mapsto k’\right] \mathtt{in}\\
  &amp;amp; \qquad \lambda \textit{th}.\\
  &amp;amp; \qquad \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in}\\
  &amp;amp; \qquad \quad \mathtt{let}\ \mathtt{rec}\ \textit{handle}\ r =\\
  &amp;amp; \qquad \qquad \mathtt{match}\ r\ \mathtt{with}\\
  &amp;amp; \qquad \qquad \mid \textit{Eff}\left(\textit{eff’}, v\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{continue}\ \textit{co}\right)\\
  &amp;amp; \qquad \qquad \mid \textit{Eff}\left(\text{\textunderscore}, \text{\textunderscore}\right) \rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\left(r, \left(\textit{continue}\ \textit{co}\right)\right)\right)\\
  &amp;amp; \qquad \qquad \mid \textit{UncaughtEff}\left(\textit{Eff}\left(\textit{eff’}, v\right), k\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{continue}\ \left(\mathtt{create}\ k\right)\right)\\
  &amp;amp; \qquad \qquad \mid \textit{UncaughtEff}(\textit{effv}, k) \rightarrow \mathtt{yield}\ (\textit{UncaughtEff}\left(\textit{effv}, \left(\textit{continue}\ \left(\mathtt{create}\ k\right)\right)\right))\\
  &amp;amp; \qquad \qquad \mid \text{\textunderscore} \rightarrow \textit{vh}\ r\\
  &amp;amp; \qquad \quad \mathtt{and}\ \textit{conrtinue}\ \textit{co}\ \textit{arg} = \textit{handle}\ \left(\mathtt{resume}\ \textit{co}\ \textit{arg}\right)\\
  &amp;amp; \qquad \quad \mathtt{in}\ \textit{continue}\ \textit{co}\ \textit{c}
\end{aligned}
\]
図&lt;a href=&quot;#conv3&quot;&gt;4.4&lt;/a&gt;
. the conversion v3.
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;#conv2&quot;&gt;4.3&lt;/a&gt;
とは本質的に何も変わってません｡
&lt;code&gt;continue&lt;/code&gt;を汎用的なものにした｡
これにより､処理がどうなってるかがより簡潔になったんじゃないでしょうか｡
&lt;code&gt;handle&lt;/code&gt;を連れ回すことで現在のハンドラによるハンドル処理を続けることができる｡
&lt;code&gt;UncaughtEff&lt;/code&gt;に渡す継続をコルーチンでencapsulateするのは､エフェクトの発生(&lt;code&gt;yield&lt;/code&gt;)を再びキャッチするためである｡&lt;/p&gt;&lt;h1 id=&quot;%E8%BF%BD%E8%A8%9820190127&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820190127&quot;&gt;追記20190127&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;バグってました｡&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv4&quot;&gt;&lt;/label&gt;

$$
\begin{aligned}
  &amp;amp;\left[\left[\mathrm{handler}\ \textit{eff}\ \left(\mathtt{val}\ x \rightarrow e_v\right)\ \left(\left(x, k\right) \rightarrow e_\textit{eff}\right)\right]\right]\eta = \\
  &amp;amp; \qquad \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
  &amp;amp; \qquad \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta \left[x \mapsto x’\right]\ \mathtt{in}\\
  &amp;amp; \qquad \mathtt{let}\ \textit{effh} = \lambda x’\, k’. \left[\left[e_\textit{eff}\right]\right]\eta \left[x\mapsto x’, k \mapsto k’\right] \mathtt{in}\\
  &amp;amp; \qquad \lambda \textit{th}.\\
  &amp;amp; \qquad \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in}\\
  &amp;amp; \qquad \quad \mathtt{let}\ \mathtt{rec}\ \textit{handle}\ r =\\
  &amp;amp; \qquad \qquad \mathtt{match}\ r\ \mathtt{with}\\
  &amp;amp; \qquad \qquad \mid \textit{Eff}\left(\textit{eff’}, v\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{continue}\ \textit{co}\right)\\
  &amp;amp; \qquad \qquad \mid \textit{Eff}\left(\text{\textunderscore}, \text{\textunderscore}\right) \rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\left(r, \left(\textit{continue}\ \textit{co}\right)\right)\right)\\
  &amp;amp; \qquad \qquad \mid \textit{UncaughtEff}\left(\textit{Eff}\left(\textit{eff’}, v\right), k\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{rehandle}\ k \right)\\
  &amp;amp; \qquad \qquad \mid \textit{UncaughtEff}(\textit{effv}, k) \rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\left(\textit{effv}, \textit{rehandle}\ k \right)\right)\\
  &amp;amp; \qquad \qquad \mid \text{\textunderscore} \rightarrow \textit{vh}\ r\\
  &amp;amp; \qquad \quad \mathtt{and}\ \textit{conrtinue}\ \textit{co}\ \textit{arg} = \textit{handle}\ \left(\mathtt{resume}\ \textit{co}\ \textit{arg}\right)\\
  &amp;amp; \qquad \quad \mathtt{and}\ \textit{rehhandle}\ \textit{k}\ \textit{arg} = \textit{handler}\ \textit{eff}\ \left(\textit{continue}\ \textit{co}\right)\ \textit{effh}\ \left(\lambda c. k\ \textit{arg}\right) \\
  &amp;amp; \qquad \quad \mathtt{in}\ \textit{continue}\ \textit{co}\ \textit{c}
\end{aligned}
$$
図&lt;a href=&quot;#conv4&quot;&gt;4.5&lt;/a&gt;
. the conversion v4.
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;$\textit{Eff}$のハンドルは&lt;a href=&quot;#conv2&quot;&gt;v2&lt;/a&gt;
や&lt;a href=&quot;#conv3&quot;&gt;v3&lt;/a&gt;
と変わりない｡
$\textit{rehandle}$という関数が追加され､$\textit{UncaughtEff}$に渡す､あるいは使う継続を$\textit{reandle}$に渡している｡
では$\textit{rehandle}$は何をしてるんですか? 新しくハンドラを作り､2つの引数を実行するサンクを作ってハンドラに渡すことで､サンクの中身をハンドルして実行する｡&lt;/p&gt;&lt;p&gt;我々の実現したいdeep handlerを考えれば確かにこのような実装になる｡
deep handlerとは､ハンドラの取り出した継続も同じハンドラによってハンドルされる｡
逆となる概念はshallow handlerであり､取り出された継続は同ハンドラからのハンドルを逃れる｡&lt;/p&gt;&lt;p&gt;ハンドルされる$\textit{UncaughtEff}$を見てみる｡&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
$\mid \textit{UncaughtEff}\left(\textit{Eff}\left(\textit{eff’}, v\right), k\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{rehandle}\ k \right)$
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;この矢印の右辺を展開すると､&lt;/p&gt;&lt;div&gt;
&lt;center&gt;
$$
\begin{array}{l}
\textit{effh}\ v \left(\lambda \textit{arg}.\right.\\
\quad  \textit{handler}\ \textit{eff}\ \left(\textit{continue}\ \textit{co}\right)\ \textit{effh}\ \left( \lambda c. k\ \textit{arg} \right)\left.\right)
\end{array}
$$
&lt;/center&gt;
&lt;/div&gt;&lt;p&gt;特にポイントとなるのが､新しく作るハンドラのvalue handlerが､現在のハンドラが持ってるencapsulateしたサンクを$\textit{continue}$する､いわばハンドラが持ってる継続にハンドルの結果を渡しているCPSのような構造になる｡
ハンドラによって$\textit{UncaughtEff}$が持ってきた$k$をハンドラによってハンドルすることで､晴れて現在のハンドラでもeffectをハンドルできるようになる｡&lt;/p&gt;&lt;p&gt;これまでの変換では､渡ってきた継続のeffectをハンドルできてるようでできてなかった｡
今回の変換により､なんとか解決したんじゃないでしょうか｡
実装も更新しているので､よかったら使ってみてバグを発見してください｡&lt;/p&gt;&lt;h1 id=&quot;5.+%E5%AE%9F%E8%A3%85&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E5%AE%9F%E8%A3%85&quot;&gt;5. 実装&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;それでは改めて&lt;a href=&quot;#repo&quot;&gt;リポジトリ&lt;/a&gt;
の方を見てみよう｡
Asymmetric coroutinesと非常に縁の深いLuaにより実装した｡
本稿で変換を改めて考えるにあたり､バグが複数発見､修正された｡
フィーリングの脆さと簡単なモデルに落として内容をしっかり検討することの重要さを再確認した｡&lt;/p&gt;&lt;p&gt;実装は図&lt;a href=&quot;#conv&quot;&gt;4.2&lt;/a&gt;
とほとんど同じである｡
なんといっても順番が逆で､実装が先にあり､図&lt;a href=&quot;#conv&quot;&gt;4.2&lt;/a&gt;
は実装をもとに書き下したためである｡
しかしLuaはclassもADTもないし関数リテラルが冗長､文志向なので&lt;code&gt;return&lt;/code&gt;必須といろいろしんどいところがあった｡&lt;/p&gt;&lt;p&gt;本稿の変換と異なる点は､ハンドラが多値に対応している点である｡
…というのは半分ウソというか､Multicore OCamlではtupleで表現するところを､tableでガッとやるのではなく可変長引数や多値などといったLuaの持ち味を活かすための細工をおこなった｡
多値を引き回すのは面倒なので､ハンドラに渡ってきた多値をtableに押し込み､実際に使われるタイミングで&lt;code&gt;unpack&lt;/code&gt;によって多値に戻している｡
この操作のため､effect handlerの引数の順序が&lt;code&gt;(value, continuation)&lt;/code&gt;から&lt;code&gt;(continuation, value...)&lt;/code&gt;と逆になっている｡
多値については&lt;a href=&quot;/2018/11/16/Lua-VM%E3%81%AB%E8%A6%8B%E3%82%8B%E5%A4%9A%E5%80%A4%E3%81%AE%E6%89%B1%E3%81%84.html&quot;&gt;こちら&lt;/a&gt;を参照…とおもったけど多値を返す関数の呼び出しをそのまま関数の引数の位置に書いた場合についてはあまりふれられてませんね｡
Lua VM的な説明をすると､引数の末尾位置に多値を返す関数の呼び出しを書かないと､1引数分､つまり1レジスタしか関数の戻り値を受けるレジスタが用意されないためである｡&lt;/p&gt;&lt;p&gt;最初期からフィーリングで突っ走っており､&lt;code&gt;UncaughtEff&lt;/code&gt;相当のことを､赤ちゃんでも思いつくような､例外処理機によって実装していた｡
OCamlのように代数的な例外がないのも相まって散々な目にあったが､部分的にはalgebraic effectsを実装していた｡
例外のハンドリングは一般にコストフル&lt;sup id=&quot;fnref8&quot; title=&quot;例外処理のある言語は概ねモダンであり､モダンな言語は比較的親切であり､親切な言語はエラーを吐くとスタックトレースを出してくれる｡ この新設のためにスタックトレースを記録するので遅くなる｡gotoとしての例外おおいに結構しかしパフォーマンスとしっかり勘案すること｡ &quot;&gt;&lt;a href=&quot;#fn8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;であり､Luaもご多分に漏れず遅い｡
コントロールを全てコルーチンの操作だけでおこなった場合と例外でぴょんぴょんする場合のパフォーマンスを比較してみたいが､まぁ半分ナンセンスだし半分は筆者のやる気不足なので､多分速くなってるだろうということで終わる｡&lt;/p&gt;&lt;h2 id=&quot;5-1.+%E3%83%87%E3%83%A2&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5-1.+%E3%83%87%E3%83%A2&quot;&gt;5-1. デモ&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;皆さん大好き&lt;a href=&quot;https://github.com/Nymphium/eff.lua/blob/master/example/shiftreset.lua&quot;&gt;multiprompt shift/resetが実装できる&lt;/a&gt;｡
ただしエフェクトハンドラの継続をそのままつかっているので､継続の使用は高々1回に制限されている｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shift0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Shift0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shift0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shift0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;プロンプトごとに&lt;code&gt;Shift0&lt;/code&gt;エフェクトインスタンスを作っている｡
&lt;code&gt;handler&lt;/code&gt;がそのまんまdelimiterになってるのがいいよね｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;--[[ prints
Hello
World?
--]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;だいぶ自然に書けているんじゃないでしょうか｡&lt;/p&gt;&lt;p&gt;エフェクトの抽象化､実装の分離…&lt;a href=&quot;https://github.com/Nymphium/eff.lua/blob/master/example/typeclass.lua&quot;&gt;型クラス&lt;/a&gt;か?&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- list map&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmaph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;newt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lmaph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- string map&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smaph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gmatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;smaph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Functorっぽいものを書いてるなと思ったが&lt;code&gt;smaph&lt;/code&gt;をみると全然そんなことなく､自分でも困惑した｡
Luaは残念ながら型のない世界なのでなんでもアリである｡&lt;/p&gt;&lt;h1 id=&quot;6.+%E9%96%A2%E9%80%A3%E7%A0%94%E7%A9%B6&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E9%96%A2%E9%80%A3%E7%A0%94%E7%A9%B6&quot;&gt;6. 関連研究&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Koka言語などをやっていってるDaan氏によりC言語によるalgebraic effectsの実装&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn9&quot; title=&quot;Leijen, Daan. “Implementing Algebraic Effects in C.” Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. &quot; id=&quot;fnref9&quot;&gt;9&lt;/a&gt;]&lt;/span&gt;
がおこなわれている｡
本稿と比較すると1ハンドラ1エフェクトや継続がワンショットなどの制限ががない一方､非常にユーザーアンフレンドリーな構文となっている｡
そのためP言語などのコンパイラのターゲットという位置づけがなされている｡
本稿では式指向の言語での変換をおこなっており､\(\lambda_{\textit{cor}}\)相当をサブセットとして持つ言語ならばsyntacticな辛さはない､と思う｡&lt;/p&gt;&lt;h1 id=&quot;7.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#7.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;7. おわりに&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本稿ではoneshot algebraic effectsからasymmetric coroutinesへの変換を提示した｡
この変換を用いることで､asymmetric coroutinesを持つ言語でoneshot algebraic effectsを使用することが可能になる｡
本稿ではすでにLuaによる実装を与えており､Luaはalgebraic effects-readyな状態となっている｡&lt;/p&gt;&lt;p&gt;ただし本稿の変換の正しさについては証明されていない｡
いまのところ “なんとなくうごいてる” 状態であり､とりあえずテストに&lt;a href=&quot;https://github.com/ocamllabs/ocaml-effects-tutorial&quot;&gt;Multicore OCamlのチュートリアル&lt;/a&gt;&lt;a href=&quot;https://github.com/Nymphium/eff.lua/tree/master/test&quot;&gt;を実装する&lt;/a&gt;ことで正しく動いてそうなことを確認している｡
未来のボクや､読者のみなさんに託されています｡
2019年には本稿の変換の証明､あるいは間違った部分の指摘などが湧き出ることを願っている｡&lt;/p&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Kiselyov, Oleg, and Kc Sivaramakrishnan. “Eff directly in OCaml.(2016).” ACM SIGPLAN Workshop on ML. 2016. &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Bauer, Andrej, and Matija Pretnar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming 84.1 (2015): 108-123. &lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;むしろ他に継続がワンショットのalgebraic effectsを知りませんが…｡あとMulticore OCamlには&lt;code&gt;Obj.clone_continuation&lt;/code&gt;という継続を複製する関数が用意されており､ランタイムにコストを支払うことで継続を2回以上使うことができる｡ &lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;Dolan, Stephen, et al. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming. Springer, Cham, 2017. &lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Bruggeman, Carl, Oscar Waddell, and R. Kent Dybvig. “Representing control in the presence of one-shot continuations.” ACM SIGPLAN Notices. Vol. 31. No. 5. ACM, 1996. &lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn6&quot;&gt;
&lt;p&gt;Dolan, Stephen, et al. “Effective concurrency through algebraic effects.” OCaml Workshop. 2015. &lt;a href=&quot;#fnref6&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn7&quot;&gt;
&lt;p&gt;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &lt;a href=&quot;#fnref7&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn8&quot;&gt;
&lt;p&gt;例外処理のある言語は概ねモダンであり､モダンな言語は比較的親切であり､親切な言語はエラーを吐くとスタックトレースを出してくれる｡ この新設のためにスタックトレースを記録するので遅くなる｡gotoとしての例外おおいに結構しかしパフォーマンスとしっかり勘案すること｡ &lt;a href=&quot;#fnref8&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn9&quot;&gt;
&lt;p&gt;Leijen, Daan. “Implementing Algebraic Effects in C.” Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. &lt;a href=&quot;#fnref9&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 09 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/12/09/asymmetric-coroutines%E3%81%AB%E3%82%88%E3%82%8Boneshot-algebraic-effects%E3%81%AE%E5%AE%9F%E8%A3%85.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/12/09/asymmetric-coroutines%E3%81%AB%E3%82%88%E3%82%8Boneshot-algebraic-effects%E3%81%AE%E5%AE%9F%E8%A3%85.html</guid>
        
        <category>Lua</category>
        
        <category>Coroutines</category>
        
        <category>Algebraic Effects</category>
        
        <category>言語実装</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>Lily58による.xmodmapのハードウェア実装</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これはWORDIAN Advent Calendar 2018の2日目の記事です｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://adventar.org/calendars/3536&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://adventar.org/og_image.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://adventar.org/calendars/3536&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WORDIAN Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;昨年大好評を博したWORDIAN Advent Calendarが今年もやってきました。編集部員、OBOG、または自分を編集部員だと思っている人などが記事を書きます。記事の内容はいつも通り自由。ただし、いつも通り学類長チェックは通るように努力しましょう。WORD編集部のサイト: https://www.word-ac.net/&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;12月2日といえば､翌3日は冴草きいちゃんの誕生日ですね!!!!!!!!!!!
めでたいですね｡
何度でも言うぞ｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;さて今回はWORD部員協賛のもと､&lt;a href=&quot;https://booth.pm/ja/items/1079687&quot;&gt;Lily58&lt;/a&gt;というキーボードを作りました｡&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://booth.pm/ja/items/1079687&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://booth.pximg.net/c/620x620/6e334015-e9eb-4311-ac3a-48e1336541e1/i/1079687/996c09f5-0458-4b58-9425-777d5d49f82c_base_resized.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://booth.pm/ja/items/1079687&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;【販売終了】Lily58 - Early Bird - liliums - BOOTH&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;※先行販売としての販売は終了致しました。以下のページにて後継モデルのLily58 Proの販売をしています。https://liliums.booth.pm/items/1175324 この商品ははんだ付けを必要とする組み立て式のキットです。 先行販売のベータ版のため予期せぬ不具合などが発生する可能性があります。また、今後販売予定の正式版と仕様が変更になる箇所が出る場合があります。御理解の上ご購入下さい。&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;寝ぼけてLily58ポチってしまった｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1063171636998754304?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;h1 id=&quot;%E6%9D%90%E6%96%99%E3%81%82%E3%81%A4%E3%82%81&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E6%9D%90%E6%96%99%E3%81%82%E3%81%A4%E3%82%81&quot;&gt;材料あつめ&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;上記のセットに加え､キースイッチとキーキャップを58個(とUSBケーブルとTRSケーブルを)揃える必要があります｡&lt;/p&gt;&lt;p&gt;WORD編集部室には3x3で全色異なるキースイッチのサンプルがあるので､お手元が寂しくなるとつい手を動かしてしまうW部員達には重宝されている｡
カチカチしまくった結果､緑軸が良いな〜と思ったので緑軸にしようとしたものの､ちょうどどこを探しても8000個から仕入れ可能みたいなものしかなかった｡
仕方がないので､遊舎工房でKailhのロープロ白軸を買った｡
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://yushakobo.jp/shop/pg1350/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://yushakobo.jp/wp-content/uploads/2018/05/20191227-109.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://yushakobo.jp/shop/pg1350/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kailhロープロファイルスイッチ（10個）&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;1パック10個入り&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;&lt;p&gt;カチカチとクリック感があり､青軸のようにうるさいのでパソコンカタカタオタク演ってる感がでて良いかな〜というのが選定理由だ｡&lt;/p&gt;&lt;h1 id=&quot;%E4%BD%9C%E3%82%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BD%9C%E3%82%8B&quot;&gt;作る&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;3月の引越しにつき祖父からもらったり実家からパチってきた激古はんだごてを全部捨ててしまったため､部員の&lt;a href=&quot;https://twitter.com/rizaudo&quot;&gt;@rizaudo&lt;/a&gt;氏にはんだごてを借り､ついでに編集部室で作業をおこなう｡&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kata0510/Lily58/blob/master/doc/buildguide_jp.md&quot;&gt;ビルドガイド&lt;/a&gt;にしたがって作っていく｡&lt;/p&gt;&lt;h2 id=&quot;pro+micro%E4%BA%8B%E4%BB%B61&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#pro+micro%E4%BA%8B%E4%BB%B61&quot;&gt;pro micro事件1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;が…&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;前回までのラブライブ！ 逆に取り付けたので半田吸い取り機を使おうとするも半壊しているのでトーストでハンダを溶かそうとするもまたもや失敗。 &lt;a href=&quot;https://t.co/cww2frd9vB&quot;&gt;pic.twitter.com/cww2frd9vB&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1064870457642442752?ref_src=twsrc%5Etfw&quot;&gt;November 20, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;ヘ タ ク ソ&lt;sup id=&quot;fnref1&quot; title=&quot;ビルドガイドがボクの失敗を見たためかどうか､失敗したポイントについて丁寧な解説が加えられている｡みなさんは私の屍を超えて失敗レスに作ることができます｡ &quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;トーストによるハンダクラックは無事失敗｡
部室にあったポンコツハンダ吸い取り器や､部員のハジョン氏にハンダ吸い取り線を借りるも難航｡
rizaudo氏や部室を常時警備している&lt;a href=&quot;https://twitter.com/akkkix&quot;&gt;@akkkix&lt;/a&gt;氏の協力のもとハンダを吸いまくるも取れる気配がない｡
&lt;a href=&quot;https://twitter.com/NTSC_J&quot;&gt;@NTSC_J&lt;/a&gt;氏にも部室にあるものよりも使えるハンダ吸い取り器を持ってきてもらい､交代しながらハンダを吸っていく｡&lt;/p&gt;&lt;p&gt;日が変わり､そして―&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;100年プロジェクトが完成した。 &lt;a href=&quot;https://t.co/dFbRgmX33e&quot;&gt;pic.twitter.com/dFbRgmX33e&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1064957919215538177?ref_src=twsrc%5Etfw&quot;&gt;November 20, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;およそ5時間経過し､pro microを取り出すことに成功した｡
作業員がこの時間で各々バイトをして発生した金で諸々買い直したほうが黒字だし早かったね､という話をした｡
たしかにこの時点で人件費が材料費を上回ってしまっている｡&lt;/p&gt;&lt;p&gt;くぅ〜疲れましたw これにてlily58完成です!
とはいかず…｡&lt;/p&gt;&lt;h2 id=&quot;pro+micro%E4%BA%8B%E4%BB%B62&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#pro+micro%E4%BA%8B%E4%BB%B62&quot;&gt;pro micro事件2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;基板に全部くっつけたのでファームウェア書き込んでおわりや!!
というところで片方に全然書き込めない｡
オーブンで焼いたほうは特定のキー列だけ入力を受け付けたり受け付けなかったりする｡&lt;/p&gt;&lt;p&gt;後者の問題はpro microを剥がしたときにランドが1つお亡くなりになったことに起因すると推理し､rizaudo氏がハンダを盛りまくることで導通してくれた｡
謝謝茄子｡&lt;/p&gt;&lt;p&gt;問題は前者である｡
pro microを使う他の自作キーボードを作ってるブログなどを見てみると､なんかpro microを非対称(?)に付ける必要があるっぽいな…???&lt;/p&gt;&lt;p&gt;(&lt;strong&gt;&lt;em&gt;作ってる時には説明なかった&lt;/em&gt;&lt;/strong&gt;)&lt;a href=&quot;https://github.com/kata0510/Lily58/blob/master/doc/buildguide_jp.md#pro-micro%E3%82%92%E3%81%AF%E3%82%93%E3%81%A0%E4%BB%98%E3%81%91%E3%81%99%E3%82%8B&quot;&gt;pro microを取り付ける部分&lt;/a&gt;はたしかになんか書いてありますねぇ!!&lt;/p&gt;&lt;p&gt;恐怖のハンダ吸いが再び始まり―&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;yaba&quot;&gt;&lt;/label&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85/pinsocket.png&quot; alt=&quot;やばい&quot; title=&quot;yabai&quot;&gt;
図&lt;a href=&quot;#yaba&quot;&gt;1&lt;/a&gt;
 ピンヘッダをなんとかしようとするrizaudoとakkkix&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;pro micro救出に成功 &lt;a href=&quot;https://t.co/h3GMcZt1NU&quot;&gt;pic.twitter.com/h3GMcZt1NU&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065120644726054912?ref_src=twsrc%5Etfw&quot;&gt;November 21, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;pro microを救いきれなかったので破棄そして新しいのを注文して明日再開…｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065133627883708417?ref_src=twsrc%5Etfw&quot;&gt;November 21, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;オワッ…&lt;/p&gt;&lt;p&gt;仕方がないのでハードウェア的に問題ない半分を完成させた｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;半分完成!!!（16時間経過） &lt;a href=&quot;https://t.co/MUhWVl3TEv&quot;&gt;pic.twitter.com/MUhWVl3TEv&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065115902633365504?ref_src=twsrc%5Etfw&quot;&gt;November 21, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;p&gt;早速&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B01M6WULAO/&quot;&gt;代打&lt;/a&gt;を注文し､激戦の翌々日に届き､ネタが割れてしまえば爆速で完成｡&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;lily58、pro microを一つ失って完成…!!!! &lt;a href=&quot;https://t.co/ybr8uP24Lo&quot;&gt;pic.twitter.com/ybr8uP24Lo&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065851007630888960?ref_src=twsrc%5Etfw&quot;&gt;November 23, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;&lt;h2 id=&quot;tips&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#tips&quot;&gt;tips&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ロープロファイルだとアクリル板を止めるネジの頭にキーキャップが当たるので､キーキャップをちょっと削る必要がある(図&lt;a href=&quot;#kezuri&quot;&gt;2&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;kezuri&quot;&gt;&lt;/label&gt;

&lt;p&gt;&lt;img src=&quot;/pictures/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85/kezuri.png&quot; alt=&quot;削る&quot; title=&quot;削る様子&quot;&gt;
図&lt;a href=&quot;#kezuri&quot;&gt;2&lt;/a&gt;
 削ったキーキャップ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;&lt;p&gt;そういえば昔WORDの記事でThinkPadのキートップを無刻印にすべくヤスリで削りまくった記憶がある｡
今回はカッターでゴリゴリ削ってしまっているが､コチラのほうがはるかに作業時間が短い｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;ハードウェアの実装は18時間くらいかかってしまった｡
ご協力大変感謝いたします｡&lt;/p&gt;&lt;h1 id=&quot;qmk+firmware&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#qmk+firmware&quot;&gt;qmk firmware&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;xmodmap%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#xmodmap%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B&quot;&gt;xmodmapとはなんだったのか&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;まずはこちらをご覧ください｡&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Nymphium/settings/blob/master/settingfiles/dots/.xmodmap&quot;&gt;settings/settingfiles/dots/.xmodmap&lt;/a&gt;&lt;/p&gt;&lt;p&gt;例えばキーボードの&lt;code&gt;3&lt;/code&gt;を押すと&lt;code&gt;3&lt;/code&gt;が入力され､&lt;code&gt;Shift&lt;/code&gt;も一緒に押すと&lt;code&gt;#&lt;/code&gt;が入力されたりする｡
&lt;code&gt;Shift&lt;/code&gt;のように､一緒におすとキーの入力が変わるのを修飾キーと呼びます｡
他にも&lt;code&gt;Ctrl&lt;/code&gt;も修飾キー｡
そしてアクセント記号付き文字を入力するための&lt;code&gt;AltGr&lt;/code&gt;というキーも存在しますが､概ね皆さんが使ってるキーボードには備わってません｡
xmodmapによってキーマップを変更し､&lt;code&gt;AltGr&lt;/code&gt;が使えるようになります｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;AltGr&lt;/code&gt;が使えるとどうなる?
修飾ない状態､&lt;code&gt;Shift&lt;/code&gt;修飾状態､&lt;code&gt;AltGr&lt;/code&gt;修飾状態､&lt;code&gt;AltGr + Shift&lt;/code&gt;修飾状態と1つのキー入力で最大4状態もたせる､つまり&lt;strong&gt;1つのキーと2つの修飾キーによって4通りの入力をおこなうことができる&lt;/strong&gt;｡&lt;/p&gt;&lt;p&gt;上記のキーマップでは&lt;code&gt;無変換&lt;/code&gt;を&lt;code&gt;AltGr&lt;/code&gt;にしてhjklで←↓↑→を入力できるようにしてます｡
これは&lt;em&gt;V&lt;/em&gt;の者にとっては非常に素晴らしいですね｡&lt;/p&gt;&lt;h3 id=&quot;%E5%9B%B0%E3%82%8B%E7%82%B9&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%9B%B0%E3%82%8B%E7%82%B9&quot;&gt;困る点&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;X11アプリケーションなのでX Window Systemが動いてないといけない｡
なのでWindowsとかXのない状況では諦めざるを得ない｡&lt;/p&gt;&lt;p&gt;もう一つ重大な問題としては､キーコードに対するマッピングでしかないということである｡
詳細は&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89&quot;&gt;ウィキピージャ&lt;/a&gt;見てください｡
なにかアプリケーションでキー入力を受け付けるとき､文字コードではなくキーコードを受け付けている場合非常に困る｡&lt;/p&gt;&lt;h2 id=&quot;%E3%81%9D%E3%81%93%E3%81%A7%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%9D%E3%81%93%E3%81%A7%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2&quot;&gt;そこでファームウェア&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;qmk_firmwareは名前の通りファームウェアでして､こいつを使うことでキースイッチの入力に対応する&lt;em&gt;キーコード&lt;/em&gt;をプログラムすることができる｡&lt;/p&gt;&lt;div class=&quot;github-widget&quot; data-repo=&quot;qmk/qmk_firmware&quot;&gt;&lt;/div&gt;&lt;p&gt;keyboards/以下に様々なキーボードのいろいろが突っ込まれてて正気の沙汰ではないですね｡
サブモジュールって知ってますか?&lt;/p&gt;&lt;p&gt;qmkにはレイヤという概念があり､上記の&lt;code&gt;AltGr&lt;/code&gt;のような事を､レイヤを切り替えることによって実現している｡
このレイヤはユーザによっていっぱい作れるので､様々なレイヤを定義､しよう｡&lt;/p&gt;&lt;p&gt;そしてボクのキーマップはこんな感じになった｡&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Nymphium/qmk_firmware/blob/nymphium/keyboards/lily58/keymaps/nymphium/keymap.c&quot;&gt;https://github.com/Nymphium/qmk_firmware/blob/nymphium/keyboards/lily58/keymaps/nymphium/keymap.c&lt;/a&gt;&lt;/p&gt;&lt;p&gt;キーマップのレイヤごとにAAを書くというのが習慣らしい｡
たしかに分かりやすい(実際の設定と一致してれば)｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* DEFAULT
 * ,-----------------------------------------.                    ,-----------------------------------------.
 * | ESC  |   1  |   2  |   3  |   4  |   5  |                    |   6  |   7  |   8  |   9  |   0  |      |
 * |------+------+------+------+------+------|                    |------+------+------+------+------+------|
 * | Tab  |   Q  |   W  |   E  |   R  |   T  |                    |   Y  |   U  |   I  |   O  |  P   |      |
 * |------+------+------+------+------+------|                    |------+------+------+------+------+------|
 * |Enter |   A  |   S  |   D  |   F  |   G  |-------.    ,-------|   H  |   J  |   K  |   L  |Muhen |      |
 * |------+------+------+------+------+------|  Y    |    |   B   |------+------+------+------+------+------|
 * |LShift|   Z  |   X  |   C  |   V  |   B  |-------|    |-------|   N  |   M  |      |      |      |MOUSE |
 * `-----------------------------------------/       /     \      \-----------------------------------------'
 *                   |Super | LAlt |LOWER | / Space /       \ BSPC \  | Ctrl |MOUSE |Wdeflt|
 *                   |      |      |      |/       /         \      \ |      |      |      |
 *                   `----------------------------'           '------''--------------------'
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;レイヤごとにキーコードを割り当てられる｡
これはデフォルトレイヤーで次が上記のxmodmapのキーマップにおける&lt;code&gt;AltGr&lt;/code&gt;を押した状態になる｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;lower_layer&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lower_layer&quot;&gt;3&lt;/a&gt;
. LOWERレイヤ&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* LOWER
 * ,-----------------------------------------.                    ,-----------------------------------------.
 * |      | F1  |  F2  |  F3  |  F4  |  F5   |                    |      |  [   |   ]  | F12  |      |      |
 * |------+-----+------+------+------+-------|                    |------+------+------+------+------+------|
 * |      |  @  |  +   | ESC  |  ;   |  ^    |                    |      |  .   |  ,   | HOME | END  |      |
 * |------+-----+------+------+------+-------|                    |------+------+------+------+------+------|
 * |      |  -  |   %  |  \   |  /   |  '    |-------.    ,-------| Left | Down |  Up  |Right |Henkan|      |
 * |------+-----+------+------+------+-------|       |    |       |------+------+------+------+------+------|
 * |      | F6  |  F7  |  F8  |  F9  | F10   |-------|    |-------| F11  | PgDn | PgUp |      |      |      |
 * `-----------------------------------------/       /     \      \-----------------------------------------'
 *                   |      |      |      | /       /       \Delete\  |      |      |      |
 *                   |      |      |      |/       /         \      \ |      |      |      |
 *                   `----------------------------'           '------''--------------------'
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;qmkはマウスのエミュレーションができる｡
これはAAを用意してないんで実際の実装になっており､&lt;code&gt;LAYOUT&lt;/code&gt;マクロに渡されているのはそれぞれキーコードに対応する｡
&lt;code&gt;_______&lt;/code&gt;は1つ前のレイヤのキーコードを参照する｡&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_MOUSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LAYOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;KC_MS_L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_MS_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_MS_U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_MS_R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                             &lt;span class=&quot;n&quot;&gt;KC_BTN1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_BTN3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_BTN2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHEEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; \
&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;%E3%82%AD%E3%83%BC%E5%85%A5%E5%8A%9B%E5%87%A6%E7%90%86&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%AD%E3%83%BC%E5%85%A5%E5%8A%9B%E5%87%A6%E7%90%86&quot;&gt;キー入力処理&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;キー入力を&lt;code&gt;process_record_user&lt;/code&gt;という関数で処理することができる｡
レイヤ切り替えは&lt;code&gt;custom_keycode&lt;/code&gt;というenumで新しく追加したレイヤ切り替え専用のキーコードの入力を&lt;code&gt;process_record_user&lt;/code&gt;で処理する(プログラム&lt;a href=&quot;#process_record_user&quot;&gt;4&lt;/a&gt;
)｡&lt;/p&gt;&lt;p&gt;&lt;label id=&quot;process_record_user&quot;&gt;&lt;/label&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#process_record_user&quot;&gt;4&lt;/a&gt;
. process_record_user&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_record_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keycode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyrecord_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keycode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ......&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layer_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layer_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;register_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;layer_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layer_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;unregister_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ......&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_GRV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_EQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_ASTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;unregister_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;keycode&lt;/code&gt;は文字通りキーコード､&lt;code&gt;record&lt;/code&gt;は入力してるときの状態を表し､&lt;code&gt;record-&amp;gt;event.pressed&lt;/code&gt;でキーを押下したかどうかのブールを取れる｡
関数の中を見てみると､&lt;code&gt;keycode&lt;/code&gt;でswitchして入力内容で分岐する｡&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;#lower_layer&quot;&gt;LOWERレイヤ&lt;/a&gt;
への切り替えは､&lt;code&gt;layer_on(_LOWER)&lt;/code&gt;と&lt;code&gt;layer_off(_LOWER)&lt;/code&gt;のあたりでおこなっている｡
&lt;code&gt;LOWER+Shift&lt;/code&gt;の修飾では第3のレイヤ&lt;code&gt;_LSHIFT&lt;/code&gt;になる｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;KC_LSFT&lt;/code&gt;というキーコードが&lt;code&gt;Shift&lt;/code&gt;にあたる｡
&lt;code&gt;Shift+0&lt;/code&gt;を押すと&lt;code&gt;?&lt;/code&gt;が出て欲しいなど､一部&lt;code&gt;Shift&lt;/code&gt;による修飾で送出される文字を変更したかったがお手軽な方法が一見してなさそうだった｡
そのため､&lt;code&gt;Shift&lt;/code&gt;用に新たにレイヤを追加した｡
また一部キーは&lt;code&gt;Shift&lt;/code&gt;修飾を外さないと意図した入力がおこなわれないため､&lt;code&gt;unregister_code(KC_LSFT)&lt;/code&gt;で&lt;code&gt;Shift&lt;/code&gt;の修飾を取り消している｡&lt;/p&gt;&lt;p&gt;&lt;code&gt;process_record_user&lt;/code&gt;の戻り値は長押しキーリピートするかどうかである｡&lt;/p&gt;&lt;h1 id=&quot;%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%89%80%E6%84%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%89%80%E6%84%9F&quot;&gt;使ってみての所感&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;白軸カチャカチャして楽しい｡
慣れるとだいぶ快適だし､Windowsでも使えるようにちょっとした工夫もしているためWindowsでも快適な入力ができる｡
ウィンドウマネージャが変更できてフォントも綺麗に表示されてWSLがちゃんと動いてアレしてコレしたらWindowsでも快適に開発できそうですね!&lt;/p&gt;&lt;p&gt;ハードウェア的なところとしては概ね満足ですが､キーボードが格子状なのは慣れの問題なのか､なかなか打ちづらい｡
あとパームレストがないと親指がキートップのエッジのせいでちょっと痛くなる｡
というか上の行がちょっと打ちづらい?
ともかくパームレストは遭ったほうが良いなこれは｡&lt;/p&gt;&lt;hr&gt;&lt;p&gt;これでボクがArchを使ってから愛用してきた秘伝の.xmodmapをファームウェアレベルでエミュレーションできたんじゃないでしょうか｡
とはいえキーボードを持ち運ぶのはだるいので､基本的には在宅ワークするときやお家でツイッタ〜するときのみ活躍します｡&lt;/p&gt;&lt;p&gt;他にも状態のトグルなどちょっとした知見がコードに溜まってるので､qmk_firmwareを使ってなにかする人は上記のソースを見てみてください｡&lt;/p&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;ビルドガイドがボクの失敗を見たためかどうか､失敗したポイントについて丁寧な解説が加えられている｡みなさんは私の屍を超えて失敗レスに作ることができます｡ &lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85.html</guid>
        
        <category>WORD</category>
        
        <category>自作キーボード</category>
        
        <category>lily58</category>
        
        <category>qmk_firmware</category>
        
        <category>xmodmap</category>
        
        
      </item>
    
  </channel>
</rss>
