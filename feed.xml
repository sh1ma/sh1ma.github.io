<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lilyum ensemble</title>
    <description>lily, Aikatsu, Programming language, and more</description>
    <link>https://nymphium.github.io/</link>
    <atom:link href="https://nymphium.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Jan 2019 02:17:03 +0900</pubDate>
    <lastBuildDate>Tue, 15 Jan 2019 02:17:03 +0900</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Asymmetric CoroutinesによるOneshot Algebraic Effectsの実装</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これは&lt;a href=&quot;https://qiita.com/advent-calendar/2018/lang_dev&quot;&gt;言語実装Advent Calendar 2018&lt;/a&gt;の9日目の記事です｡
最初は “変数が全部箱の言語の設計と実装” と題して全部optionにくるまれてる参照とかそういう感じの何かを作ろうとしたけど多分面白くなくなって筆者の熱も醒めると思ったのでやめた｡
またそうこうしてるうちに良い感じのものが作れたので､論理的背景を整理するためにも内容を再考して今回のような内容となりました｡
ほならね早速いってみましょう｡&lt;/p&gt;
&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Algebraic effects and handlers(以降 “algebraic effects” と省略)は､いわば限定継続を取れる例外である｡
try節をdelimiterとし､例外発生位置から残りの計算を限定継続として受け取り､継続をもちいて例外から復帰したり､単に継続を捨てて例外として扱うこともできる｡
最近各所で注目されており､組み込みの言語機能やライブラリとしていくつか提供されている｡
しかし､強力なコントロールオペレータとしての様々な使用が期待される一方､実装はそれほど多くないのが難点である｡&lt;/p&gt;
&lt;p&gt;Asymmetric coroutinesは､コントロール抽象化機構の一つであり､ノンプリエンプティブなマルチタスクをおこなうことができる｡
Lua､Rubyなどの言語機能またはライブラリとして提供されており､様々な場面で使うことができる｡
一方コントロールオペレータとして扱うには操作が低級であり､スパゲッティコードになりがちである｡&lt;/p&gt;
&lt;p&gt;本稿では､oneshot algebraic effectsからasymmetric coroutinesへの変換､つまり､asymmetric coroutinesによる､継続の使用をワンショットに制限したalgebraic effectsの実装を考える｡
これによりalgebraic effectsをよりカジュアルにあつかえるようになり､さらにasymmetric coroutinesよりも高級なコントロールの操作により､コードを簡潔に書くことが期待される｡&lt;/p&gt;
&lt;p&gt;コントロールオペレータとしてのasymmetric coroutinesについて述べ､asymmetric coroutinesとoneshot algebraic effectsとの関係について述べる｡
余力があれば実際に変換を考え､変換を元にした実装を眺める｡
変換の正しさについては証明はないため､読者への課題､あるいは筆者の研究の一環とする｡&lt;/p&gt;
&lt;p&gt;本稿の実装はLuaのモジュールとして公開してある｡
お手元にご用意したりして本稿をお楽しみください｡&lt;/p&gt;
&lt;p&gt;&lt;label id=&quot;repo&quot;&gt;&lt;/label&gt;
&lt;/p&gt;&lt;div class=&quot;github-widget&quot; data-repo=&quot;Nymphium/eff.lua&quot;&gt;&lt;/div&gt;
&lt;h1 id=&quot;2.+algebraic+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+algebraic+effects&quot;&gt;2. algebraic effects&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;これについては直近でそこそこ話したので､&lt;a href=&quot;/2018/08/13/algebraic_effects_tutorial.html&quot;&gt;あれ&lt;/a&gt;とか&lt;a href=&quot;/pdf/mlday2.html&quot;&gt;これ&lt;/a&gt;とか&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot;&gt;それ&lt;/a&gt;とかをご参照ください｡&lt;/p&gt;
&lt;h2 id=&quot;2-1.+Core+Eff&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+Core+Eff&quot;&gt;2-1. Core Eff&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今回は1つのハンドラでハンドルできるエフェクトは1つというCore Effという言語を考える(図&lt;a href=&quot;#ce-syn&quot;&gt;2.1&lt;/a&gt;)｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot; title=&quot;Kiselyov, Oleg, and Kc Sivaramakrishnan. “Eff directly in OCaml.(2016).” ACM SIGPLAN Workshop on ML. 2016. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;を参考にした｡&lt;/p&gt;
&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;ce-syn&quot;&gt;&lt;/label&gt;
\[
\begin{array}{rrl}
  x &amp;amp; \in &amp;amp; \text{\textit{Variables}}\\
  \text{\textit{eff}} &amp;amp; \in &amp;amp; \text{\textit{Effects}}\\
  v &amp;amp; ::= &amp;amp; x \mid h \mid \lambda x. e \mid \mathtt{perform}\ \text{\textit{eff}}\ v \\
  e &amp;amp; ::= &amp;amp; v \mid v\ v \mid \mathtt{let}\ x=e\ \mathtt{in}\ e\\
    &amp;amp;\mid &amp;amp; \mathtt{inst}\ \left(\right) \mid \mathtt{with}\ h\ \mathtt{handle}\ e \\
  h &amp;amp; ::= &amp;amp; \mathtt{handler}\ v\ \left(\mathtt{val}\ x \rightarrow e\right)\ \left(\left(x, k\right)\rightarrow e\right)
\end{array}

\]
図&lt;a href=&quot;#ce-syn&quot;&gt;2.1&lt;/a&gt;. the syntax of Core Eff
&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;ラムダ計算に&lt;code&gt;let&lt;/code&gt;が付いて､あとはalgebraic effects関連の項が追加されている｡
&lt;code&gt;inst ()&lt;/code&gt;でエフェクトインスタンスを生成する｡
エフェクトインスタンスは任意のエフェクト定義に対応する｡
例えば&lt;code&gt;State&lt;/code&gt;モナドっぽい&lt;code&gt;State&lt;/code&gt;エフェクトを定義するとなどきに､ハンドラと対応するエフェクトを一意に定められるという点とか各所メリットがある｡
&lt;code&gt;perform eff e&lt;/code&gt;は引数&lt;code&gt;e&lt;/code&gt;を渡しエフェクト&lt;code&gt;eff&lt;/code&gt;を発生する｡
&lt;code&gt;handler eff vh effh&lt;/code&gt;でエフェクト&lt;code&gt;eff&lt;/code&gt;のハンドラを定義する｡
&lt;code&gt;vh&lt;/code&gt;はvalue handlerとなり､ハンドラがエフェクトをハンドルしきって値を返すときにvalue handlerによりハンドルした値を返す｡
&lt;code&gt;effh&lt;/code&gt;はエフェクトの引数と継続を取る｡&lt;/p&gt;
&lt;p&gt;ハンドルできるエフェクトが少ないため一見して弱くなったか? と思うがそんなことはない｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot; title=&quot;Kiselyov, Oleg, and Kc Sivaramakrishnan. “Eff directly in OCaml.(2016).” ACM SIGPLAN Workshop on ML. 2016. &quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;ではエフェクトにADTを渡してハンドラ内でさらにパターンマッチする方法で事実上n個のエフェクトをハンルするようにしている｡&lt;/p&gt;
&lt;p&gt;意味論に関してはっきりと示せる自信がない(面倒くさいとも言う)のと､後述のように継続の使用回数を制限するので省略します｡
&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot; title=&quot;Bauer, Andrej, and Matija Pretnar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming 84.1 (2015): 108-123. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;にあるような､よくあるcall by valueの体系を想定している｡
次の例題で雰囲気を掴んでもらいたい｡&lt;/p&gt;
&lt;h2 id=&quot;2-2.+%E4%BE%8B%E9%A1%8C&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-2.+%E4%BE%8B%E9%A1%8C&quot;&gt;2-2. 例題&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* instantiate *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* choose left *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* returns `8` *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;突然tupleが出てきましたが､純真な心で呼んでみてください｡
&lt;code&gt;inst ()&lt;/code&gt;が返す値はeffect instancesの中でuniqueならなんでもいい｡
ハンドラ&lt;code&gt;lh&lt;/code&gt;を定義する｡
エフェクトハンドラ&lt;code&gt;((l, r), k) -&amp;gt; k l&lt;/code&gt;を見ると､&lt;code&gt;(l, r)&lt;/code&gt;というtupleを受け取って継続&lt;code&gt;k&lt;/code&gt;に&lt;code&gt;l&lt;/code&gt;だけ渡して&lt;code&gt;r&lt;/code&gt;は捨てる｡&lt;/p&gt;
&lt;h2 id=&quot;2-3.+oneshot+algebraic+effects&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-3.+oneshot+algebraic+effects&quot;&gt;2-3. oneshot algebraic effects&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今回はさらに､継続の使用を高々1回に制限する｡
マイナーな言語機能でさらに制限を加えてしまっているが､例えば&lt;a href=&quot;http://ocamllabs.io/doc/multicore.html&quot;&gt;Multicore OCaml&lt;/a&gt;は原則的に継続の使用は1回に制限されている&lt;sup id=&quot;fnref3&quot; title=&quot;むしろ他に継続がワンショットのalgebraic effectsを知りませんが…｡あとMulticore OCamlにはObj.clone_continuationという継続を複製する関数が用意されており､ランタイムにコストを支払うことで継続を2回以上使うことができる｡ &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;｡
例えば次のような例(コード&lt;a href=&quot;#ng-twice&quot;&gt;2.2&lt;/a&gt;)はNGにしたい｡
continuationを2回使ってはいけない(戒め)｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;コード&lt;a href=&quot;#ng-twice&quot;&gt;2.2&lt;/a&gt;. NG: using &lt;em&gt;k&lt;/em&gt; twice&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* NG!!! 2回使うな!!! *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Affine typesなどにより継続を2回使う箇所を検出したいが､それはまたいつかお話しましょう｡
高級な型システムでなくても､継続に適当な型を付けてdef-use chainを使えばヒューリスティックに解決できそうですね｡&lt;/p&gt;
&lt;p&gt;今回は継続を2回以上使ってはいけない&lt;em&gt;お約束&lt;/em&gt;しかないので誰も注意してくれない｡
そのため我々が注意するしかない｡&lt;/p&gt;
&lt;p&gt;継続が1回しか使えないのはmultishot(ノーマルな) algebraic effectsと比較すると真にパワーが弱くなっている｡
とはいえ継続を2回も使う必要のない場面&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot; title=&quot;Dolan, Stephen, et al. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming. Springer, Cham, 2017. &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;が多く､継続がワンショットであることを前提にするとパフォーマンスの良い実装ができる&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot; title=&quot;Bruggeman, Carl, Oscar Waddell, and R. Kent Dybvig. “Representing control in the presence of one-shot continuations.” ACM SIGPLAN Notices. Vol. 31. No. 5. ACM, 1996. &quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn6&quot; rel=&quot;footnote&quot; title=&quot;Dolan, Stephen, et al. “Effective concurrency through algebraic effects.” OCaml Workshop. 2015. &quot; id=&quot;fnref6&quot;&gt;6&lt;/a&gt;]&lt;/span&gt;｡&lt;/p&gt;
&lt;h1 id=&quot;3.+asymmetric+coroutines&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+asymmetric+coroutines&quot;&gt;3. asymmetric coroutines&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;3-1.+asymmetric%3F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-1.+asymmetric%3F&quot;&gt;3-1. asymmetric?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;非常に簡単に説明すると､みなさんがお使いのコルーチンは概ねasymmetric coroutineです｡
Asymmetric coroutineがあるのでsymmetric coroutineももちろん存在する｡
Asymmetric coroutinesは対象のコルーチンへ&lt;em&gt;飛ぶ&lt;/em&gt;操作resumeと操作してるコルーチンから&lt;em&gt;戻る&lt;/em&gt;操作yieldの2つを持つ｡
一方symmetric coroutinesはコントロールを移すという唯一の操作controlのみを持ちます(表&lt;a href=&quot;#tbl-cor&quot;&gt;3.1&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl-cor&quot;&gt;&lt;/label&gt;
表&lt;a href=&quot;#tbl-cor&quot;&gt;3.1&lt;/a&gt;. the comparision of a?symmetric coroutines

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;
&lt;strong&gt;&lt;em&gt;a&lt;/em&gt;&lt;/strong&gt;symmetric coroutines&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;symmetric coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;control manipuration&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;resume, yield&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;conttrol&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Asymmetric coroutinesはresumeで呼び出す呼び出し側と､呼び出される側という呼ぶ呼ばれるの関係がコルーチン(とメインスレッド)間にあるのが特徴となっている｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;example.lua&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;--[[ prints
a
 1
b
c
 2
d
 3
--]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;なるほど､&lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt;｡&lt;/p&gt;
&lt;h2 id=&quot;3-2.+%CE%BB%3Csub%3Ecor%3C%2Fsub%3E%0A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-2.+%CE%BB%3Csub%3Ecor%3C%2Fsub%3E%0A&quot;&gt;3-2. λ&lt;sub&gt;cor&lt;/sub&gt;
&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Luaだとちょっと大きすぎるし扱いづらいため､変換のための小さな計算体系として\(\lambda_{\text{\textit{cor}}}\)を考える(図&lt;a href=&quot;#lcor-syn&quot;&gt;3.2&lt;/a&gt;)｡&lt;/p&gt;
&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;lcor-syn&quot;&gt;&lt;/label&gt;
\[
\begin{array}{rrl}
  x &amp;amp; \in &amp;amp; \text{\textit{Variables}}\\
  K &amp;amp; \in &amp;amp; \{\text{\textit{Eff}}, \text{\textit{Val}}, \text{\textit{UncaughtEff}}\} \text{ // constructors} \\
  \text{\textit{eff}} &amp;amp; \in &amp;amp; \text{\textit{Effects}}\\
  v &amp;amp; ::= &amp;amp; x \mid \lambda x. e\\
  e &amp;amp; ::= &amp;amp; v \mid e\ e \mid \mathtt{let}\ x = e\ \mathtt{in}\ e \mid \mathtt{inst}\ \left(\right) \\
    &amp;amp; \mid&amp;amp; \mathtt{match}\ e\ \mathtt{with}\ \overrightarrow{case} \\
    &amp;amp; \mid&amp;amp; \mathtt{create}\ e \mid \mathtt{resume}\ e\ e \mid \mathtt{yield}\ e \text{ // coroutine manipurations} \\
  case    &amp;amp; ::= &amp;amp; K\ x \rightarrow e \mid K\ x\ \textit{when}\ e = e \rightarrow e \\
  letrec &amp;amp; ::= &amp;amp; \mathtt{let}\ \mathtt{rec}\ f\ x = e\ mutrec\\
  mutrec &amp;amp; ::= &amp;amp; \mathtt{and}\ f\ x = e \mid \mathtt{in}\ e
\end{array}
\]
図&lt;a href=&quot;#lcor-syn&quot;&gt;3.2&lt;/a&gt;. the syntax of \(\lambda_{\text{\textit{cor}}}\)
&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;こちらも筆者が疲れたので意味論はフィーリングで行く｡
すまんが&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn7&quot; rel=&quot;footnote&quot; title=&quot;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &quot; id=&quot;fnref7&quot;&gt;7&lt;/a&gt;]&lt;/span&gt;を参照されたし｡
ランタイムにラベルストアなどを用意してがちゃがちゃやっていく感じ｡&lt;/p&gt;
&lt;p&gt;構成員としては､ラムダ計算にくわえ､&lt;code&gt;let&lt;/code&gt;式､(相互)再帰､ADTとパターンマッチに加え､コルーチンの操作&lt;code&gt;create&lt;/code&gt; &lt;code&gt;resume&lt;/code&gt; &lt;code&gt;yield&lt;/code&gt;がある｡
各エフェクトを一意にするために&lt;code&gt;inst ()&lt;/code&gt;もそのまま持ってきている｡
小さくなるよう努力したものの､依然としてゴタゴタしているのはひとえに筆者の力不足である｡&lt;/p&gt;
&lt;p&gt;ところで上記のプログラムは書けるのだろうか?
&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;mutual referring(なんて言うのか?) objectをmutual recursionでなんとかできる? できない? 今の脳の稼働率ではわからん｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1070882855582986241?ref_src=twsrc%5Etfw&quot;&gt;December 7, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;変換のターゲットとしてコルーチンが出てくるため､上記のようなプログラムは\(\lambda_{\text{\textit{cor}}}\)では書けなくても問題はないので問題ない｡&lt;/p&gt;
&lt;h2 id=&quot;3-3.+asymmetric+coroutines+and+oneshot+continuation&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-3.+asymmetric+coroutines+and+oneshot+continuation&quot;&gt;3-3. asymmetric coroutines and oneshot continuation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Asymmetric coroutinesは強力なコントロールオペレータであり､まずsymmetric coroutinesを模倣することができ､のみならずcall/1ccもasymmetric coroutinesにより実装することができる&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn7&quot; rel=&quot;footnote&quot; title=&quot;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &quot; id=&quot;fnref7&quot;&gt;7&lt;/a&gt;]&lt;/span&gt;｡
call/1ccとは､継続の実行が高々1回に制限されているcall/ccである｡&lt;/p&gt;
&lt;p&gt;オッoneshotnessが出てきた｡
これはcontinuationがコルーチンに対応し､コルーチンは状態を複製する操作が基本的に提供されてないためである｡
したがってコルーチンの状態を複製する操作が追加されない限りは､コルーチンで継続をエミュレーションするときは基本的にワンショットである(表&lt;a href=&quot;#tbl-cont-cor&quot;&gt;3.3&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl-cont-cor&quot;&gt;&lt;/label&gt;
表&lt;a href=&quot;#tbl-cont-cor&quot;&gt;3.3&lt;/a&gt;. the correspondence between continuations and asymmetric coroutines

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;continuations&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;asymmetric coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;continuation object&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;function&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;coroutine thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;run continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;call function&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;suspend&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;waste continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;h2 id=&quot;%E3%82%B3%E3%83%A9%E3%83%A0%3A+JavaScript%E3%81%AEgenerator&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%B3%E3%83%A9%E3%83%A0%3A+JavaScript%E3%81%AEgenerator&quot;&gt;コラム: JavaScriptのgenerator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ES2015からgeneratorというものが追加された｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: 3, done: false }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: 5, done: false }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: 0, done: true }&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { value: undefined, done: true }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おっこれはasymmetric coroutineか? と一瞬錯覚するが､実はasymmetric coroutinesよりも表現力が低い｡
理由は簡単､&lt;code&gt;yield&lt;/code&gt;はgenerator &lt;strong&gt;リテラル&lt;/strong&gt;の直下にしか書けないためである｡
つまり以下のようなことがsyntacticに書けない｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yieldf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;yieldf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;yieldf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
const yieldf = x =&amp;gt; yield x;
                          ^

SyntaxError: Unexpected identifier
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;筆者の推理としては､(おそらく)asymmetric coroutinesをCPSで表現するのは難しいが､
JSのgeneratorなら多分CPS変換できるので､babelなどによるES2015以前のJSへのコンパイルが可能になるからではないかと考えられる｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;JSのgeneratorってそうかyieldをgnerator関数の直下にしかかけないから継続の実行がワンショットのCPSに変換できるんだな。babel的な理由でcoroutineにしなかったんだろうか。&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1069176528032849923?ref_src=twsrc%5Etfw&quot;&gt;December 2, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;ところで､generatorも(おそらく)状態を複製する操作が用意されてないので､変換先のCPSの継続はワンショットになるはずである｡&lt;/p&gt;
&lt;h1 id=&quot;4.+oneshot+algebraic+effects+%E2%86%92+asymmetric+coroutines&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+oneshot+algebraic+effects+%E2%86%92+asymmetric+coroutines&quot;&gt;4. oneshot algebraic effects → asymmetric coroutines&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Core Effから\(\lambda_{\text{\textit{cor}}}\)への変換､つまり言語Aから言語Bへの変換なのでコンパイルですね｡本稿の変換の実装はすなわちコンパイラになります｡
言語実装アドベントカレンダーにふさわしいですね｡
本稿では変換の実装はしないので読者の課題あるいは筆者の研究の一環です｡&lt;/p&gt;
&lt;h2 id=&quot;4-1.+%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AA%E5%AF%BE%E5%BF%9C&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-1.+%E7%9B%B4%E6%84%9F%E7%9A%84%E3%81%AA%E5%AF%BE%E5%BF%9C&quot;&gt;4-1. 直感的な対応&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;筆者は直観で実装してしまったので､とりあえず直感的なところからかためていく｡
方針としてはこんな感じになるだろうか(表&lt;a href=&quot;#tbl-aeac&quot;&gt;4.1&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;tbl-aeac&quot;&gt;&lt;/label&gt;
表&lt;a href=&quot;#tbl-aeac&quot;&gt;4.1&lt;/a&gt;. the intuitional correspondence between (oneshot ) algebraic effects and asymmetric coroutines

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: left&quot;&gt;(oneshot) algebraic effects&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;asymmetric coroutines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;handler&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;(&lt;code&gt;create&lt;/code&gt; &amp;amp; &lt;code&gt;resume&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;perform&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;coroutine thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: left&quot;&gt;run continuation&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;resume&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;ハンドラは対応が取りづらいので曖昧になっている｡
ハンドラの動作を思い出そう｡
エフェクトインスタンス､value handler, effect handlerを受け取ったらthunkを取ってそのthunkをハンドラでハンドルする､という動作である｡
thunk内でエフェクトを発生(&lt;code&gt;yield&lt;/code&gt;)すると一時停止してハンドラに操作が移ってほしい､とするとthunkをコルーチンでencapsulateして即実行､という流れになる｡
なのでとりあえず&lt;code&gt;create&lt;/code&gt; &amp;amp; &lt;code&gt;resume&lt;/code&gt;としてある｡&lt;/p&gt;
&lt;h2 id=&quot;4-2.+%E5%A4%89%E6%8F%9B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4-2.+%E5%A4%89%E6%8F%9B&quot;&gt;4-2. 変換&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;%E8%BF%BD%E8%A8%9820181209&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181209&quot;&gt;追記20181209&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;投稿即バグが見つかり泣きました｡
まずは修正前をご覧ください｡
追記suspend&lt;/p&gt;
&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv&quot;&gt;&lt;/label&gt;
\[
\begin{array}{c}
  \left[\left[e_{ce}\right]\right]\eta = e_{\lambda \textit{cor}}\\
  \ \\
  \text{  // $c$ is anything to run coroutine at first, like \textit{nil}, $\left(\right)$, etc.}\\
  \begin{aligned}
    \left[\left[x\right]\right]\eta &amp;amp;= \eta(x) \\
    \left[\left[\textit{eff}\right]\right]\eta &amp;amp;= \textit{eff}\\
    \left[\left[\lambda x. e\right]\right]\eta &amp;amp;= \lambda x’. \left[\left[e\right]\right]\eta\left[x\mapsto x’\right] \\
    \left[\left[\mathtt{let}\ x = e\ \mathtt{in}\ e’\right]\right]\eta &amp;amp;= \mathtt{let}\ x’ = \left[\left[e\right]\right]\eta\ \mathtt{in}\ \left[\left[e’\right]\right]\eta\left[x\mapsto x’\right]\\
    \left[\left[v_1\ v_2\right]\right]\eta &amp;amp;= \left(\left[\left[v_1\right]\right]\eta\right) \ \left(\left[\left[v_2\right]\right]\eta\right) \\
    \left[\left[\mathtt{inst}\ \left(\right)\right]\right]\eta &amp;amp;= \mathtt{inst}\ \left(\right)\\
    \left[\left[\mathtt{perform}\ \text{\textit{eff}}\ v\right]\right]\eta &amp;amp;= \mathtt{yield}\ \left(\text{\textit{Eff}}\left(\left[\left[\textit{eff}\right]\right]\eta, \left[\left[v\right]\right]\eta\right)\right)\\
    \left[\left[\mathtt{with}\ h\ \mathtt{handle}\ e\right]\right]\eta &amp;amp;= \left[\left[h\right]\right]\eta\ \left(\lambda c. \left[\left[e\right]\right]\eta\right)\\
    \left[\left[\mathtt{handler}\ \textit{eff}\ (\mathtt{val}\ x\rightarrow e_v) \ \left(\left(x, k\right) \rightarrow e_{\textit{eff}}\right) \right]\right]\eta%
                                                                   &amp;amp;= \\
                                                                   &amp;amp; \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
                                                                   &amp;amp; \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta\left[x \mapsto x’\right] \ \mathtt{in}\\
                                                                   &amp;amp; \mathtt{let}\ \textit{effh} = \lambda x’\ k’. \left[\left[e_{\textit{eff}}\right]\right]\eta\left[x \mapsto x’, k \mapsto k’\right]\ \mathtt{in}\\
                                                                   &amp;amp; \lambda \textit{th}.\\
                                                                   &amp;amp; \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in} \\
                                                                   &amp;amp; \quad  \mathtt{let\ rec}\ \textit{handle}\ r =\\
                                                                   &amp;amp; \qquad \mathtt{match}\ r\ \mathtt{with}\\
                                                                   &amp;amp; \qquad \mid \textit{Eff}\ \left(\textit{eff’}, v\right)\ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow\\
                                                                   &amp;amp; \qquad \quad \textit{effh}\ v\ (\lambda \textit{arg}.\\
                                                                   &amp;amp; \qquad \quad \mathtt{let}\ \textit{ret} =\textit{continue}\ \textit{arg}\ \mathtt{in}\\
                                                                   &amp;amp; \qquad \quad (\mathtt{match}\ \textit{ret}\ \mathtt{with}\\
                                                                   &amp;amp; \qquad \quad \mid \textit{Val}\ \text{\textunderscore} \rightarrow \textit{ret}\\
                                                                   &amp;amp; \qquad \quad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \textit{ret}))\\
                                                                   &amp;amp; \qquad \mid \textit{Eff}\ \left(\text{\textunderscore}, \text{\textunderscore}\right)\rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\ \left(r, \textit{continue}\right)\right)\\
                                                                   &amp;amp; \qquad \mid \textit{UncaughtEff}\ \left(\textit{Eff}\ \left(\textit{eff’}, v\right) , k\right) \ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow \\
                                                                   &amp;amp; \qquad \quad \textit{effh}\ v\ (\lambda \textit{arg}.\\
                                                                   &amp;amp; \qquad \qquad \mathtt{let}\ \textit{ret} = k\ \textit{arg} \ \mathtt{in}\\
                                                                   &amp;amp; \qquad \qquad \textit{continue}\ (\mathtt{match}\ \textit{ret} \ \mathtt{with}\\
                                                                   &amp;amp; \qquad \qquad \mid \textit{Val}\ \text{\textunderscore} \rightarrow \textit{ret}\\
                                                                   &amp;amp; \qquad \qquad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \textit{ret}))\\
                                                                   &amp;amp; \qquad \mid \textit{UncaughtEff}\ (\textit{effv’}, k’) \rightarrow\\ 
                                                                   &amp;amp; \qquad \qquad \mathtt{yield}\ (\textit{UncaughtEff}\ (\textit{effv’}, \lambda \textit{arg}.\\
                                                                   &amp;amp; \qquad \qquad \quad \mathtt{let}\ \textit{ret} = k’\ \textit{arg} \ \mathtt{in}\\
                                                                   &amp;amp; \qquad \qquad \quad \textit{continue}\ (\mathtt{match}\ \textit{ret} \ \mathtt{with}\\
                                                                   &amp;amp; \qquad \qquad \quad \mid \textit{Val}\ \text{\textunderscore} \rightarrow \textit{ret}\\
                                                                   &amp;amp; \qquad \qquad \quad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \textit{ret}))) \\
                                                                   &amp;amp; \qquad \mid \text{\textunderscore} \rightarrow \textit{Val}\ \left(\textit{vh}\ r\right)\\
                                                                   &amp;amp; \quad  \mathtt{and}\ \textit{continue}\ \textit{arg} =\\
                                                                   &amp;amp; \qquad \text{ // 追記20181209 resumeにcoを渡し忘れてたのを修正 } \\
                                                                   &amp;amp; \qquad \mathtt{let}\ r = \mathtt{resume}\ \textit{co}\ \textit{arg}\ \mathtt{in}\\
                                                                   &amp;amp; \qquad \mathtt{match}\ r\ \mathtt{with}\\
                                                                   &amp;amp; \qquad \mid \textit{Val}\ v \rightarrow v\\
                                                                   &amp;amp; \qquad \mid \text{\textunderscore} \rightarrow \textit{handle}\ r\\
                                                                   &amp;amp; \quad  \mathtt{in}\\
                                                                   &amp;amp; \quad  \mathtt{match}\ \textit{continue}\ c\ \mathtt{with} \\
                                                                   &amp;amp; \quad  \mid \textit{Val}\ v \rightarrow v\\
                                                                   &amp;amp; \quad  \mid r \rightarrow r\\
  \end{aligned}
\end{array}
\]
図&lt;a href=&quot;#conv&quot;&gt;4.2&lt;/a&gt;. the conversion \(\left[\left[e_{ce}\right]\right] = e_{\lambda_{\textit{cor}}}\)
&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;handler&lt;/code&gt;長すぎんじゃボケー!!!&lt;/em&gt;&lt;/strong&gt;
ただの実装やろがい!!!
散々引っ張っておいて大変申し訳無いが､今の所スッキリできそうにないので勘弁してもらいたい｡
さらに見返してみるとなんだか洗練されてない｡
もう少しCPSっぽく書ける部分がたしかにあり､そうすれば末尾呼び出しになって良いことがありそうだが､筆者はCPSで実装を試みたところバグバグになって一回諦めているため､読者への課題としたい｡
CPSにすればvalue handlerを複数使ってしまうのを防ぐための&lt;code&gt;Val&lt;/code&gt;コンストラクタが不要になるだろう｡&lt;/p&gt;
&lt;p&gt;メタの話はこの程度にして､内容を見てみよう｡
&lt;code&gt;handler&lt;/code&gt;以外はだいたいふ〜んて感じで､&lt;code&gt;perform&lt;/code&gt;も表&lt;a href=&quot;#tbl-aeac&quot;&gt;4.1&lt;/a&gt;でぼんやりと考えたとおりに&lt;code&gt;yield&lt;/code&gt;に対応している｡&lt;/p&gt;
&lt;p&gt;問題は爆発している&lt;code&gt;handler&lt;/code&gt;である｡
thunkを受け取ってコルーチンを作り､&lt;code&gt;resume&lt;/code&gt;のラッパーとなっている&lt;code&gt;continue&lt;/code&gt;を走らせてるので､なるほど&lt;code&gt;create&lt;/code&gt; &amp;amp; &lt;code&gt;resume&lt;/code&gt;である｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;handler&lt;/code&gt;の内部の&lt;code&gt;handle&lt;/code&gt;が一番仕事してる雰囲気を出している｡
&lt;code&gt;handle&lt;/code&gt;は&lt;code&gt;contiue&lt;/code&gt;からのみ呼ばれており､呼び出し時に&lt;code&gt;resume&lt;/code&gt;の戻り値､つまり&lt;code&gt;yield&lt;/code&gt;に渡された引数かコルーチンでencapsulateされた関数の戻り値である｡
&lt;code&gt;Val&lt;/code&gt;以外でコルーチンから戻ってくるものとなると､&lt;code&gt;yield&lt;/code&gt;は&lt;code&gt;perform&lt;/code&gt;だから&lt;code&gt;Eff&lt;/code&gt;だな｡&lt;/p&gt;
&lt;p&gt;そして&lt;code&gt;Eff(eff', v)&lt;/code&gt;の&lt;code&gt;eff'&lt;/code&gt;がハンドルすべきエフェクト&lt;code&gt;eff&lt;/code&gt;の場合は&lt;code&gt;effh&lt;/code&gt;によって処理をおこなっている｡
&lt;code&gt;effh&lt;/code&gt;に渡される第2引数は限定継続であるが､ここでは&lt;code&gt;continue&lt;/code&gt;をさらにラップして&lt;code&gt;Val&lt;/code&gt;タグを剥がしている｡
ハンドルしないエフェクトの場合は&lt;code&gt;UncaughtEff&lt;/code&gt;にエフェクトと継続を渡して&lt;strong&gt;&lt;code&gt;yield&lt;/code&gt;している&lt;/strong&gt;｡
これによって一つ外側のハンドラにエフェクトを飛ばしているのである｡
だからさっき述べた&lt;code&gt;continue&lt;/code&gt;内の&lt;code&gt;resume&lt;/code&gt;が返すのは関数の戻り値と&lt;code&gt;Eff&lt;/code&gt;だけでなく&lt;code&gt;UncaughtEff&lt;/code&gt;もある｡&lt;/p&gt;
&lt;p&gt;では&lt;code&gt;handle&lt;/code&gt;内で&lt;code&gt;UncaughtEff&lt;/code&gt;をハンドルしてる部分を見る｡
だいたい同じ要領だが､&lt;code&gt;effh&lt;/code&gt;に渡している継続は様子がちょっとちがう｡
&lt;code&gt;UncaughtEff&lt;/code&gt;は継続を一緒にもってくるので､まずこれを走らせる｡
そして継続の戻り値をさらに&lt;em&gt;現在の&lt;/em&gt;継続に渡して現在の継続を走らせる｡
ハンドルできない&lt;code&gt;UncaughtEff&lt;/code&gt;の場合も面白い｡
さらに外側のハンドラにエフェクトの処理をまかせたいので同様に&lt;code&gt;UncaughtEff&lt;/code&gt;を&lt;code&gt;yield&lt;/code&gt;で飛ばしている｡
ただし&lt;code&gt;UncaughtEff&lt;/code&gt;に渡している継続は､渡ってきた継続の結果をさらに現在の継続に渡している｡
つまりこれは継続をネストさせている｡
ますますCPSで実装したくなりますね｡
実装に自信ニキはよろしくお願いします｡
脳が発光しますね｡&lt;/p&gt;
&lt;p&gt;最後に&lt;code&gt;Val&lt;/code&gt;が来た場合､中身を剥がしてvalue handlerに突っ込んでいる｡
型がない世界でよかったですね｡&lt;/p&gt;
&lt;h2 id=&quot;%E8%BF%BD%E8%A8%9820181209+resume&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181209+resume&quot;&gt;追記20181209 resume&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多分これが一番正しいと思います｡&lt;/p&gt;
&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv2&quot;&gt;&lt;/label&gt;
\[
\begin{array}{c}
  \left[\left[e_{ce}\right]\right]\eta = e_{\lambda \textit{cor}}\\
  \ \\
  \begin{aligned}
      &amp;amp;\left[\left[\mathtt{handler}\ \textit{eff}\ (\mathtt{val}\ x\rightarrow e_v) \ \left(\left(x, k\right) \rightarrow e_{\textit{eff}}\right) \right]\right]\eta%
      = \\
      &amp;amp;\qquad \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
      &amp;amp;\qquad \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta\left[x \mapsto x’\right] \ \mathtt{in}\\
      &amp;amp;\qquad \mathtt{let}\ \textit{effh} = \lambda x’\ k’. \left[\left[e_{\textit{eff}}\right]\right]\eta\left[x \mapsto x’, k \mapsto k’\right]\ \mathtt{in}\\
      &amp;amp;\qquad \lambda \textit{th}.\\
      &amp;amp;\qquad \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in} \\
      &amp;amp;\qquad \quad  \mathtt{let\ rec}\ \textit{handle}\ r =\\
      &amp;amp;\qquad \qquad \mathtt{match}\ r\ \mathtt{with}\\
      &amp;amp;\qquad \qquad \mid \textit{Eff}\ \left(\textit{eff’}, v\right)\ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \textit{continue}\\
      &amp;amp;\qquad \qquad \mid \textit{Eff}\ \left(\text{\textunderscore}, \text{\textunderscore}\right)\rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\ \left(r, \textit{continue}\right)\right)\\
      &amp;amp;\qquad \qquad \mid \textit{UncaughtEff}\ \left(\textit{Eff}\ \left(\textit{eff’}, v\right) , k\right) \ \textit{when}\ \textit{eff’} = \textit{eff} \rightarrow \\
      &amp;amp;\qquad \qquad \quad \textit{effh}\ v\ \left(\lambda \textit{arg}. \textit{handle}\ \left(\mathtt{resume}\ \left(\mathtt{create}\ k\right)\ \mathtt{arg}\right)\right)\\
      &amp;amp;\qquad \qquad \mid \textit{UncaughtEff}\ \left(\textit{effv’}, k\right) \rightarrow\\ 
      &amp;amp;\qquad \qquad \qquad \mathtt{yield}\ \left(\textit{UncaughtEff}\ \left(\textit{effv’}, \lambda \textit{arg}. \textit{handle}\ \left(\mathtt{resume}\ \left(\mathtt{create}\ k\right)\ \mathtt{arg}\right)\right)\right)\\
      &amp;amp;\qquad \qquad \mid \text{\textunderscore\ /* ANY value */} \rightarrow \textit{vh}\ r\\
      &amp;amp;\qquad \quad  \mathtt{and}\ \textit{continue}\ \textit{arg} = \textit{handle}\ \left(\mathtt{resume}\ \textit{co}\ \textit{arg}\right)\\
      &amp;amp;\qquad \quad  \mathtt{in}\\
      &amp;amp;\qquad \quad  \textit{continue}\ c
  \end{aligned}
\end{array}
\]
図&lt;a href=&quot;#conv2&quot;&gt;4.3&lt;/a&gt;. the revision of the conversion
&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;handler&lt;/code&gt;だけの変更だが､だいぶダイエットに成功した｡
&lt;code&gt;Val&lt;/code&gt;タグはそもそも不要だったことがわかった｡
&lt;code&gt;UncaughtEff&lt;/code&gt;をハンドルしてる部分も様子が変わっている｡
&lt;code&gt;UncaughtEff&lt;/code&gt;が持ってきた継続をコルーチンでencapsulateして即走らせ､その値を&lt;code&gt;handle&lt;/code&gt;に渡す､という関数を&lt;code&gt;effh&lt;/code&gt;に継続として渡している｡
&lt;code&gt;continue&lt;/code&gt;を見るとだいたい同じことをやっており､encapsulateしない場合コルーチンを突き抜けて&lt;code&gt;yield&lt;/code&gt;してしまうパターンがあった｡
また現在の継続は&lt;code&gt;handle&lt;/code&gt;が内部で&lt;code&gt;continue&lt;/code&gt;を呼んでくれるため､わざわざ&lt;code&gt;continue&lt;/code&gt;を引っ張る必要はなく､走らせる継続の戻り値は&lt;code&gt;handle&lt;/code&gt;でハンドルするという元からの考えを使えばいいだけだった｡
操作を継続の中に押し込んでいく感じが､なんとなく&lt;code&gt;Functor Free&lt;/code&gt;を思わせる｡&lt;/p&gt;
&lt;p&gt;追記おわり&lt;/p&gt;
&lt;h1 id=&quot;%E8%BF%BD%E8%A8%9820181216&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181216&quot;&gt;追記20181216&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;さらに大学のゼミ発表などを経てコンパクトになりました｡&lt;/p&gt;
&lt;div&gt;
&lt;center&gt;
&lt;label id=&quot;conv3&quot;&gt;&lt;/label&gt;
\[
\begin{aligned}
  &amp;amp;\left[\left[\mathrm{handler}\ \textit{eff}\ \left(\mathtt{val}\ x \rightarrow e_v\right)\ \left(\left(x, k\right) \rightarrow e_\textit{eff}\right)\right]\right]\eta = \\
  &amp;amp; \qquad \mathtt{let}\ \textit{eff} = \left[\left[\textit{eff}\right]\right]\eta\ \mathtt{in}\\
  &amp;amp; \qquad \mathtt{let}\ \textit{vh} = \lambda x’. \left[\left[e_v\right]\right]\eta \left[x \mapsto x’\right]\ \mathtt{in}\\
  &amp;amp; \qquad \mathtt{let}\ \textit{effh} = \lambda x’\, k’. \left[\left[e_\textit{eff}\right]\right]\eta \left[x\mapsto x’, k \mapsto k’\right] \mathtt{in}\\
  &amp;amp; \qquad \lambda \textit{th}.\\
  &amp;amp; \qquad \quad \mathtt{let}\ \textit{co} = \mathtt{create}\ \textit{th}\ \mathtt{in}\\
  &amp;amp; \qquad \quad \mathtt{let}\ \mathtt{rec}\ \textit{handle}\ r =\\
  &amp;amp; \qquad \qquad \mathtt{match}\ r\ \mathtt{with}\\
  &amp;amp; \qquad \qquad \mid \textit{Eff}\left(\textit{eff’}, v\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{continue}\ \textit{co}\right)\\
  &amp;amp; \qquad \qquad \mid \textit{Eff}\left(\text{\textunderscore}, \text{\textunderscore}\right) \rightarrow \mathtt{yield}\ \left(\textit{UncaughtEff}\left(r, \left(\textit{continue}\ \textit{co}\right)\right)\right)\\
  &amp;amp; \qquad \qquad \mid \textit{UncaughtEff}\left(\textit{Eff}\left(\textit{eff’}, v\right), k\right)\ \mathtt{when}\ \textit{eff’} = \textit{eff} \rightarrow \textit{effh}\ v\ \left(\textit{continue}\ \left(\mathtt{create}\ k\right)\right)\\
  &amp;amp; \qquad \qquad \mid \textit{UncaughtEff}(\textit{effv}, k) \rightarrow \mathtt{yield}\ (\textit{UncaughtEff}\left(\textit{effv}, \left(\textit{continue}\ \left(\mathtt{create}\ k\right)\right)\right))\\
  &amp;amp; \qquad \qquad \mid \text{\textunderscore} \rightarrow \textit{vh}\ r\\
  &amp;amp; \qquad \quad \mathtt{and}\ \textit{conrtinue}\ \textit{co}\ \textit{arg} = \textit{handle}\ \left(\mathtt{resume}\ \textit{co}\ \textit{arg}\right)\\
  &amp;amp; \qquad \quad \mathtt{in}\ \textit{continue}\ \textit{co}\ \textit{c}
\end{aligned}
\]
図&lt;a href=&quot;#conv3&quot;&gt;4.4&lt;/a&gt;. the conversion v3.
&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#conv2&quot;&gt;4.3&lt;/a&gt;とは本質的に何も変わってません｡
&lt;code&gt;continue&lt;/code&gt;を汎用的なものにした｡
これにより､処理がどうなってるかがより簡潔になったんじゃないでしょうか｡
&lt;code&gt;handle&lt;/code&gt;を連れ回すことで現在のハンドラによるハンドル処理を続けることができる｡
&lt;code&gt;UncaughtEff&lt;/code&gt;に渡す継続をコルーチンでencapsulateするのは､エフェクトの発生(&lt;code&gt;yield&lt;/code&gt;)を再びキャッチするためである｡&lt;/p&gt;
&lt;h1 id=&quot;5.+%E5%AE%9F%E8%A3%85&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E5%AE%9F%E8%A3%85&quot;&gt;5. 実装&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;それでは改めて&lt;a href=&quot;#repo&quot;&gt;リポジトリ&lt;/a&gt;の方を見てみよう｡
Asymmetric coroutinesと非常に縁の深いLuaにより実装した｡
本稿で変換を改めて考えるにあたり､バグが複数発見､修正された｡
フィーリングの脆さと簡単なモデルに落として内容をしっかり検討することの重要さを再確認した｡&lt;/p&gt;
&lt;p&gt;実装は図&lt;a href=&quot;#conv&quot;&gt;4.2&lt;/a&gt;とほとんど同じである｡
なんといっても順番が逆で､実装が先にあり､図&lt;a href=&quot;#conv&quot;&gt;4.2&lt;/a&gt;は実装をもとに書き下したためである｡
しかしLuaはclassもADTもないし関数リテラルが冗長､文志向なので&lt;code&gt;return&lt;/code&gt;必須といろいろしんどいところがあった｡&lt;/p&gt;
&lt;p&gt;本稿の変換と異なる点は､ハンドラが多値に対応している点である｡
…というのは半分ウソというか､Multicore OCamlではtupleで表現するところを､tableでガッとやるのではなく可変長引数や多値などといったLuaの持ち味を活かすための細工をおこなった｡
多値を引き回すのは面倒なので､ハンドラに渡ってきた多値をtableに押し込み､実際に使われるタイミングで&lt;code&gt;unpack&lt;/code&gt;によって多値に戻している｡
この操作のため､effect handlerの引数の順序が&lt;code&gt;(value, continuation)&lt;/code&gt;から&lt;code&gt;(continuation, value...)&lt;/code&gt;と逆になっている｡
多値については&lt;a href=&quot;/2018/11/16/Lua-VM%E3%81%AB%E8%A6%8B%E3%82%8B%E5%A4%9A%E5%80%A4%E3%81%AE%E6%89%B1%E3%81%84.html&quot;&gt;こちら&lt;/a&gt;を参照…とおもったけど多値を返す関数の呼び出しをそのまま関数の引数の位置に書いた場合についてはあまりふれられてませんね｡
Lua VM的な説明をすると､引数の末尾位置に多値を返す関数の呼び出しを書かないと､1引数分､つまり1レジスタしか関数の戻り値を受けるレジスタが用意されないためである｡&lt;/p&gt;
&lt;p&gt;最初期からフィーリングで突っ走っており､&lt;code&gt;UncaughtEff&lt;/code&gt;相当のことを､赤ちゃんでも思いつくような､例外処理機によって実装していた｡
OCamlのように代数的な例外がないのも相まって散々な目にあったが､部分的にはalgebraic effectsを実装していた｡
例外のハンドリングは一般にコストフル&lt;sup id=&quot;fnref8&quot; title=&quot;例外処理のある言語は概ねモダンであり､モダンな言語は比較的親切であり､親切な言語はエラーを吐くとスタックトレースを出してくれる｡ この新設のためにスタックトレースを記録するので遅くなる｡gotoとしての例外おおいに結構しかしパフォーマンスとしっかり勘案すること｡ &quot;&gt;&lt;a href=&quot;#fn8&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;であり､Luaもご多分に漏れず遅い｡
コントロールを全てコルーチンの操作だけでおこなった場合と例外でぴょんぴょんする場合のパフォーマンスを比較してみたいが､まぁ半分ナンセンスだし半分は筆者のやる気不足なので､多分速くなってるだろうということで終わる｡&lt;/p&gt;
&lt;h2 id=&quot;5-1.+%E3%83%87%E3%83%A2&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5-1.+%E3%83%87%E3%83%A2&quot;&gt;5-1. デモ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;皆さん大好き&lt;a href=&quot;https://github.com/Nymphium/eff.lua/blob/master/example/shiftreset.lua&quot;&gt;multiprompt shift/resetが実装できる&lt;/a&gt;｡
ただしエフェクトハンドラの継続をそのままつかっているので､継続の使用は高々1回に制限されている｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shift0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Shift0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shift0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shift0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プロンプトごとに&lt;code&gt;Shift0&lt;/code&gt;エフェクトインスタンスを作っている｡
&lt;code&gt;handler&lt;/code&gt;がそのまんまdelimiterになってるのがいいよね｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sr0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift0_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;io.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;--[[ prints
Hello
World?
--]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;だいぶ自然に書けているんじゃないでしょうか｡&lt;/p&gt;
&lt;p&gt;エフェクトの抽象化､実装の分離…&lt;a href=&quot;https://github.com/Nymphium/eff.lua/blob/master/example/typeclass.lua&quot;&gt;型クラス&lt;/a&gt;か?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- list map&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lmaph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;newt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lmaph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- string map&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smaph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gmatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;smaph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Functorっぽいものを書いてるなと思ったが&lt;code&gt;smaph&lt;/code&gt;をみると全然そんなことなく､自分でも困惑した｡
Luaは残念ながら型のない世界なのでなんでもアリである｡&lt;/p&gt;
&lt;h1 id=&quot;6.+%E9%96%A2%E9%80%A3%E7%A0%94%E7%A9%B6&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E9%96%A2%E9%80%A3%E7%A0%94%E7%A9%B6&quot;&gt;6. 関連研究&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Koka言語などをやっていってるDaan氏によりC言語によるalgebraic effectsの実装&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn9&quot; rel=&quot;footnote&quot; title=&quot;Leijen, Daan. “Implementing Algebraic Effects in C.” Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. &quot; id=&quot;fnref9&quot;&gt;9&lt;/a&gt;]&lt;/span&gt;がおこなわれている｡
本稿と比較すると1ハンドラ1エフェクトや継続がワンショットなどの制限ががない一方､非常にユーザーアンフレンドリーな構文となっている｡
そのためP言語などのコンパイラのターゲットという位置づけがなされている｡
本稿では式指向の言語での変換をおこなっており､\(\lambda_{\textit{cor}}\)相当をサブセットとして持つ言語ならばsyntacticな辛さはない､と思う｡&lt;/p&gt;
&lt;h1 id=&quot;7.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#7.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;7. おわりに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本稿ではoneshot algebraic effectsからasymmetric coroutinesへの変換を提示した｡
この変換を用いることで､asymmetric coroutinesを持つ言語でoneshot algebraic effectsを使用することが可能になる｡
本稿ではすでにLuaによる実装を与えており､Luaはalgebraic effects-readyな状態となっている｡&lt;/p&gt;
&lt;p&gt;ただし本稿の変換の正しさについては証明されていない｡
いまのところ “なんとなくうごいてる” 状態であり､とりあえずテストに&lt;a href=&quot;https://github.com/ocamllabs/ocaml-effects-tutorial&quot;&gt;Multicore OCamlのチュートリアル&lt;/a&gt;&lt;a href=&quot;https://github.com/Nymphium/eff.lua/tree/master/test&quot;&gt;を実装する&lt;/a&gt;ことで正しく動いてそうなことを確認している｡
未来のボクや､読者のみなさんに託されています｡
2019年には本稿の変換の証明､あるいは間違った部分の指摘などが湧き出ることを願っている｡&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Kiselyov, Oleg, and Kc Sivaramakrishnan. “Eff directly in OCaml.(2016).” ACM SIGPLAN Workshop on ML. 2016. &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Bauer, Andrej, and Matija Pretnar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming 84.1 (2015): 108-123. &lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;むしろ他に継続がワンショットのalgebraic effectsを知りませんが…｡あとMulticore OCamlには&lt;code&gt;Obj.clone_continuation&lt;/code&gt;という継続を複製する関数が用意されており､ランタイムにコストを支払うことで継続を2回以上使うことができる｡ &lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;Dolan, Stephen, et al. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming. Springer, Cham, 2017. &lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Bruggeman, Carl, Oscar Waddell, and R. Kent Dybvig. “Representing control in the presence of one-shot continuations.” ACM SIGPLAN Notices. Vol. 31. No. 5. ACM, 1996. &lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn6&quot;&gt;
&lt;p&gt;Dolan, Stephen, et al. “Effective concurrency through algebraic effects.” OCaml Workshop. 2015. &lt;a href=&quot;#fnref6&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn7&quot;&gt;
&lt;p&gt;Moura, Ana Lúcia De, and Roberto Ierusalimschy. “Revisiting coroutines.” ACM Transactions on Programming Languages and Systems (TOPLAS) 31.2 (2009): 6. &lt;a href=&quot;#fnref7&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn8&quot;&gt;
&lt;p&gt;例外処理のある言語は概ねモダンであり､モダンな言語は比較的親切であり､親切な言語はエラーを吐くとスタックトレースを出してくれる｡ この新設のためにスタックトレースを記録するので遅くなる｡gotoとしての例外おおいに結構しかしパフォーマンスとしっかり勘案すること｡ &lt;a href=&quot;#fnref8&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn9&quot;&gt;
&lt;p&gt;Leijen, Daan. “Implementing Algebraic Effects in C.” Asian Symposium on Programming Languages and Systems. Springer, Cham, 2017. &lt;a href=&quot;#fnref9&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 09 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/12/09/asymmetric-coroutines%E3%81%AB%E3%82%88%E3%82%8Boneshot-algebraic-effects%E3%81%AE%E5%AE%9F%E8%A3%85.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/12/09/asymmetric-coroutines%E3%81%AB%E3%82%88%E3%82%8Boneshot-algebraic-effects%E3%81%AE%E5%AE%9F%E8%A3%85.html</guid>
        
        <category>Lua</category>
        
        <category>Coroutines</category>
        
        <category>Algebraic Effects</category>
        
        <category>Advent Calendar</category>
        
        
      </item>
    
      <item>
        <title>Lily58による.xmodmapのハードウェア実装</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
これはWORDIAN Advent Calendar 2018の2日目の記事です｡&lt;/p&gt;
&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://adventar.org/calendars/3536&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://adventar.org/assets/icon200-7c9a9308860c3a9cc64fa22b75f92d1401579db156cb9eb3ac39173c31e10282.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://adventar.org/calendars/3536&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WORDIAN Advent Calendar 2018 - Adventar&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;昨年大好評を博したWORDIAN Advent Calendarが今年もやってきました。編集部員、OBOG、または自分を編集部員だと思っている人などが記事を書きます。記事の内容はいつも通り自由。ただし、いつも通り学類長チェックは通るように努力しましょう。WORD編集部のサイト: https://www.word-ac.net/&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;12月2日といえば､翌3日は冴草きいちゃんの誕生日ですね!!!!!!!!!!!
めでたいですね｡
何度でも言うぞ｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;さて今回はWORD部員協賛のもと､&lt;a href=&quot;https://booth.pm/ja/items/1079687&quot;&gt;Lily58&lt;/a&gt;というキーボードを作りました｡&lt;/p&gt;
&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://booth.pm/ja/items/1079687&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://booth.pximg.net/c/620x620/6e334015-e9eb-4311-ac3a-48e1336541e1/i/1079687/996c09f5-0458-4b58-9425-777d5d49f82c_base_resized.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://booth.pm/ja/items/1079687&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;【販売終了】Lily58 - Early Bird - liliums - BOOTH&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;※先行販売としての販売は終了致しました。冬コミにて正式版のLily58をリリース予定です。BOOTHでの通販は年明け後を予定しております。 この商品ははんだ付けを必要とする組み立て式のキットです。 先行販売のベータ版のため予期せぬ不具合などが発生する可能性があります。また、今後販売予定の正式版と仕様が変更になる箇所が出る場合があります。御理解の上ご購入下さい。&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;寝ぼけてLily58ポチってしまった｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1063171636998754304?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h1 id=&quot;%E6%9D%90%E6%96%99%E3%81%82%E3%81%A4%E3%82%81&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E6%9D%90%E6%96%99%E3%81%82%E3%81%A4%E3%82%81&quot;&gt;材料あつめ&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;上記のセットに加え､キースイッチとキーキャップを58個(とUSBケーブルとTRSケーブルを)揃える必要があります｡&lt;/p&gt;
&lt;p&gt;WORD編集部室には3x3で全色異なるキースイッチのサンプルがあるので､お手元が寂しくなるとつい手を動かしてしまうW部員達には重宝されている｡
カチカチしまくった結果､緑軸が良いな〜と思ったので緑軸にしようとしたものの､ちょうどどこを探しても8000個から仕入れ可能みたいなものしかなかった｡
仕方がないので､遊舎工房でKailhのロープロ白軸を買った｡
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://yushakobo.jp/shop/pg1350/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://yushakobo.jp/wp-content/uploads/2018/05/YKB0003S.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://yushakobo.jp/shop/pg1350/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kailhロープロファイルスイッチ&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;1パック10個入り&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;カチカチとクリック感があり､青軸のようにうるさいのでパソコンカタカタオタク演ってる感がでて良いかな〜というのが選定理由だ｡&lt;/p&gt;
&lt;h1 id=&quot;%E4%BD%9C%E3%82%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BD%9C%E3%82%8B&quot;&gt;作る&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;3月の引越しにつき祖父からもらったり実家からパチってきた激古はんだごてを全部捨ててしまったため､部員の&lt;a href=&quot;https://twitter.com/rizaudo&quot;&gt;@rizaudo&lt;/a&gt;氏にはんだごてを借り､ついでに編集部室で作業をおこなう｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kata0510/Lily58/blob/master/doc/buildguide_jp.md&quot;&gt;ビルドガイド&lt;/a&gt;にしたがって作っていく｡&lt;/p&gt;
&lt;h2 id=&quot;pro+micro%E4%BA%8B%E4%BB%B61&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#pro+micro%E4%BA%8B%E4%BB%B61&quot;&gt;pro micro事件1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;が…&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;前回までのラブライブ！ 逆に取り付けたので半田吸い取り機を使おうとするも半壊しているのでトーストでハンダを溶かそうとするもまたもや失敗。 &lt;a href=&quot;https://t.co/cww2frd9vB&quot;&gt;pic.twitter.com/cww2frd9vB&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1064870457642442752?ref_src=twsrc%5Etfw&quot;&gt;November 20, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;ヘ タ ク ソ&lt;sup id=&quot;fnref1&quot; title=&quot;ビルドガイドがボクの失敗を見たためかどうか､失敗したポイントについて丁寧な解説が加えられている｡みなさんは私の屍を超えて失敗レスに作ることができます｡ &quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;トーストによるハンダクラックは無事失敗｡
部室にあったポンコツハンダ吸い取り器や､部員のハジョン氏にハンダ吸い取り線を借りるも難航｡
rizaudo氏や部室を常時警備している&lt;a href=&quot;https://twitter.com/akkkix&quot;&gt;@akkkix&lt;/a&gt;氏の協力のもとハンダを吸いまくるも取れる気配がない｡
&lt;a href=&quot;https://twitter.com/NTSC_J&quot;&gt;@NTSC_J&lt;/a&gt;氏にも部室にあるものよりも使えるハンダ吸い取り器を持ってきてもらい､交代しながらハンダを吸っていく｡&lt;/p&gt;
&lt;p&gt;日が変わり､そして―&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;100年プロジェクトが完成した。 &lt;a href=&quot;https://t.co/dFbRgmX33e&quot;&gt;pic.twitter.com/dFbRgmX33e&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1064957919215538177?ref_src=twsrc%5Etfw&quot;&gt;November 20, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;およそ5時間経過し､pro microを取り出すことに成功した｡
作業員がこの時間で各々バイトをして発生した金で諸々買い直したほうが黒字だし早かったね､という話をした｡
たしかにこの時点で人件費が材料費を上回ってしまっている｡&lt;/p&gt;
&lt;p&gt;くぅ〜疲れましたw これにてlily58完成です!
とはいかず…｡&lt;/p&gt;
&lt;h2 id=&quot;pro+micro%E4%BA%8B%E4%BB%B62&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#pro+micro%E4%BA%8B%E4%BB%B62&quot;&gt;pro micro事件2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基板に全部くっつけたのでファームウェア書き込んでおわりや!!
というところで片方に全然書き込めない｡
オーブンで焼いたほうは特定のキー列だけ入力を受け付けたり受け付けなかったりする｡&lt;/p&gt;
&lt;p&gt;後者の問題はpro microを剥がしたときにランドが1つお亡くなりになったことに起因すると推理し､rizaudo氏がハンダを盛りまくることで導通してくれた｡
謝謝茄子｡&lt;/p&gt;
&lt;p&gt;問題は前者である｡
pro microを使う他の自作キーボードを作ってるブログなどを見てみると､なんかpro microを非対称(?)に付ける必要があるっぽいな…???&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;&lt;em&gt;作ってる時には説明なかった&lt;/em&gt;&lt;/strong&gt;)&lt;a href=&quot;https://github.com/kata0510/Lily58/blob/master/doc/buildguide_jp.md#pro-micro%E3%82%92%E3%81%AF%E3%82%93%E3%81%A0%E4%BB%98%E3%81%91%E3%81%99%E3%82%8B&quot;&gt;pro microを取り付ける部分&lt;/a&gt;はたしかになんか書いてありますねぇ!!&lt;/p&gt;
&lt;p&gt;恐怖のハンダ吸いが再び始まり―&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;yaba&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85/pinsocket.png&quot; alt=&quot;やばい&quot; title=&quot;yabai&quot;&gt;
図&lt;a href=&quot;#yaba&quot;&gt;1&lt;/a&gt; ピンヘッダをなんとかしようとするrizaudoとakkkix

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;pro micro救出に成功 &lt;a href=&quot;https://t.co/h3GMcZt1NU&quot;&gt;pic.twitter.com/h3GMcZt1NU&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065120644726054912?ref_src=twsrc%5Etfw&quot;&gt;November 21, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;pro microを救いきれなかったので破棄そして新しいのを注文して明日再開…｡&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065133627883708417?ref_src=twsrc%5Etfw&quot;&gt;November 21, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;オワッ…&lt;/p&gt;
&lt;p&gt;仕方がないのでハードウェア的に問題ない半分を完成させた｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;半分完成!!!（16時間経過） &lt;a href=&quot;https://t.co/MUhWVl3TEv&quot;&gt;pic.twitter.com/MUhWVl3TEv&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065115902633365504?ref_src=twsrc%5Etfw&quot;&gt;November 21, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;早速&lt;a href=&quot;https://www.amazon.co.jp/gp/product/B01M6WULAO/&quot;&gt;代打&lt;/a&gt;を注文し､激戦の翌々日に届き､ネタが割れてしまえば爆速で完成｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;lily58、pro microを一つ失って完成…!!!! &lt;a href=&quot;https://t.co/ybr8uP24Lo&quot;&gt;pic.twitter.com/ybr8uP24Lo&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1065851007630888960?ref_src=twsrc%5Etfw&quot;&gt;November 23, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h2 id=&quot;tips&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#tips&quot;&gt;tips&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ロープロファイルだとアクリル板を止めるネジの頭にキーキャップが当たるので､キーキャップをちょっと削る必要がある(図&lt;a href=&quot;#kezuri&quot;&gt;2&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;kezuri&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85/kezuri.png&quot; alt=&quot;削る&quot; title=&quot;削る様子&quot;&gt;
図&lt;a href=&quot;#kezuri&quot;&gt;2&lt;/a&gt; 削ったキーキャップ

&lt;p&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;そういえば昔WORDの記事でThinkPadのキートップを無刻印にすべくヤスリで削りまくった記憶がある｡
今回はカッターでゴリゴリ削ってしまっているが､コチラのほうがはるかに作業時間が短い｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ハードウェアの実装は18時間くらいかかってしまった｡
ご協力大変感謝いたします｡&lt;/p&gt;
&lt;h1 id=&quot;qmk+firmware&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#qmk+firmware&quot;&gt;qmk firmware&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;xmodmap%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#xmodmap%E3%81%A8%E3%81%AF%E3%81%AA%E3%82%93%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B&quot;&gt;xmodmapとはなんだったのか&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;まずはこちらをご覧ください｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Nymphium/settings/blob/master/settingfiles/dots/.xmodmap&quot;&gt;settings/settingfiles/dots/.xmodmap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例えばキーボードの&lt;code&gt;3&lt;/code&gt;を押すと&lt;code&gt;3&lt;/code&gt;が入力され､&lt;code&gt;Shift&lt;/code&gt;も一緒に押すと&lt;code&gt;#&lt;/code&gt;が入力されたりする｡
&lt;code&gt;Shift&lt;/code&gt;のように､一緒におすとキーの入力が変わるのを修飾キーと呼びます｡
他にも&lt;code&gt;Ctrl&lt;/code&gt;も修飾キー｡
そしてアクセント記号付き文字を入力するための&lt;code&gt;AltGr&lt;/code&gt;というキーも存在しますが､概ね皆さんが使ってるキーボードには備わってません｡
xmodmapによってキーマップを変更し､&lt;code&gt;AltGr&lt;/code&gt;が使えるようになります｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AltGr&lt;/code&gt;が使えるとどうなる?
修飾ない状態､&lt;code&gt;Shift&lt;/code&gt;修飾状態､&lt;code&gt;AltGr&lt;/code&gt;修飾状態､&lt;code&gt;AltGr + Shift&lt;/code&gt;修飾状態と1つのキー入力で最大4状態もたせる､つまり&lt;strong&gt;1つのキーと2つの修飾キーによって4通りの入力をおこなうことができる&lt;/strong&gt;｡&lt;/p&gt;
&lt;p&gt;上記のキーマップでは&lt;code&gt;無変換&lt;/code&gt;を&lt;code&gt;AltGr&lt;/code&gt;にしてhjklで←↓↑→を入力できるようにしてます｡
これは&lt;em&gt;V&lt;/em&gt;の者にとっては非常に素晴らしいですね｡&lt;/p&gt;
&lt;h3 id=&quot;%E5%9B%B0%E3%82%8B%E7%82%B9&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%9B%B0%E3%82%8B%E7%82%B9&quot;&gt;困る点&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;X11アプリケーションなのでX Window Systemが動いてないといけない｡
なのでWindowsとかXのない状況では諦めざるを得ない｡&lt;/p&gt;
&lt;p&gt;もう一つ重大な問題としては､キーコードに対するマッピングでしかないということである｡
詳細は&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AD%E3%83%A3%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89&quot;&gt;ウィキピージャ&lt;/a&gt;見てください｡
なにかアプリケーションでキー入力を受け付けるとき､文字コードではなくキーコードを受け付けている場合非常に困る｡&lt;/p&gt;
&lt;h2 id=&quot;%E3%81%9D%E3%81%93%E3%81%A7%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%9D%E3%81%93%E3%81%A7%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2&quot;&gt;そこでファームウェア&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;qmk_firmwareは名前の通りファームウェアでして､こいつを使うことでキースイッチの入力に対応する&lt;em&gt;キーコード&lt;/em&gt;をプログラムすることができる｡&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;qmk/qmk_firmware&quot;&gt;&lt;/div&gt;
&lt;p&gt;keyboards/以下に様々なキーボードのいろいろが突っ込まれてて正気の沙汰ではないですね｡
サブモジュールって知ってますか?&lt;/p&gt;
&lt;p&gt;qmkにはレイヤという概念があり､上記の&lt;code&gt;AltGr&lt;/code&gt;のような事を､レイヤを切り替えることによって実現している｡
このレイヤはユーザによっていっぱい作れるので､様々なレイヤを定義､しよう｡&lt;/p&gt;
&lt;p&gt;そしてボクのキーマップはこんな感じになった｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Nymphium/qmk_firmware/blob/nymphium/keyboards/lily58/keymaps/nymphium/keymap.c&quot;&gt;https://github.com/Nymphium/qmk_firmware/blob/nymphium/keyboards/lily58/keymaps/nymphium/keymap.c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;キーマップのレイヤごとにAAを書くというのが習慣らしい｡
たしかに分かりやすい(実際の設定と一致してれば)｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* DEFAULT
 * ,-----------------------------------------.                    ,-----------------------------------------.
 * | ESC  |   1  |   2  |   3  |   4  |   5  |                    |   6  |   7  |   8  |   9  |   0  |      |
 * |------+------+------+------+------+------|                    |------+------+------+------+------+------|
 * | Tab  |   Q  |   W  |   E  |   R  |   T  |                    |   Y  |   U  |   I  |   O  |  P   |      |
 * |------+------+------+------+------+------|                    |------+------+------+------+------+------|
 * |Enter |   A  |   S  |   D  |   F  |   G  |-------.    ,-------|   H  |   J  |   K  |   L  |Muhen |      |
 * |------+------+------+------+------+------|  Y    |    |   B   |------+------+------+------+------+------|
 * |LShift|   Z  |   X  |   C  |   V  |   B  |-------|    |-------|   N  |   M  |      |      |      |MOUSE |
 * `-----------------------------------------/       /     \      \-----------------------------------------'
 *                   |Super | LAlt |LOWER | / Space /       \ BSPC \  | Ctrl |MOUSE |Wdeflt|
 *                   |      |      |      |/       /         \      \ |      |      |      |
 *                   `----------------------------'           '------''--------------------'
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;レイヤごとにキーコードを割り当てられる｡
これはデフォルトレイヤーで次が上記のxmodmapのキーマップにおける&lt;code&gt;AltGr&lt;/code&gt;を押した状態になる｡&lt;/p&gt;
&lt;p&gt;&lt;label id=&quot;lower_layer&quot;&gt;&lt;/label&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#lower_layer&quot;&gt;3&lt;/a&gt;. LOWERレイヤ&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* LOWER
 * ,-----------------------------------------.                    ,-----------------------------------------.
 * |      | F1  |  F2  |  F3  |  F4  |  F5   |                    |      |  [   |   ]  | F12  |      |      |
 * |------+-----+------+------+------+-------|                    |------+------+------+------+------+------|
 * |      |  @  |  +   | ESC  |  ;   |  ^    |                    |      |  .   |  ,   | HOME | END  |      |
 * |------+-----+------+------+------+-------|                    |------+------+------+------+------+------|
 * |      |  -  |   %  |  \   |  /   |  '    |-------.    ,-------| Left | Down |  Up  |Right |Henkan|      |
 * |------+-----+------+------+------+-------|       |    |       |------+------+------+------+------+------|
 * |      | F6  |  F7  |  F8  |  F9  | F10   |-------|    |-------| F11  | PgDn | PgUp |      |      |      |
 * `-----------------------------------------/       /     \      \-----------------------------------------'
 *                   |      |      |      | /       /       \Delete\  |      |      |      |
 *                   |      |      |      |/       /         \      \ |      |      |      |
 *                   `----------------------------'           '------''--------------------'
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;qmkはマウスのエミュレーションができる｡
これはAAを用意してないんで実際の実装になっており､&lt;code&gt;LAYOUT&lt;/code&gt;マクロに渡されているのはそれぞれキーコードに対応する｡
&lt;code&gt;_______&lt;/code&gt;は1つ前のレイヤのキーコードを参照する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_MOUSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LAYOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;KC_MS_L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_MS_D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_MS_U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_MS_R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
  &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
                             &lt;span class=&quot;n&quot;&gt;KC_BTN1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_BTN3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_BTN2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHEEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; \
&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;%E3%82%AD%E3%83%BC%E5%85%A5%E5%8A%9B%E5%87%A6%E7%90%86&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%82%AD%E3%83%BC%E5%85%A5%E5%8A%9B%E5%87%A6%E7%90%86&quot;&gt;キー入力処理&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;キー入力を&lt;code&gt;process_record_user&lt;/code&gt;という関数で処理することができる｡
レイヤ切り替えは&lt;code&gt;custom_keycode&lt;/code&gt;というenumで新しく追加したレイヤ切り替え専用のキーコードの入力を&lt;code&gt;process_record_user&lt;/code&gt;で処理する(プログラム&lt;a href=&quot;#process_record_user&quot;&gt;4&lt;/a&gt;)｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;プログラム&lt;a href=&quot;#process_record_user&quot;&gt;4&lt;/a&gt;. process_record_user&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_record_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keycode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyrecord_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keycode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ......&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layer_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layer_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;register_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;layer_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;layer_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;update_tri_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_LOWER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LSHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;unregister_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ......&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_GRV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_EQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KC_ASTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;unregister_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KC_LSFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;keycode&lt;/code&gt;は文字通りキーコード､&lt;code&gt;record&lt;/code&gt;は入力してるときの状態を表し､&lt;code&gt;record-&amp;gt;event.pressed&lt;/code&gt;でキーを押下したかどうかのブールを取れる｡
関数の中を見てみると､&lt;code&gt;keycode&lt;/code&gt;でswitchして入力内容で分岐する｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#lower_layer&quot;&gt;LOWERレイヤ&lt;/a&gt;への切り替えは､&lt;code&gt;layer_on(_LOWER)&lt;/code&gt;と&lt;code&gt;layer_off(_LOWER)&lt;/code&gt;のあたりでおこなっている｡
&lt;code&gt;LOWER+Shift&lt;/code&gt;の修飾では第3のレイヤ&lt;code&gt;_LSHIFT&lt;/code&gt;になる｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KC_LSFT&lt;/code&gt;というキーコードが&lt;code&gt;Shift&lt;/code&gt;にあたる｡
&lt;code&gt;Shift+0&lt;/code&gt;を押すと&lt;code&gt;?&lt;/code&gt;が出て欲しいなど､一部&lt;code&gt;Shift&lt;/code&gt;による修飾で送出される文字を変更したかったがお手軽な方法が一見してなさそうだった｡
そのため､&lt;code&gt;Shift&lt;/code&gt;用に新たにレイヤを追加した｡
また一部キーは&lt;code&gt;Shift&lt;/code&gt;修飾を外さないと意図した入力がおこなわれないため､&lt;code&gt;unregister_code(KC_LSFT)&lt;/code&gt;で&lt;code&gt;Shift&lt;/code&gt;の修飾を取り消している｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;process_record_user&lt;/code&gt;の戻り値は長押しキーリピートするかどうかである｡&lt;/p&gt;
&lt;h1 id=&quot;%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%89%80%E6%84%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%89%80%E6%84%9F&quot;&gt;使ってみての所感&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;白軸カチャカチャして楽しい｡
慣れるとだいぶ快適だし､Windowsでも使えるようにちょっとした工夫もしているためWindowsでも快適な入力ができる｡
ウィンドウマネージャが変更できてフォントも綺麗に表示されてWSLがちゃんと動いてアレしてコレしたらWindowsでも快適に開発できそうですね!&lt;/p&gt;
&lt;p&gt;ハードウェア的なところとしては概ね満足ですが､キーボードが格子状なのは慣れの問題なのか､なかなか打ちづらい｡
あとパームレストがないと親指がキートップのエッジのせいでちょっと痛くなる｡
というか上の行がちょっと打ちづらい?
ともかくパームレストは遭ったほうが良いなこれは｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;これでボクがArchを使ってから愛用してきた秘伝の.xmodmapをファームウェアレベルでエミュレーションできたんじゃないでしょうか｡
とはいえキーボードを持ち運ぶのはだるいので､基本的には在宅ワークするときやお家でツイッタ〜するときのみ活躍します｡&lt;/p&gt;
&lt;p&gt;他にも状態のトグルなどちょっとした知見がコードに溜まってるので､qmk_firmwareを使ってなにかする人は上記のソースを見てみてください｡&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;ビルドガイドがボクの失敗を見たためかどうか､失敗したポイントについて丁寧な解説が加えられている｡みなさんは私の屍を超えて失敗レスに作ることができます｡ &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 02 Dec 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/12/02/Lily58%E3%81%AB%E3%82%88%E3%82%8B.xmodmap%E3%81%AE%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2%E5%AE%9F%E8%A3%85.html</guid>
        
        <category>WORD</category>
        
        <category>自作キーボード</category>
        
        <category>lily58</category>
        
        <category>qmk_firmware</category>
        
        <category>xmodmap</category>
        
        
      </item>
    
      <item>
        <title>Lua VMに見る多値の扱い</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;さて､最近は多値に関する議論がホットだったようです｡
ホットスポットはこちらの様子｡&lt;/p&gt;
&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;http://bleis-tift.hatenablog.com/entry/multiple-values&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;http://bleis-tift.hatenablog.com/entry/multiple-values&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;多値について本気で考えてみた - ぐるぐる～&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;先日のエントリの反応として、多値の批判をしているように受け取られた方がいました。 実際には、多値の批判をしているのではなく、Go言語の「多値とそう見えるけど違うものがある」という仕様を批判したものでした。 また、タプルにこだわっているという受け取り方をした方もいました。 このエントリでは、「タプルにこだわっているのでは…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;なるほど｡こちらも見ておこう｡
&lt;label id=&quot;kochira&quot;&gt;&lt;/label&gt;
&lt;/p&gt;&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;http://bleis-tift.hatenablog.com/entry/go-the-bad-parts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;http://bleis-tift.hatenablog.com/entry/go-the-bad-parts&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Go言語のイケてない部分 - ぐるぐる～&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;最近色々あって仕事でGo言語を使っています。 色々割り切っている言語なので、こんなこと言ってもしゃーないんですが、言語設計はミスってるんじゃなかなぁ、と思わざるを得ない点が多々あります。 使い始めて1か月くらいなので間違ったことを書いているかもしれませんので、何かあれば指摘していただけるとありがたいです。 本文ではネガ…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;どうやらGoは多値が使えたり使えなかったりするらしい｡
個人的には使えるか使えない(tupleにするとか)かのどちらかのほうが良い言語デザインだと思うけど､ユーザが問題ないなら…｡&lt;/p&gt;
&lt;p&gt;本稿ではLua VMが使える代表的な言語Luaを例に､Goとの多値の違いに付いて見ていき､Lua VMおよびLuaの多値の扱いが良い感じなことを確認したい｡
拙者Goは知らない侍につき､Goに関してはご容赦｡&lt;/p&gt;
&lt;h1 id=&quot;2.+Lua%E3%81%A7%E6%A7%98%E5%AD%90%E8%A6%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+Lua%E3%81%A7%E6%A7%98%E5%AD%90%E8%A6%8B&quot;&gt;2. Luaで様子見&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Lua VMのバイトコードを吐き出してくれるコンパイラの代表といえばluacだと思います｡
むしろほかを知りませんが｡
luacはLuaをLua VMバイトコードにコンパイルしてくれるすごいやつだよ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;引用&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c&quot;&gt;// 多値を返す関数minmax&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 条件演算子がないのも割り切りだとわかっていてもつらい。&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 多値の受け取り&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;min:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, max:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// =&amp;gt; min: 10, max: 20&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;よくあるやつですね｡
Luaで書くとこうなる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ありがちですね｡&lt;/p&gt;
&lt;p&gt;もう一つ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;引用&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// コンパイルエラー&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初の方だけ返ってきました｡
もう一個はどこへ行った???&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 10 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虚空に消えたようで､拾ってやれば出てきます｡
call by valueなので虚空に消えても値なので特に問題ありません｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;引用&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmax2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// そのまま返す&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;これは&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minmax2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minmax2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 10 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;問題ないね｡&lt;/p&gt;
&lt;h2 id=&quot;2-1.+%E2%80%9C%E5%A4%9A%E5%80%A4%E3%81%A3%E3%81%BD%E3%81%84%E6%A7%8B%E6%96%87%E3%81%AA%E3%81%AE%E3%81%AB%E5%A4%9A%E5%80%A4%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E6%A9%9F%E8%83%BD%22%E3%81%AFLua%E3%81%AB%E3%81%AF%E7%84%A1%E3%81%84%E3%81%9C&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+%E2%80%9C%E5%A4%9A%E5%80%A4%E3%81%A3%E3%81%BD%E3%81%84%E6%A7%8B%E6%96%87%E3%81%AA%E3%81%AE%E3%81%AB%E5%A4%9A%E5%80%A4%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E6%A9%9F%E8%83%BD%22%E3%81%AFLua%E3%81%AB%E3%81%AF%E7%84%A1%E3%81%84%E3%81%9C&quot;&gt;2-1. “多値っぽい構文なのに多値ではない機能&quot;はLuaには無いぜ&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#kochira&quot;&gt;1.1&lt;/a&gt;では &quot;多値っぽい構文なのに多値ではない機能&quot;としてfor rangeが例に出されています｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;引用&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;i, x&lt;/code&gt; の部分は多値のように見えますが、これは多値ではなく構文です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;なるほど｡Luaにも&lt;code&gt;for-in&lt;/code&gt;で同じようなことがかける｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Lua唯一のデータ構造tableにサイズ指定なんてないぜ&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;はLuaでは&lt;strong&gt;多値&lt;/strong&gt;となる｡
へーそうなんだ｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ipairs&lt;/code&gt;関数は&lt;em&gt;ジェネレータ&lt;/em&gt;を作る関数であり､ジェネレータが多値を返す関数なんです｡
へーそうなんだ｡
ジェネレータがn個の値を返せば､for文でもn個の値を取れる｡
ジェネレータとはいえ､実態はただの関数である｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;--[[
1       0       -1      -2
2       1       0       -1
3       2       1       0
4       3       2       1
5       4       3       2
6       5       4       3
7       6       5       4
8       7       6       5
9       8       7       6
]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Go言語では、mapへのアクセスにはスライスや文字列などと同様、 [] を使います。 その結果として、値のほかにキーが存在したかどうかを表す bool 値が受け取れます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;引用&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 2nd valueとしてbool値が受け取れる&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// =&amp;gt; n: 0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Lua唯一のデータ構造tableはmap機能を持っているが､アクセスしたキーに対応する値が無い場合は&lt;code&gt;nil&lt;/code&gt;を返すため､比較はできない｡&lt;/p&gt;
&lt;p&gt;茶番になるが､metatableを使ってGoっぽいことをしてみよう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__newindex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;--[[ __indexメタメソッドを経由したことを確認するため ]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;__newindex&lt;/code&gt;で&lt;code&gt;t&lt;/code&gt;への値の格納を&lt;code&gt;store&lt;/code&gt;に回すことで､､&lt;code&gt;t&lt;/code&gt;へのアクセスは必ず&lt;code&gt;__index&lt;/code&gt;メタメソッドを経由するようになる｡
これでいいんじゃないですか…?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 30 nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アイエエナンデニンジャ､Luaはどうやらtableへのアクセスに対して多値を返せないようになっているようだ｡
&lt;code&gt;&quot;多値っぽい構文なのに多値ではない機能&quot;はLuaには無いぜ&lt;/code&gt; なんて啖呵切ったけどどうしますか､言い訳しますか?
すみませんでした｡
そもそもtableへのアクセスで多値を要求することがなかったのでこんなことになるとは上記コードを書くまで知りませんでした｡&lt;/p&gt;
&lt;p&gt;茶番おわり&lt;/p&gt;
&lt;h2 id=&quot;2-2.+error&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-2.+error&quot;&gt;2-2. error&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最も述べるべきはエラー処理だろう｡
Luaのエラー処理はGoと似たような方法となる｡
まずはGo&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;引用&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;照井君､ワイもLuaでみたことあるで!!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もっとLuaっぽく書く場合は､&lt;code&gt;pcall&lt;/code&gt;関数を使う｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pcall&lt;/code&gt;は､第1引数の関数に第2引数以降の値を適用して実行する｡
このとき第1引数の関数がエラーを吐いたとき､&lt;code&gt;pcall&lt;/code&gt;が&lt;code&gt;nil, error_message&lt;/code&gt;の2値を返す｡構文ではなく単に多値ですね｡
何もなければ&lt;code&gt;f&lt;/code&gt;の戻り値をそのまま返す｡
もちろん&lt;code&gt;f&lt;/code&gt;の戻り値は多値の可能性もある｡
そのため､最初の戻り値が&lt;code&gt;nil&lt;/code&gt;だった場合(&lt;code&gt;not content&lt;/code&gt;で検査している)にエラーを返すようになる｡&lt;/p&gt;
&lt;p&gt;Luaは再代入可能なので他は割愛&lt;/p&gt;
&lt;h2 id=&quot;2-3.+Lua%E3%81%A7%E3%82%82%E3%81%86%E3%81%99%E3%81%93%E3%81%97%E5%A4%9A%E5%80%A4&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-3.+Lua%E3%81%A7%E3%82%82%E3%81%86%E3%81%99%E3%81%93%E3%81%97%E5%A4%9A%E5%80%A4&quot;&gt;2-3. Luaでもうすこし多値&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;多値はLuaでは頻出パターンである｡
たとえばパターンマッチ(Luaでパターンというと正規表現風のアレでマッチはマッチや､これは重要なので注釈じゃなくここに記述する)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%S+(.*)$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[[match: &quot;%s&quot;; rest: &quot;%s&quot;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- match: &quot;Hello,&quot;; rest: &quot;world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん多値&lt;/p&gt;
&lt;p&gt;他にも…あまり思いつかなかった｡&lt;/p&gt;
&lt;p&gt;例えばオプショナルな値を返したい時とか､なんとか､ともかくLuaで多値は非常に自然に使われるんや｡&lt;/p&gt;
&lt;h2 id=&quot;2-4.+%E5%A4%9A%E5%80%A4%E3%81%8C%E5%80%A4%E3%81%AB%E3%81%AA%E3%82%8B%E7%9E%AC%E9%96%93&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-4.+%E5%A4%9A%E5%80%A4%E3%81%8C%E5%80%A4%E3%81%AB%E3%81%AA%E3%82%8B%E7%9E%AC%E9%96%93&quot;&gt;2-4. 多値が値になる瞬間&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Luaでは可変長引数が使える｡
こういった瞬間､多値が単一の値になるような瞬間がある｡&lt;/p&gt;
&lt;p&gt;とりあえず多値を返す関数を用意しておく｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可変長引数をとる関数は､関数の仮引数に&lt;code&gt;...&lt;/code&gt;と書く｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt;は多値なのでこう書けるはずだ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;in g&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;いいな｡よし｡&lt;/p&gt;
&lt;p&gt;さて､他に&lt;code&gt;...&lt;/code&gt;をどうするのかというとこれをtableに突っ込む｡またtableか｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;in g&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;は??? 多値がお前…&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Luaは1オリジン!!!!!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;冷静になると&lt;code&gt;local x, y = ...&lt;/code&gt;もたいがいやぞ｡&lt;/p&gt;
&lt;h1 id=&quot;3.+Lua+VM%E3%81%A8%E5%A4%9A%E5%80%A4&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+Lua+VM%E3%81%A8%E5%A4%9A%E5%80%A4&quot;&gt;3. Lua VMと多値&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;さて､Luaは多値がGoよりも頻出しており､多値っぽいなと思ったものはだいたい多値であることが分かった｡
Luaのランタイムとして多く採用されているLua VMについて､多値をどうさばいてるのか見てみよう｡&lt;/p&gt;
&lt;h2 id=&quot;3-1.+Lua+VM%E3%81%A8%E3%81%AF&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-1.+Lua+VM%E3%81%A8%E3%81%AF&quot;&gt;3-1. Lua VMとは&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PUC-Lua 5.0からレジスタマシンアーキテクチャを採用している&lt;sup id=&quot;fnref1&quot; title='Ierusalimschy, Roberto, Luiz Henrique de Figueiredo, and Waldemar Celes. &quot;The evolution of Lua.” Proceedings of the third ACM SIGPLAN conference on History of programming languages. ACM, 2007. '&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;｡
Lua VM 5.3では47個の命令を持ち､5.4では四則演算に関して5.2から導入された&lt;code&gt;integer&lt;/code&gt;型を高速に処理するための命令が追加されそうだ&lt;sup id=&quot;fnref2&quot; title=&quot;https://github.com/lua/lua/blob/b43300c14f562bcdc1050f2c05e52fac3f6c99b7/lopcodes.h#L219 &quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;｡&lt;/p&gt;
&lt;p&gt;まずはバイトコードに触れてみよう｡
お手元にluacをご用意ください｡
パッケージマネージャでLuaをインストールすれば使えるはずだ｡
&lt;code&gt;luac-5.3&lt;/code&gt;とか&lt;code&gt;luac5.3&lt;/code&gt;とか､単に&lt;code&gt;luac&lt;/code&gt;など｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hoge.lua
&lt;span class=&quot;go&quot;&gt;print(&quot;Hello&quot;)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; luac &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; hoge.lua
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;main &amp;lt;hoge.lua:0,0&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4 instructions at 0x55f888496c70&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0+ params, 2 slots, 1 upvalue, 0 locals, 2 constants, 0 functions
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        1       [1]     GETTABUP        0 0 -1  ;&lt;/span&gt; _ENV &lt;span class=&quot;s2&quot;&gt;&quot;print&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;        2       [1]     LOADK           1 -2    ;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        3       [1]     CALL            0 2 1
        4       [1]     RETURN          0 1
constants (2) for 0x55f888496c70:
        1       &quot;print&quot;
        2       &quot;Hello&quot;
locals (0) for 0x55f888496c70:
upvalues (1) for 0x55f888496c70:
        0       _ENV    1       0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;-l -l&lt;/code&gt;はverboseみたいなもので､デバッグ情報を全部だしてくれる｡
&lt;code&gt;-o /dev/null&lt;/code&gt;は生成された&lt;code&gt;luac.out&lt;/code&gt;を/dev/nullに捨てているだけである｡
今回luac.outに興味はないのでご退場いただいた｡&lt;/p&gt;
&lt;p&gt;あらためて出力を見てみる｡
この出力にはクロージャの情報が並んで表示される｡
&lt;a href=&quot;https://nymphium.github.io/2016/04/25/luaquiz.html&quot;&gt;Luaのトップレベルも関数&lt;/a&gt;である｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;main &amp;lt;hoge.lua:0,0&amp;gt; (4 instructions at 0x55f888496c70)
0+ params, 2 slots, 1 upvalue, 0 locals, 2 constants, 0 functions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数の情報がかかれている｡
&lt;code&gt;1 upvalue&lt;/code&gt;は上位値の数､&lt;code&gt;2 constants&lt;/code&gt;は定数の数､&lt;code&gt;0 functions&lt;/code&gt;はクロージャの数｡
&lt;code&gt;0+ params&lt;/code&gt;は引数の数であり､この&lt;code&gt;+&lt;/code&gt;は上記の可変長引数をとることを意味している｡
トップレベルは可変長引数を取るようだな｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;        1       [1]     GETTABUP        0 0 -1  ; _ENV &quot;print&quot;
        2       [1]     LOADK           1 -2    ; &quot;Hello&quot;
        3       [1]     CALL            0 2 1
        4       [1]     RETURN          0 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここが命令列&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;        2       [1]     LOADK           1 -2    ; &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;2&lt;/code&gt;が命令のインデックス､&lt;code&gt;[1]&lt;/code&gt;が対応するソースコードの行､&lt;code&gt;LOADK&lt;/code&gt;がニーモニック､&lt;code&gt;1 -2&lt;/code&gt;がオペランド｡
&lt;code&gt;; &quot;Hello&quot;&lt;/code&gt;はコメントである｡
Lua VMは三番地コードを採用している｡
レジスタは0〜255まで用意されている｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;constants (2) for 0x55f888496c70:
        1       &quot;print&quot;
        2       &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定数のリスト｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;locals (0) for 0x55f888496c70:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ローカル変数のリスト｡
これはデバッグ情報としてのみ､スタックトレースなどに利用される｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;upvalues (1) for 0x55f888496c70:
        0       _ENV    1       0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上位値のリスト｡
トップレベルだと雰囲気でないが､クロージャを書く時はスコープ内に外側で定義した変数を使いますよね､ソレです｡
&lt;code&gt;_ENV&lt;/code&gt;はグローバル変数が格納されているtable｡
グローバル変数はtableなんですねぇ｡&lt;/p&gt;
&lt;p&gt;あとはこれが関数ごとに表示される｡&lt;/p&gt;
&lt;h1 id=&quot;4.+%3Ccode%3ECALL%3C%2Fcode%3E+%26amp%3B+%3Ccode%3ERETURN%3C%2Fcode%3E%0A&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%3Ccode%3ECALL%3C%2Fcode%3E+%26amp%3B+%3Ccode%3ERETURN%3C%2Fcode%3E%0A&quot;&gt;4. &lt;code&gt;CALL&lt;/code&gt; &amp;amp; &lt;code&gt;RETURN&lt;/code&gt;
&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;命令列に戻ってみる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;        1       [1]     GETTABUP        0 0 -1  ; _ENV &quot;print&quot;
        2       [1]     LOADK           1 -2    ; &quot;Hello&quot;
        3       [1]     CALL            0 2 1
        4       [1]     RETURN          0 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;GETTABUP&lt;/code&gt;命令で&lt;code&gt;_ENV&lt;/code&gt;に格納されている&lt;code&gt;print&lt;/code&gt;をレジスタ0に引っ張っている｡
第1レジスタで格納するレジスタを指定し､第2オペランドで上位値を指定する｡
第3オペランドがtableへのアクセスに使う値を決めるものであり､負のときは定数リストの&lt;code&gt;第3オペランド * -1 - 1&lt;/code&gt;番目のキーを使う｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LOADK&lt;/code&gt;で定数リストから&lt;code&gt;&quot;Hello&quot;&lt;/code&gt;を取り出し､レジスタ1に格納する｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CALL&lt;/code&gt;で関数呼出しをおこなう｡
&lt;label id=&quot;lopcodes.h&quot;&gt;&lt;/label&gt; &lt;a href=&quot;https://github.com/lua/lua/blob/v5-3-4/lopcodes.h&quot;&gt;命令の定義&lt;/a&gt;に書かれたコメントを見てみる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;OP_CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*  A B C  R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分かる､分からない…｡
レジスタAの関数にレジスタ(A + 1), …, レジスタ(A + B - 1)を渡して呼び出し､
結果をレジスタA, …, レジスタ(A + C - 2)に格納する､という感じだな｡
A, B, Cは第1オペランド､第2オペランド､第3オペランドに対応する｡
確かに､戻り値の処理などが多値にうまく対応している｡&lt;/p&gt;
&lt;p&gt;これより&lt;code&gt;CALL 0 2 1&lt;/code&gt;はレジスタ0にある&lt;code&gt;print&lt;/code&gt;にレジスタ0の&lt;code&gt;&quot;Hello&quot;&lt;/code&gt;を適用している｡
戻り値はレジスタ(A+C-2)だから…あれ､レジスタ-1とはなんですか｡
A+C-2 &amp;lt; 0なら戻り値を気にしない､という予想で読んでいこう｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RETURN&lt;/code&gt;も難しい｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*    A B return R(A), ... ,R(A+B-2)  (see note)  */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これも同様にA+B - 2 &amp;lt; 0はvoid&lt;sup id=&quot;fnref3&quot; title='void-unit戦争が世界の何処かでおこなわれていますが､これはまさにvoidですね｡Luaでこういった関数の戻り値を受け取るとnilが返ってきますが､これは&quot;無い値&quot;を参照しているので､nilは正しい(オタク早口)｡ '&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;のような関数ということでしょう｡&lt;/p&gt;
&lt;p&gt;他の命令も､特に条件分岐あたりは面白いので1つ1つ見ていきたいが､ここでは多値が絡む部分だけ見ていこう｡
気になった方はluaのソースコードをご覧ください｡&lt;/p&gt;
&lt;p&gt;ほかにも例を見てみよう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;huga.lua
&lt;span class=&quot;go&quot;&gt;local x = 3
local y = 5
local z = x + y
print(z)
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; luac &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; huga.lua
&lt;span class=&quot;c&quot;&gt;......
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        1       [1]     LOADK           0 -1    ;&lt;/span&gt; 3
&lt;span class=&quot;gp&quot;&gt;        2       [2]     LOADK           1 -2    ;&lt;/span&gt; 5
&lt;span class=&quot;go&quot;&gt;        3       [3]     ADD             2 0 1
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;        4       [4]     GETTABUP        3 0 -3  ;&lt;/span&gt; _ENV &lt;span class=&quot;s2&quot;&gt;&quot;print&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        5       [4]     MOVE            4 2
        6       [4]     CALL            3 2 1
        7       [4]     RETURN          0 1
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;......
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1､2行目をみると､ローカル変数もレジスタに突っ込まれることが分かる｡&lt;/p&gt;
&lt;p&gt;つぎいってみよ〜&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;unpack.lua&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1  2  3  4  5  6  7  8  9  10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;tableを受け取り､配列部分を全て多値としてぶちまける&lt;code&gt;table.unpack&lt;/code&gt;という関数を使う｡
ちょっと待てよ､&lt;code&gt;f&lt;/code&gt;は何個値を返すんだ､まさか処理系が&lt;code&gt;f&lt;/code&gt;の呼び出しする部分ごとに解析してサイズを決めるんですか?
そんなわけない｡
&lt;code&gt;CALL&lt;/code&gt;の引数はどうなる､俺達の未来はー&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;luac &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; unpack.lua

main &amp;lt;unpack.lua:0,0&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7 instructions at 0x55d6a2333c70&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0+ params, 4 slots, 1 upvalue, 1 &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;, 2 constants, 1 &lt;span class=&quot;k&quot;&gt;function
        &lt;/span&gt;1       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9]     CLOSURE         0 0     &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 0x55d6a2333e50
        2       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]    GETTABUP        1 0 &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; _ENV &lt;span class=&quot;s2&quot;&gt;&quot;print&quot;&lt;/span&gt;
        3       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]    MOVE            2 0
        4       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]    LOADK           3 &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 10
        5       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]    CALL            2 2 0
        6       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]    CALL            1 0 1
        7       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]    RETURN          0 1
constants &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;0x55d6a2333c70:
        1       &lt;span class=&quot;s2&quot;&gt;&quot;print&quot;&lt;/span&gt;
        2       10
locals &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;0x55d6a2333c70:
        0       f       2       8
upvalues &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;0x55d6a2333c70:
        0       _ENV    1       0

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &amp;lt;unpack.lua:1,9&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;17 instructions at 0x55d6a2333e50&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1 param, 9 slots, 1 upvalue, 6 locals, 4 constants, 0 functions
        1       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2]     NEWTABLE        1 0 0
        2       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4]     LOADK           2 &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 1
        3       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4]     MOVE            3 0
        4       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4]     LOADK           4 &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 1
        5       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4]     FORPREP         2 5     &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; to 11
        6       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5]     GETTABUP        6 0 &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; _ENV &lt;span class=&quot;s2&quot;&gt;&quot;table&quot;&lt;/span&gt;
        7       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5]     GETTABLE        6 6 &lt;span class=&quot;nt&quot;&gt;-3&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;insert&quot;&lt;/span&gt;
        8       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5]     MOVE            7 1
        9       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5]     MOVE            8 5
        10      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5]     CALL            6 3 1
        11      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4]     FORLOOP         2 &lt;span class=&quot;nt&quot;&gt;-6&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; to 6
        12      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8]     GETTABUP        2 0 &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; _ENV &lt;span class=&quot;s2&quot;&gt;&quot;table&quot;&lt;/span&gt;
        13      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8]     GETTABLE        2 2 &lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unpack&quot;&lt;/span&gt;
        14      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8]     MOVE            3 1
        15      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8]     TAILCALL        2 2 0
        16      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;8]     RETURN          2 0
        17      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;9]     RETURN          0 1
constants &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;0x55d6a2333e50:
        1       1
        2       &lt;span class=&quot;s2&quot;&gt;&quot;table&quot;&lt;/span&gt;
        3       &lt;span class=&quot;s2&quot;&gt;&quot;insert&quot;&lt;/span&gt;
        4       &lt;span class=&quot;s2&quot;&gt;&quot;unpack&quot;&lt;/span&gt;
locals &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;0x55d6a2333e50:
        0       x       1       18
        1       ret     2       18
        2       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     5       12
        3       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;limit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     5       12
        4       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;step&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      5       12
        5       i       6       11
upvalues &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;0x55d6a2333e50:
        0       _ENV    0       0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先頭の関数情報がトップレベル､2つ目のほうが&lt;code&gt;f&lt;/code&gt;の情報である｡
&lt;code&gt;f&lt;/code&gt;のほうをまず見てみよう｡
一気にreturn部分を見る｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;        15      [8]     TAILCALL        2 2 0
        16      [8]     RETURN          2 0
        17      [9]     RETURN          0 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TAILCALL&lt;/code&gt;ってなんですか?
関数の末尾で関数呼出ししてその戻り値をそのまま返す場合は&lt;code&gt;TAILCALL&lt;/code&gt;になる｡
いわゆる末尾呼び出し最適化みたいなものですね｡
偉い｡
なので16, 17番目の&lt;code&gt;RETURN&lt;/code&gt;は実際には使われない命令となっている｡
最適化で消えてほしいですね｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;OP_TAILCALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*  A B C   return R(A)(R(A+1), ... ,R(A+B-1))      */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第3オペランドCは便宜上あるだけで使われないようです｡
内部的な話をすると､バイトコードの1命令は32bitである｡
&lt;code&gt;TAILCALL&lt;/code&gt;の引数はレジスタの指定だけに使うので､各オペランドのサイズは8bitあれば十分である｡
ABC型の命令は各オペランドは8, 9, 9bit(ニーモニックは全部等しく6bit)となっており､サイズがちょうど良さげなので､Cを無視してA,Bだけ使っている､ということだろうか｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TAILCALL 2 2 0&lt;/code&gt;は､レジスタ2にある&lt;code&gt;table.unpkacp&lt;/code&gt;に､レジスタ3の&lt;code&gt;ret&lt;/code&gt;を適用してその戻り値(多値含む)を返す､ということですね｡
まず&lt;code&gt;f&lt;/code&gt;と意気込んで見てみたものの､サラッとしてるのであまり多値みがないですね｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print(f(10))&lt;/code&gt;はどうなったかを見よう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;        1       [9]     CLOSURE         0 0     ; 0x55d6a2333e50
        2       [11]    GETTABUP        1 0 -1  ; _ENV &quot;print&quot;
        3       [11]    MOVE            2 0
        4       [11]    LOADK           3 -2    ; 10
        5       [11]    CALL            2 2 0
        6       [11]    CALL            1 0 1
        7       [11]    RETURN          0 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;CLOSURE&lt;/code&gt;はクロージャを作っている｡
今回は特になにもクロージングしてないですね｡
5つ目の&lt;code&gt;CALL 2 2 0&lt;/code&gt;が&lt;code&gt;f&lt;/code&gt;の呼び出しになっている｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CALL&lt;/code&gt; 振り返り&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;OP_CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*  A B C  R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A+C-2は0ですが､一体なにがどうなって?
&lt;a href=&quot;#fn2&quot;&gt;lopcode.h&lt;/a&gt;の下の方になんかかいてあるな｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;  Notes:
  (*) In OP_CALL, if (B == 0) then B = top. If (C == 0), then 'top' is
  set to last_result+1, so next open instruction (OP_CALL, OP_RETURN,
  OP_SETLIST) may use 'top'.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ホゲッ!?
この&lt;code&gt;top&lt;/code&gt;というのは､中身が&lt;code&gt;nil&lt;/code&gt;でないレジスタの最大インデックス､という感じだろうか｡
luacはレジスタを0から順番に使っているので､スキマがあったりなんだかよくわからない感じになったりという事故は(多分)おきないので問題ない｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CALL 2 2 0&lt;/code&gt;は､レジスタ2に入ってる関数にレジスタ3の値を適用して､そして…?
情報が足りてないのだが､この場合戻り値をレジスタ2から全部順番に格納する｡
そして&lt;code&gt;top&lt;/code&gt;が更新される｡&lt;/p&gt;
&lt;p&gt;次の&lt;code&gt;CALL 1 0 1&lt;/code&gt;も面白い｡&lt;code&gt;B == 0&lt;/code&gt;なので&lt;code&gt;B = top&lt;/code&gt;となる｡
レジスタ1にある&lt;code&gt;print&lt;/code&gt;に､レジスタ2から&lt;code&gt;top&lt;/code&gt;までを適用する｡
なるほど｡&lt;/p&gt;
&lt;p&gt;Lua VMの命令は面白いことがわかった｡
レジスタベースでも多値をガンガン扱えるぜ､Lua VMは多値をうまく扱ってるぜ､ということでした｡&lt;/p&gt;
&lt;h1 id=&quot;5.+%E7%B6%99%E7%B6%9A%E3%81%A8%E5%A4%9A%E5%80%A4&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E7%B6%99%E7%B6%9A%E3%81%A8%E5%A4%9A%E5%80%A4&quot;&gt;5. 継続と多値&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;余談｡
Luaにファーストクラスの継続はないが､だいたい継続であるところのコルーチンはある｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- init&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1  2  3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 4  5  6  7  8  9  10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい｡&lt;/p&gt;
&lt;h1 id=&quot;6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;6. おわりに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ひさしぶりにLuaに思いを馳せたので思い出したり資料をのぞいたりで執筆に結構時間がかかってしまった｡&lt;/p&gt;
&lt;p&gt;ところで!
VM型インタプリタ面白いなと思った方は､ぜひこちらをご覧ください｡&lt;/p&gt;
&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1055860&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://booth.pximg.net/c/620x620/a00fe615-aca9-4ac2-9e73-c117987944f4/i/1055860/0273cc3f-790b-4942-8b48-c406e61ec61d_base_resized.jpg&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1055860&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Dragon University 技術書典5 - Dragon University - BOOTH&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;技術書典5で配布した「Dragon University 技術書典5」のPDF版です。 ※紙媒体を持っている場合は別場所でダウンロードできるように作業中です。お待ち下さい。 記事一覧: GLSLでリアルタイムレンダリングするカド - @rairyugo GANとの付き合い方 デプロイ編 - @rizaudo CTF 問題で学ぶcurl SSRF Hacks - @xrekkusu つくってかんたんVirtual Machine-based Interpreter - @nymphium 動作環境 Acrobat Proで互換性を確認したPDFです。EPUBは対応未定です。&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;宣伝おわり&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Ierusalimschy, Roberto, Luiz Henrique de Figueiredo, and Waldemar Celes. &quot;The evolution of Lua.” Proceedings of the third ACM SIGPLAN conference on History of programming languages. ACM, 2007. &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lua/lua/blob/b43300c14f562bcdc1050f2c05e52fac3f6c99b7/lopcodes.h#L219&quot;&gt;https://github.com/lua/lua/blob/b43300c14f562bcdc1050f2c05e52fac3f6c99b7/lopcodes.h#L219&lt;/a&gt; &lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;void-unit戦争が世界の何処かでおこなわれていますが､これはまさにvoidですね｡Luaでこういった関数の戻り値を受け取るとnilが返ってきますが､これは&quot;無い値&quot;を参照しているので､nilは正しい(オタク早口)｡ &lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 16 Nov 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/11/16/Lua-VM%E3%81%AB%E8%A6%8B%E3%82%8B%E5%A4%9A%E5%80%A4%E3%81%AE%E6%89%B1%E3%81%84.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/11/16/Lua-VM%E3%81%AB%E8%A6%8B%E3%82%8B%E5%A4%9A%E5%80%A4%E3%81%AE%E6%89%B1%E3%81%84.html</guid>
        
        <category>Go</category>
        
        <category>Lua VM</category>
        
        <category>多値</category>
        
        <category>multiple value</category>
        
        
      </item>
    
      <item>
        <title>subfilesを使ってみんなで記事を書く､しおりも出す</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;p&gt;この度､『Dragon University 技術書典5』を手にとっていただいて誠にありがとうございました｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;70部弱売れたのでええ感じでした。ありがとうございました。 &lt;a href=&quot;https://t.co/dYxhhgDnnx&quot;&gt;pic.twitter.com/dYxhhgDnnx&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1049208145816350721?ref_src=twsrc%5Etfw&quot;&gt;October 8, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;“70部&lt;strong&gt;&lt;em&gt;弱&lt;/em&gt;&lt;/strong&gt;&quot;とありますが実際は&quot;70部&lt;strong&gt;&lt;em&gt;強&lt;/em&gt;&lt;/strong&gt;&quot;です｡
重ねてありがとございました｡&lt;/p&gt;
&lt;p&gt;さて､ここからが大事だ｡
大事な話をする｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Dragon Universityは近々ダウンロード販売をやるようなのでお待ち下さい､物理媒体を購入した方はnページ目m行目s文字目～t文字などのパスフレーズを入力すると無料でゲットできるようにする(はず)&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1049334128800219137?ref_src=twsrc%5Etfw&quot;&gt;October 8, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;してました｡&lt;/p&gt;
&lt;h2 id=&quot;%E8%BF%BD%E8%A8%9820181018&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181018&quot;&gt;追記20181018&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;もうはじまってる!!!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dragonuniversity.booth.pm/items/1055860&quot;&gt;https://dragonuniversity.booth.pm/items/1055860&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;追記おわり&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;さて､LaTeX文書からPDFを作成してpublishした人の多くはhyperrefパッケージを使っているかと思います｡
hyperrefにはしおりを作る機能があります(図&lt;a href=&quot;#bookmarks&quot;&gt;1&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;bookmarks&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/bookmarks.png&quot; alt=&quot;しおり&quot; title=&quot;しおり&quot;&gt;
図&lt;a href=&quot;#bookmarks&quot;&gt;1&lt;/a&gt; evinceで正しく表示されるしおり
&lt;/center&gt;
&lt;p&gt;今回我々はsubfilesで各々がファイルを書いてプロジェクトのルートのmain.texで各人のmainファイルを読むようにしました｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Nymphium/nymphium.github.io/tree/source/src/latex-subfiles&quot;&gt;src/latex-subfiles&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;.
├── authors
│   ├── ore
│   │   └── main.tex
│   └── other
│       └── main.tex
└── main.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/src/latex-subfiles/main.tex&quot;&gt;src/latex-subfiles/main.tex&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;main.tex&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;......
&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;authors/ore/main.tex&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;authors/other/main.tex&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/src/latex-subfiles/authors/ore/main.tex&quot;&gt;src/latex-subfiles/authors/ore/main.tex&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subfiles&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ほげほげ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;あああ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;はじめに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subsection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ほげ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;おわりに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;/src/latex-subfiles/authors/other/main.tex&quot;&gt;src/latex-subfiles/authors/other/main.tex&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subfiles&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;other&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;別の話&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;はじめに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\subsection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ほげ&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;おわりに&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;subfilesで&lt;code&gt;\maketitle&lt;/code&gt;を使うと各記事のタイトルを良い感じにいれられないので改造する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;
......
&lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\newpage\null&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\vskip&lt;/span&gt; 2em
  &lt;span class=&quot;nt&quot;&gt;\begin{center}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\let\footnote\thanks&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\LARGE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\textbf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;title&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\par&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% タイトル&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\vskip&lt;/span&gt; 1.5em
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\large&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\lineskip&lt;/span&gt; .5em
        &lt;span class=&quot;nt&quot;&gt;\begin{flushright}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;author &lt;span class=&quot;c&quot;&gt;% 著者名&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;\end{flushright}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;\par&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;\end{center}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\par\vskip&lt;/span&gt; 1.5em
  &lt;span class=&quot;k&quot;&gt;\ifvoid\@&lt;/span&gt;abstractbox&lt;span class=&quot;k&quot;&gt;\else\centerline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\box\@&lt;/span&gt;abstractbox&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\vskip&lt;/span&gt;1.5em&lt;span class=&quot;k&quot;&gt;\fi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;section&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% ミソ&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subsection&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;subsubsection&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;footnote&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;
......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この辺は好みによる｡
今回はltjsarticleの&lt;code&gt;\maketitle&lt;/code&gt;コマンドを改造している｡
section等のカウンタを0で初期化しているのがミソで､これをしないと各記事のカウンタが連番になってしまう｡
しかしそうするとしおりが壊れる(図&lt;a href=&quot;#brokenbm&quot;&gt;2&lt;/a&gt;)｡&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;brokenbm&quot;&gt;&lt;/label&gt;
記事&lt;code&gt;あああ&lt;/code&gt;のサブセクション位置に次の記事が来てしまっている｡
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/broken.png&quot; alt=&quot;壊れたしおり&quot; title=&quot;壊れたしおり&quot;&gt;
図&lt;a href=&quot;#brokenbm&quot;&gt;2&lt;/a&gt; 壊れたしおり
&lt;/center&gt;
&lt;p&gt;hyperrefパッケージのオプションに&lt;code&gt;hypertexnames=false&lt;/code&gt;を渡すことで解決する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;......
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;[&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  pdfencoding=auto&lt;span class=&quot;c&quot;&gt;% 文字化け防止&lt;/span&gt;
, hypertexnames=false&lt;span class=&quot;c&quot;&gt;% ←&lt;/span&gt;
, luatex]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;hyperref&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;ok1&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/ok1.png&quot; alt=&quot;ok1&quot; title=&quot;ok1&quot;&gt;
図&lt;a href=&quot;#ok1&quot;&gt;3&lt;/a&gt; ok1
&lt;/center&gt;
&lt;p&gt;図&lt;a href=&quot;#bookmarks&quot;&gt;1&lt;/a&gt;のように記事名もしおりに入れたい｡
記事名の子に各セクションが来てほしいので｡&lt;code&gt;\maketitle&lt;/code&gt;に手を加える｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;
......
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\addcontentsline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;toc&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;part&lt;span class=&quot;p&quot;&gt;}{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\large&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;title&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% これ&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\newpage\null&lt;/span&gt;
......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;\large&lt;/code&gt;指定は目次のためである｡
親子関係はsectionの上に来てほしいのでchapterかpartにする｡
目次はchapterよりもpartのほうが見栄えが良かったのでpartにした｡&lt;/p&gt;
&lt;p&gt;そしてまた壊れる｡壊れるなぁ…｡
&lt;/p&gt;&lt;center&gt;
&lt;label id=&quot;broken2&quot;&gt;&lt;/label&gt;
&lt;img src=&quot;/pictures/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%EF%BD%A4%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99/broken2.png&quot; alt=&quot;broken2&quot; title=&quot;broken2&quot;&gt;
図&lt;a href=&quot;#broken2&quot;&gt;4&lt;/a&gt; こわれる
&lt;/center&gt;
&lt;p&gt;ここでおもむろに&lt;code&gt;\phantomsection&lt;/code&gt;を挿入する｡&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tex.stackexchange.com/questions/44088/when-do-i-need-to-invoke-phantomsection&quot;&gt;hyperref - When do I need to invoke \phantomsection? - TeX - LaTeX Stack Exchange&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;
......
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\phantomsection&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;% addcontenstlineの前に追加&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\addcontentsline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;toc&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;part&lt;span class=&quot;p&quot;&gt;}{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\large&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;title&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\newpage\null&lt;/span&gt;
......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでやっと図&lt;a href=&quot;#bookmarks&quot;&gt;1&lt;/a&gt;のようになった｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ということでpdf版制作にもワザがありました｡
表紙の&quot;interpr &lt;em&gt;i&lt;/em&gt; ter&quot;も修正されていると思いますので､近々出るpdf版もよろしくおねがいします｡&lt;/p&gt;</description>
        <pubDate>Wed, 17 Oct 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F-%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/10/17/subfiles%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F-%E3%81%97%E3%81%8A%E3%82%8A%E3%82%82%E5%87%BA%E3%81%99.html</guid>
        
        <category>技術書典</category>
        
        <category>LaTeX</category>
        
        
      </item>
    
      <item>
        <title>ML Dayやった, 新たなバイト始まった, 技術書典がある</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;p&gt;8月終わりからイベントが立て込んで､気づけば夏休みが終わってしまいました｡
悲しいね｡&lt;/p&gt;
&lt;h1 id=&quot;JSSST2018%E3%81%A7%E3%83%9D%E3%82%B9%E3%82%BF%E3%83%BC%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#JSSST2018%E3%81%A7%E3%83%9D%E3%82%B9%E3%82%BF%E3%83%BC%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F&quot;&gt;JSSST2018でポスター発表した&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;阪大行ってきました｡
ポスターは&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/%7Esat/pdf/jssst2018.pdf&quot;&gt;コチラ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;帰る時にちょうど台風が来たので家の直前の改札を通るときに停電して駅から出られなくなるなどといったハートフルストーリーがありました｡&lt;/p&gt;
&lt;p&gt;万博付近に泊まったのですがららぽーと以外に飯屋がなかったので非常に厳しかった｡
モノレールの駅は面白かった｡
&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;阪大に接続しているためか、乗客の知能が高そう。 &lt;a href=&quot;https://t.co/Ydf49eB8Ap&quot;&gt;pic.twitter.com/Ydf49eB8Ap&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1034591116090257409?ref_src=twsrc%5Etfw&quot;&gt;August 28, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;内容を決めてから発表するまでが20日くらいだったのでまじで8月はオワッでした｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;終了条件未遂 &lt;a href=&quot;https://t.co/7JiPWsTLts&quot;&gt;pic.twitter.com/7JiPWsTLts&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1028466431069904897?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/%E4%BC%9A%E3%81%88%E3%82%8B%E3%83%9E%E3%82%B7%E3%83%BC%E3%83%8A%E3%83%AA%E3%83%BC%E3%81%A8%E3%82%82%E5%AD%90?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#会えるマシーナリーとも子&lt;/a&gt; &lt;a href=&quot;https://t.co/xxyK0jsmI4&quot;&gt;pic.twitter.com/xxyK0jsmI4&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1028521136387063809?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;und&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%8A%E3%82%A4%E3%83%88?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#さまざまなナイト&lt;/a&gt; &lt;a href=&quot;https://t.co/nLV0ymb1D5&quot;&gt;pic.twitter.com/nLV0ymb1D5&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1030358939081175040?ref_src=twsrc%5Etfw&quot;&gt;August 17, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;途中でKoka言語の処理系Kokaのビルドシステムの改善をやってました｡&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;koka-lang/koka&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/koka-lang/koka/pull/74&quot;&gt;buildable with stack ghc #74 - koka-lang/koka&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;ML+Day+%232%E3%81%A7%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#ML+Day+%232%E3%81%A7%E7%99%BA%E8%A1%A8%E3%81%97%E3%81%9F&quot;&gt;ML Day #2で発表した&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;『Dive into algebraic effects』というタイトルで発表しました｡
スライドは&lt;a href=&quot;http://127.0.0.1:4000/pdf/mlday2.html&quot;&gt;コチラ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内容はJSSSTで話したものを､algebraic effectsの紹介を8割くらいにして発表しました｡
とりあえず伝道できたのでよかったです｡
あと懇親会でいろいろ話せたのでよかった｡&lt;/p&gt;
&lt;p&gt;このTシャツがウケたのでよかったです｡
&lt;/p&gt;&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Tシャツ入手しました。 &lt;a href=&quot;https://t.co/47Jyb7rHEg&quot;&gt;pic.twitter.com/47Jyb7rHEg&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/893078289710931968?ref_src=twsrc%5Etfw&quot;&gt;August 3, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;h1 id=&quot;HERP%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#HERP%E3%81%AB%E5%85%A5%E3%81%A3%E3%81%9F&quot;&gt;HERPに入った&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/2018/08/18/%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%82%B9%E3%82%AD%E3%83%AB%E3%82%BB%E3%83%83%E3%83%88.html&quot;&gt;前回の記事&lt;/a&gt;でお仕事情報古事記を発射したところ､&lt;a href=&quot;https://twitter.com/hiroqn&quot;&gt;@hiroqn&lt;/a&gt;さんに声をかけていただいて&lt;a href=&quot;https://herp.co.jp/&quot;&gt;HERP&lt;/a&gt;に長期インターンとして雇われました｡
書いたこと無いですがHaskell案件です｡
いいですね｡&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ということで9月が終わった｡&lt;/p&gt;
&lt;h1 id=&quot;%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%8C%E3%81%82%E3%82%8B&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%8C%E3%81%82%E3%82%8B&quot;&gt;技術書典がある&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ここが本題だ!! いいか､いいか､技術書典え40にて&lt;/p&gt;
&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://techbookfest.org/event/tbf05/circle/45010003&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/voApKPBa6L6VLLyuQEqRtxPfTn_n2ys-LmN1Ne2jhpXNkSguE06M_epkFHM6FgctpASou9w6VmFY0FgKiTU&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://techbookfest.org/event/tbf05/circle/45010003&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;技術書典5：Dragon University 詳細&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;Generative Adversarial Networkを始めとした生成モデルや言語処理系などに関しての多岐にわたる技術記事を編纂した冊子を発行する&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/rizaudo&quot;&gt;@rizaudo&lt;/a&gt;君に声をかけられた&lt;a href=&quot;https://twitter.com/xrekkusu&quot;&gt;@xrekkusu&lt;/a&gt;､&lt;a href=&quot;https://twitter.com/rairyuGO&quot;&gt;@rairyuGO&lt;/a&gt;､わしの4人が記事を持ち寄りました｡
よろしくおねがいします｡&lt;/p&gt;
&lt;p&gt;ボクは『つくってかんたんVirtual Machine-based Interpreter』というタイトルでVM型インタプリタの設計とちょっとした実装について書きました｡
ASTからVM命令へのコンパイル規則がダラダラと書かれているのが見どころなわけですが｡
ここで推定買ってくださる皆さんにお伝えしたいのは読めば分かるとおり証明がありません｡
そもそも変換の正しさを証明するつもりはなかったのですが､変換の正しさについて何も触れられてないのは不親切だなと脱稿してから思いました💀
さらにいうと､入力する言語はlet多相相当な型システムで型が付けられそうですが､全く触れてません!!!
そして先述のコンパイル規則は､入力となるプログラムに型が付けられる(type errorではじかれない)ことを前提としているのですが､これも何も言ってねぇな!!
バグ探しおよび証明は読者への課題とします｡&lt;/p&gt;
&lt;p&gt;実装はコチラ:&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;Nymphium/techbookfest5-toylang&quot;&gt;&lt;/div&gt;
&lt;p&gt;duneでmenhirの使い方がなんとなく分かったのが個人的に嬉しいポイントでした｡
でもディレクトリを一つ深くすると死んだのでもっと知りたいな､duneのこと…｡&lt;/p&gt;
&lt;p&gt;兎にも角にも､GANやcURL､GLSLや言語処理系などといったバラエティに富みながらもそれぞれ質の高い内容となっていますので､当日はびしょ〜じょと会場で握手!!!&lt;/p&gt;</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/10/05/ML-Day%E3%82%84%E3%81%A3%E3%81%9F,-%E6%96%B0%E3%81%9F%E3%81%AA%E3%83%90%E3%82%A4%E3%83%88%E5%A7%8B%E3%81%BE%E3%81%A3%E3%81%9F,-%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%8C%E3%81%82%E3%82%8B.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/10/05/ML-Day%E3%82%84%E3%81%A3%E3%81%9F,-%E6%96%B0%E3%81%9F%E3%81%AA%E3%83%90%E3%82%A4%E3%83%88%E5%A7%8B%E3%81%BE%E3%81%A3%E3%81%9F,-%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%8C%E3%81%82%E3%82%8B.html</guid>
        
        <category>ML Day</category>
        
        <category>JSSST</category>
        
        <category>雑感</category>
        
        <category>就活目的</category>
        
        
      </item>
    
      <item>
        <title>現在のスキルセット</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
こんなことがあったんや｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;先生にインターンに面接で落ちた話をしたら「君は自己アピールが下手だからね」と言われたので､自分のスキルセットをピタリと表す何かをそのうちまとめたいと思う｡でもまず､どこまでが自分でどこまでが自分じゃない…??&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1028226226274484225?ref_src=twsrc%5Etfw&quot;&gt;August 11, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;非常に厳しいですね｡
仕事をしたくないという気持ちも確かですが! 無職でジリ貧になって餓死というケースはもっとしたくないので職はゲットしようと思ってます｡&lt;/p&gt;
&lt;h1 id=&quot;%E5%B0%82%E9%96%80&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E5%B0%82%E9%96%80&quot;&gt;専門&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://logic.cs.tsukuba.ac.jp/&quot;&gt;プログラム論理研究室&lt;/a&gt;に在籍し､主に関数型言語を対象とした､プログラム言語に関する研究をおこなっています｡
プログラム変換(最適化､コンパイル)や､特定の言語機能を切り出して､そこで成り立つ良い性質を考えたりそれに実装を与えたりしています｡
最近はalgebaic effectsやdelimited continuationsの近辺で研究をおこなっています｡&lt;/p&gt;
&lt;p&gt;型に関する研究もする研究室に在籍しているので､TypeScript､Scala､Haskellといった複雑な型システムを持つ言語でもそれなりには戦えると思ってます｡&lt;/p&gt;
&lt;h1 id=&quot;%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83&quot;&gt;開発環境&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;NeoVim､zsh､tmux on ArchLinux&lt;/p&gt;
&lt;h1 id=&quot;%E8%A8%80%E8%AA%9E&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%A8%80%E8%AA%9E&quot;&gt;言語&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;Lua&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Lua&quot;&gt;Lua&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4年くらい書いてる&lt;/li&gt;
&lt;li&gt;Lua5.{1, 2, 3}の違いが分かる&lt;/li&gt;
&lt;li&gt;Luaの言語処理系を作れる&lt;/li&gt;
&lt;li&gt;Luaで言語処理系を作れる&lt;/li&gt;
&lt;li&gt;Luaのコードを見ればどんなLua VMのバイトコードにコンパイルされるか検討が付く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ボクが長所や短所を一番理解できてる言語がこれだと思います｡
C APIはノータッチなのでわかりません…｡&lt;/p&gt;
&lt;h2 id=&quot;OCaml&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#OCaml&quot;&gt;OCaml&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2年くらい書いてる&lt;/li&gt;
&lt;li&gt;OCamlで言語処理系を作れる&lt;/li&gt;
&lt;li&gt;core言語まぁまぁ分かる&lt;/li&gt;
&lt;li&gt;module言語ちょっと分かる&lt;/li&gt;
&lt;li&gt;type systemまぁまぁ分かる&lt;/li&gt;
&lt;li&gt;duneちょっとだけ分かる&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;open Core&lt;/code&gt;はあまり書かない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;研究で使ってます｡
表現力や型の強さがちょうどいい言語だと思う｡&lt;/p&gt;
&lt;h2 id=&quot;Scala&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Scala&quot;&gt;Scala&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2ヶ月くらい書いてる&lt;/li&gt;
&lt;li&gt;sbtちょっと使える&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年春になにか言語覚えようということで書き始めました｡
traitやサブタイピングなどといったリッチな型システムやナウい言語機能があり､
Javaとの接続がありながらCatsやScalazといった関数型プログラミングを支援する強力なライブラリもある､
OOPもFPもできる良い言語だと思います｡
sbtの起動は確かに遅い｡&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%BB%96&quot;&gt;他&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;Racket%2FScheme&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Racket%2FScheme&quot;&gt;Racket/Scheme&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1年くらい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;論文のモデル言語としてSchemeのサブセットが採用されることがままあるのでちょっと分かる｡
RacketはTyped Racketがちょっと書ける｡
また(delimited) continuationsの調査のために度々書いたりする｡&lt;/p&gt;
&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#JavaScript&quot;&gt;JavaScript&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2年くらい&lt;/li&gt;
&lt;li&gt;エコシステムは知らない&lt;/li&gt;
&lt;li&gt;生JSしか書いてない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;必要最小限書く&lt;/p&gt;
&lt;h3 id=&quot;Ruby&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2年くらい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;構文がデカすぎて全容をまるで把握できてない｡
このブログはJekyllで作られており､プラグインのいくつかは自分で書いてます｡
他にもデータ処理ではシェルスクリプトに次いで書捨てのスクリプトを書いて使っています｡
Onigurumaがとにかく使える｡&lt;/p&gt;
&lt;h3 id=&quot;Bash%2FZsh&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#Bash%2FZsh&quot;&gt;Bash/Zsh&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;6年くらい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コマンドラインに日々書いてる｡
Makefileと共にビルドや自動化でよく使っている｡&lt;/p&gt;
&lt;h3 id=&quot;%E8%8B%B1%E8%AA%9E&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%8B%B1%E8%AA%9E&quot;&gt;英語&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;GitHubでコミュニケーションを取ったりドキュメントを読んだり論文を読む程度には分かる&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;プログラム言語は専門分野なので､上記以外の言語でも書こうと思えばそれなりの早さで書けるようになると自負しています｡&lt;/p&gt;
&lt;h1 id=&quot;%E4%B8%BB%E3%81%AA%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%84&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E4%B8%BB%E3%81%AA%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%84&quot;&gt;主なプロダクツ&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2FNymphium%2Fopeth%22%3EOpeth%3C%2Fa%3E&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2FNymphium%2Fopeth%22%3EOpeth%3C%2Fa%3E&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Nymphium/opeth&quot;&gt;Opeth&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Lua 5.3 VMのバイトコード最適化器｡
副産物として､Lua 5.3 VMのバイトコードを制御フローグラフにしてビジュアライズするツールや､アセンブリ言語風にLua 5.3 VMの命令セットを書いてバイトコードにコンパイルするコンパイラ､VM命令を実行したりブレークポイントを付けてステップ実行できる､gdbみたいなデバッガを作りました｡
ビジュアライザで使った､&lt;a href=&quot;https://github.com/Nymphium/lua-graphviz&quot;&gt;graphvizのLuaバインディング&lt;/a&gt;も自作｡
Lua 5.3 VMのバイトコードの仕様は公開されていないため､Lua 5.1 VMのバイトコードの非公式なテキストやソースコードを読んで解析をおこなった｡&lt;/p&gt;
&lt;h2 id=&quot;%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2FNymphium%2Fpnyao%22%3Epnyao%3C%2Fa%3E&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2FNymphium%2Fpnyao%22%3Epnyao%3C%2Fa%3E&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Nymphium/pnyao&quot;&gt;pnyao&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;文献管理ツール｡
Scalaを習いながら作った｡
Play frameworkを使っている｡
Scalaを使っているサーバーサイドはだいたい実装ができているので､実はこれ以降はJSしか書かないかも｡&lt;/p&gt;
&lt;h1 id=&quot;%E3%81%9D%E3%81%AE%E4%BB%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E3%81%9D%E3%81%AE%E4%BB%96&quot;&gt;その他&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Linuxちょっと使える(6年)&lt;/li&gt;
&lt;li&gt;Git使える&lt;/li&gt;
&lt;li&gt;GitHub(issues, pull requests, CI)使える&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;何書けばいいのか分からないピ…｡&lt;/p&gt;
&lt;p&gt;バイト先情報もお待ちしております｡
ご連絡は&lt;a href=&quot;https://twitter.com/Nymphium&quot;&gt;@Nymphium &lt;/a&gt;かs1311350 at gmail.comまでお願いします｡&lt;/p&gt;
&lt;h1 id=&quot;%E8%BF%BD%E8%A8%9820181004&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181004&quot;&gt;追記20181004&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ツイッター経由で&lt;a href=&quot;https://herp.co.jp/&quot;&gt;HERP&lt;/a&gt;に(多分)長期インターンとして入りました｡
この度は誠にありがとうございました｡
リモートでOKということで家からでなくて最高です｡&lt;/p&gt;
&lt;div class=&quot;enclosed-tweet&quot; align=&quot;center&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ツイッで職を探したらHERPに拾われました。写真はブレた牛タンです。 &lt;a href=&quot;https://t.co/6WHdopXHLK&quot;&gt;pic.twitter.com/6WHdopXHLK&lt;/a&gt;&lt;/p&gt;— びしょ〜じょ (@Nymphium) &lt;a href=&quot;https://twitter.com/Nymphium/status/1047447450338742272?ref_src=twsrc%5Etfw&quot;&gt;October 3, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p&gt;この牛タンは美味かった｡&lt;/p&gt;
&lt;p&gt;2020年3月卒業後のお仕事はまだ探してますんでよろしくおねがいします｡&lt;/p&gt;
&lt;p&gt;追記おわり&lt;/p&gt;
&lt;hr&gt;</description>
        <pubDate>Sat, 18 Aug 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/08/18/%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%82%B9%E3%82%AD%E3%83%AB%E3%82%BB%E3%83%83%E3%83%88.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/08/18/%E7%8F%BE%E5%9C%A8%E3%81%AE%E3%82%B9%E3%82%AD%E3%83%AB%E3%82%BB%E3%83%83%E3%83%88.html</guid>
        
        <category>就活目的</category>
        
        
      </item>
    
      <item>
        <title>Algebraic Effectsであそぼう</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡&lt;/p&gt;
&lt;p&gt;ここしばらく20行/日くらいしかコード書いてません｡
いやもっと少ないかも…｡
いや研究してますんで! いや〜研究もそんなにしてないな…じゃあ何を…&lt;/p&gt;
&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Algebraic effectsとは､2001年くらいに提唱されてから､爆流行らずともにわかに盛り上がりを見せつつある言語機能である｡
極めて雑に説明すると､&lt;em&gt;継続を取ってこれる例外&lt;/em&gt;である｡
Plotkin氏(またお前か)が代数学的アプローチによる基盤を作り､そこにハンドラが付いてプログラム言語の機能として考えられるようになった｡
ボクの話のうち1〜10割間違っていることは確かなので､誤った情報を一切入れたくない人は&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot; title='Matija Prentar. &quot;An Introduction to Algebraic Effects and Handlers.” Electronic Notes in Theoretical Computer Science 319. 2015. ' id=&quot;fnref1&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;を読んでください｡&lt;/p&gt;
&lt;h2 id=&quot;1-1.+algebraic+effects%E5%AE%9F%E8%A3%85%E3%81%AE%E6%9C%89%E5%90%8D%E3%81%A9%E3%81%93%E3%82%8D&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1-1.+algebraic+effects%E5%AE%9F%E8%A3%85%E3%81%AE%E6%9C%89%E5%90%8D%E3%81%A9%E3%81%93%E3%82%8D&quot;&gt;1-1. algebraic effects実装の有名どころ&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.eff-lang.org/&quot;&gt;Eff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;algebraic effectsを言語機能として初めて設計された言語｡
MLスタイルのシンタックスでHindley-Milner型推論がある｡&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;impls&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/matijapretnar/eff&quot;&gt;matijapretnar/eff&lt;/a&gt;&lt;label id=&quot;effinterp&quot;&gt;&lt;/label&gt;&lt;/p&gt;

&lt;p&gt;OCaml製Effのインタープリタ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/atnos-org/eff&quot;&gt;athnos-org/eff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ScalaのDSLとして実装されている&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://okmij.org/ftp/continuations/Eff/&quot;&gt;『Eff Directly in OCaml』&lt;/a&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot; title=&quot;Oleg Kiselyov, K. C. Sivaramakrishnan. “Eff directly in OCaml.” ML Workshop. 2016. &quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Oleg氏(またお前か)によるEffを､delimited continuationライブラリを使ってOCamlのDSLとして実装したもの｡
Effはdelimited continuationをエミュレートできるが､実はEff &lt;em&gt;を&lt;/em&gt; delimited continuationでエミュレートできることがわかる｡&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/project/koka/&quot;&gt;Koka&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MS Researchがやっていってる言語｡
手続き型っぽいシンタックスと､Row-typesというeffectsが型に滲み出る､さながらモナドみがある型システムを持っている｡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;multicoreOCaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OCamlに直接algebraic effects &amp;amp; handlerを追加した方言｡
continuationがoneshotとなっており､明示的にクローンしないと2回使えない｡
この&quot;2回使えない&quot;はlinear typeを導入して弾いてほしいが､実際はランタイムエラーである｡&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2.+%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F%E8%A9%A6%E3%81%99&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F%E8%A9%A6%E3%81%99&quot;&gt;2. さっそく試す&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;algebraic effects界隈ではスタンダードなEff言語を例に見てみる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* effect definition *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;(* invoke *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* value handler *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* continuation *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行すると､&lt;code&gt;47&lt;/code&gt;という表示が得られる｡
どういうことなんや｡
素直な心を使うと､&lt;code&gt;(+)&lt;/code&gt;は&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt;､&lt;code&gt;3 + perform (Eff 4)&lt;/code&gt;は&lt;code&gt;int&lt;/code&gt;､&lt;code&gt;perform (Eff 4)&lt;/code&gt;も&lt;code&gt;int&lt;/code&gt;ということが考えられる｡
なるほど&lt;code&gt;Eff&lt;/code&gt;のシグネチャ&lt;code&gt;int -&amp;gt; int&lt;/code&gt;は､矢印の左辺がeffectの引数､右辺はcontextのholeの型か｡
&lt;code&gt;perform&lt;/code&gt;は何??? ……じゃあ&lt;code&gt;Eff&lt;/code&gt;は&lt;code&gt;int -&amp;gt; int eff&lt;/code&gt;ということにして&lt;code&gt;perform&lt;/code&gt;は&lt;code&gt;'a eff -&amp;gt; 'a&lt;/code&gt;でどうだ､これでいいだろう!!!
という感じで推理していくと&lt;code&gt;4&lt;/code&gt;という表示は&lt;code&gt;effect (Eff x) k -&amp;gt; print_int x; k x&lt;/code&gt;という箇所で発射されたんじゃないかという感じがある｡
&lt;code&gt;7&lt;/code&gt;は&lt;code&gt;x -&amp;gt; print_int x&lt;/code&gt;ですね｡
&lt;a href=&quot;/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html&quot;&gt;前回の記事&lt;/a&gt;を読んでもらえると分かるが､&lt;code&gt;handle e with (handlers)&lt;/code&gt;がdelimiterで
&lt;code&gt;k&lt;/code&gt;が切り取られた継続になる｡
だいたいそう｡&lt;/p&gt;
&lt;p&gt;わかった｡
念のため他の例も見ておこう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;print_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chooseh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;3102051020&lt;/code&gt;という表示になる｡
継続を複製してる感ありますね｡&lt;/p&gt;
&lt;p&gt;同じ&lt;code&gt;Choose&lt;/code&gt; effectでも型さえ合ってれば異なる処理が書ける､つまり定義と実装を分けることができるのが特徴となっている｡
ここでHaskellerは｢Freeモナドやんけ!｣となるらしいですがボクはHaskellをやっていってないのでわかりませんでした｡
型だけ定義して､interpretationはユーザに任せるということなので確かに同じようだ｡
そもそもalgebraic effectの&lt;em&gt;algebraic&lt;/em&gt;は&quot;free &lt;em&gt;algebra&lt;/em&gt;“から来てるそう&lt;sup id=&quot;fnref3&quot; title=&quot;Andrej Bauer. “What is algebraic about algebraic effects and handlers?.” eprint arXiv:1807.05923. 2018. &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;なので､袂を分かつ存在である｡
実際&lt;a href=&quot;#effinterp&quot;&gt;Effインタプリタ&lt;/a&gt;はFreeモナドを使って実装しているようだ｡&lt;/p&gt;
&lt;p&gt;そしていろんなeffectsをいっぺんにハンドルするぜ!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Eff&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Choose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手軽だ｡
HaskellではFreeモナドを発展させたextensible effects&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot; title=&quot;快速のExtensible effects  – モナドとわたしとコモナド https://fumieval.hatenablog.com/entry/2017/08/02/230422 &quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot; title=&quot;Oleg Kiselyov, Amr Sabry, Cameron Swords. “Extensible Effeects: An Alternative to Monad Transformers.” ACM SIGPLAN Notices. Vol. 48. No. 12. ACM, 2013. &quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;といったものが流行っているそうで､
確かにモナドトランスフォーマーガン積みして爆重になるという困難から抜け出せるらしい｡&lt;/p&gt;
&lt;h1 id=&quot;3.+%E5%BF%9C%E7%94%A8&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+%E5%BF%9C%E7%94%A8&quot;&gt;3. 応用&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;delimited continuationが扱えるうえにCPS的な書き方ではなくdirect-styleで記述できるため､
syntacticにきれいに､バグらず簡単に書ける､というありがたみがある｡
ボクの語彙が少ないので詳細は文献&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn6&quot; rel=&quot;footnote&quot; title=&quot;Anderj Bauer, Matija Prentar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming, 84(1), pp.108-123. &quot; id=&quot;fnref6&quot;&gt;6&lt;/a&gt;]&lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#fn7&quot; rel=&quot;footnote&quot; title=&quot;Dolan, Stephen, Spiros Eliopoulos, Daniel Hillerström, Anil Madhavapeddy, K. C. Sivaramakrishnan, Leo White. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming, pp. 98-117. Springer, Cham, 2017. &quot; id=&quot;fnref7&quot;&gt;7&lt;/a&gt;]&lt;/span&gt;を読んでください｡&lt;/p&gt;
&lt;h1 id=&quot;4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;4. おわりに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;また情報量が0になってしまった……!!!&lt;/p&gt;
&lt;h1 id=&quot;%E8%BF%BD%E8%A8%9820181030&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#%E8%BF%BD%E8%A8%9820181030&quot;&gt;追記20181030&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;ReactにHooksという機能が追加されたがこれはまさにAlgebraic Effectsということで､ReactはさておきAlgebraic Effectsに関してもう少し実例を交えて詳しいものをQiitaに発射した｡&lt;/p&gt;
&lt;div class=&quot;twicard&quot;&gt;
  &lt;span class=&quot;image&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://cdn.qiita.com/assets/qiita-fb-2887e7b4aad86fd8c25cea84846f2236.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class=&quot;txt&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;&lt;a href=&quot;https://qiita.com/Nymphium/items/e6ce580da8b87ded912b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Algebraic Effectsとは? 出身は? 使い方は? その特徴とは? 調べてみました! - Qiita&lt;/a&gt;&lt;/div&gt;
    &lt;div class=&quot;description&quot;&gt;ReactのHooksが実質algebraic effectsなんじゃないかということでalgebraic effectsに関する怪文書が流布して鼻白んでしまう､そんな未来を阻止するため､曲がりなりにもalgebraic effect…&lt;/div&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;追記おわり&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Matija Prentar. &quot;An Introduction to Algebraic Effects and Handlers.” Electronic Notes in Theoretical Computer Science 319. 2015. &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;Oleg Kiselyov, K. C. Sivaramakrishnan. “Eff directly in OCaml.” ML Workshop. 2016. &lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Andrej Bauer. “What is algebraic about algebraic effects and handlers?.” eprint arXiv:1807.05923. 2018. &lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;快速のExtensible effects  – モナドとわたしとコモナド &lt;a href=&quot;https://fumieval.hatenablog.com/entry/2017/08/02/230422&quot;&gt;https://fumieval.hatenablog.com/entry/2017/08/02/230422&lt;/a&gt; &lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Oleg Kiselyov, Amr Sabry, Cameron Swords. “Extensible Effeects: An Alternative to Monad Transformers.” ACM SIGPLAN Notices. Vol. 48. No. 12. ACM, 2013. &lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn6&quot;&gt;
&lt;p&gt;Anderj Bauer, Matija Prentar. “Programming with algebraic effects and handlers.” Journal of Logical and Algebraic Methods in Programming, 84(1), pp.108-123. &lt;a href=&quot;#fnref6&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn7&quot;&gt;
&lt;p&gt;Dolan, Stephen, Spiros Eliopoulos, Daniel Hillerström, Anil Madhavapeddy, K. C. Sivaramakrishnan, Leo White. “Concurrent system programming with effect handlers.” International Symposium on Trends in Functional Programming, pp. 98-117. Springer, Cham, 2017. &lt;a href=&quot;#fnref7&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Mon, 13 Aug 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/08/13/algebraic_effects_tutorial.html</guid>
        
        <category>OCaml</category>
        
        <category>Algebraic Effects</category>
        
        
      </item>
    
      <item>
        <title>delimited continuationの夏</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
control/promptとprompt tagへの理解が必要になったため､やっていきましょう｡&lt;/p&gt;
&lt;h1 id=&quot;1.+continuation%3F%3F%3F+%E7%B6%99%E7%B6%9A%3F%3F%3F+is+power+%3F%3F%3F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+continuation%3F%3F%3F+%E7%B6%99%E7%B6%9A%3F%3F%3F+is+power+%3F%3F%3F&quot;&gt;1. continuation??? 継続??? is power ???&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;継続とは &lt;em&gt;“残りの計算”&lt;/em&gt; などと言われます｡
\(e_1+e_2\)という式があって､左辺から計算がおこなわれていくとする｡
\(e_1 \Downarrow v_1\)となると､残りの計算は\(\lambda x. x + e_2 \)となります｡
\(\lambda x. x + e_2 \)はよく\([\ ]+e_2\)と表現され､この\([\ ]\)はholeと呼ばれたりする｡
この継続を\(E\)などとおいて､\(E\)をぶっこ抜いてきてなにか値を渡したりするときは\(E[x]\)と表記し､holeに\(x\)が入っていく｡
OK､私も皆さんも &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; と思うので話を進めよう｡&lt;/p&gt;
&lt;h1 id=&quot;2.+Delimited+continuation&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+Delimited+continuation&quot;&gt;2. Delimited continuation&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;和訳すると限定継続です｡これで9割は分かったと思うが､call/ccよりも取ってくる継続の範囲が限定されているというイッメジです｡
StackOverflowのこれ&lt;sup id=&quot;fnref1&quot; title=&quot;What exactly is a “continuation prompt?” &quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;が図解付きでわかりやすい｡&lt;/p&gt;
&lt;h2 id=&quot;2-1.+shift%2Freset&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+shift%2Freset&quot;&gt;2-1. shift/reset&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;久しぶりにRacket引っ張ってきます｡Schemeでもなんでもdelimited continuationが使えれば良いですが｡
Racketだとshift/resetを使うには&lt;code&gt;(require racket/control)&lt;/code&gt;する必要がある｡
Guileだと&lt;code&gt;(use-modules (ice-9 control))&lt;/code&gt;やね｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;call/cc&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;call/cc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;shift/reset&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; (require racket/control)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-13&quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-13&quot; (work in the same way as above)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; displays &quot;-19&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;雑な説明でしたが､&lt;code&gt;call/cc&lt;/code&gt;は中のコンテキスト&lt;code&gt;(+ 3 [])&lt;/code&gt;も継続の呼び出し時に捨ててますね｡
あとRacketの&lt;code&gt;shift&lt;/code&gt;は&lt;code&gt;reset&lt;/code&gt;が見つからなかったらエラーにならずに最外のコンテキストを持ってくるんですねぇ｡&lt;/p&gt;
&lt;p&gt;shift/resetの詳細は文献&lt;sup id=&quot;fnref2&quot; title=&quot;浅井健一. “shift/reset プログラミング入門.” ACM SIGPLAN Continuation Workshop 2011. 2011. http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-j.pdf &quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;をご覧ください｡
…ちょっと待って! &lt;code&gt;shift0&lt;/code&gt;が無いやん! ということで文献&lt;sup id=&quot;fnref3&quot; title=&quot;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;を見る｡&lt;/p&gt;
&lt;p&gt;まず&lt;code&gt;shift&lt;/code&gt;の定義を見ます｡&lt;/p&gt;
&lt;p&gt;\[
\begin{array}{r}
    M\left[\left(\mathtt{reset}\ C\left[\left(\mathtt{shift\ f}\ E\right)\right]\right)\right] \triangleright M\left[\left(\mathtt{reset}\ E’\right)\right]\\
    \mathrm{where}\ E’=E \{\mathtt{f}\mapsto \left(\mathtt{lambda}\ \left(\mathtt{x}\right)\ \left(\mathtt{reset}\ C[\mathtt{x}]\right)\right)\}
\end{array}
\]&lt;/p&gt;
&lt;p&gt;おk｡&lt;/p&gt;
&lt;p&gt;では&lt;code&gt;shift0&lt;/code&gt;はどうかな?&lt;/p&gt;
&lt;p&gt;\[
\begin{array}{r}
    M\left[\left(\mathtt{reset}\ C\left[\left(\mathtt{shift0\ f}\ E\right)\right]\right)\right] \triangleright M\left[E’\right]\\
    \mathrm{where}\ E’=E \{\mathtt{f}\mapsto \left(\mathtt{lambda}\ \left(\mathtt{x}\right)\ \left(\mathtt{reset}\ C[\mathtt{x}]\right)\right)\}
\end{array}
\]&lt;/p&gt;
&lt;p&gt;えっ何が違うん? と一瞬困るわけですが､&lt;code&gt;shift0&lt;/code&gt;では一発評価が進むと&lt;code&gt;M&lt;/code&gt;の中から&lt;code&gt;reset&lt;/code&gt;が消えてますね｡
なので&lt;code&gt;E'&lt;/code&gt;の中の最外の&lt;code&gt;shift0&lt;/code&gt;は&lt;code&gt;M&lt;/code&gt;まで行ってしまうわけです｡
&lt;code&gt;shift&lt;/code&gt;と&lt;code&gt;shift0&lt;/code&gt;の違いを実際に文献の例から見てみます｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;with-shift&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '(a)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ここの&lt;code&gt;reset&lt;/code&gt;外のコンテキスト&lt;code&gt;M&lt;/code&gt;は&lt;code&gt;(reset (cons 'a []))&lt;/code&gt;となる｡
つまり変換規則で対象となっている&lt;code&gt;reset&lt;/code&gt;は内側のほう｡
&lt;code&gt;shift&lt;/code&gt;外のコンテキスト&lt;code&gt;C&lt;/code&gt;は&lt;code&gt;[]&lt;/code&gt;､つまり空ですので最外の&lt;code&gt;shift&lt;/code&gt;が対象となっている｡
&lt;code&gt;E&lt;/code&gt;は&lt;code&gt;(shift g '())&lt;/code&gt;となる｡&lt;/p&gt;
&lt;p&gt;ではワンステップすすめると&lt;code&gt;M[(reset E{f := (lambda (x) (reset C[x]))})]&lt;/code&gt;なので&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは同様にやっていく｡内側の&lt;code&gt;reset&lt;/code&gt;をやっていくので&lt;code&gt;(reset (cons 'a (reset '())))&lt;/code&gt;で､あとはアーナンダビッグステップに行くぞということで&lt;code&gt;'(a)&lt;/code&gt;が得られる｡&lt;/p&gt;
&lt;p&gt;続いて&lt;code&gt;shift0&lt;/code&gt;について見よう｡
文献&lt;sup id=&quot;fnref3&quot; title=&quot;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;ではdelimiterは&lt;code&gt;reset&lt;/code&gt;のみだったが､racket/controlの&lt;code&gt;shift0&lt;/code&gt;に対応するdelimiterは&lt;code&gt;reset0&lt;/code&gt;となる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;with-shift0&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;オッなんか違うな｡当然違うわけだ｡
だいたい形は同じなのですが､
ワンステップすすめると&lt;code&gt;M[(E{f := (lambda (x) (reset0 C[x]))})]&lt;/code&gt;となる｡
&lt;code&gt;E&lt;/code&gt;の外に&lt;code&gt;reset(0)&lt;/code&gt;がつかないわけだ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で&lt;code&gt;reset0&lt;/code&gt;と&lt;code&gt;shift0&lt;/code&gt;の間のコンテキストは拾われずに&lt;code&gt;shift0&lt;/code&gt;内のexpressionが生き残るので､&lt;code&gt;'()&lt;/code&gt;を返す｡&lt;/p&gt;
&lt;p&gt;あ〜〜 &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; ｡
この &lt;em&gt;“resetは1度しか使えない”&lt;/em&gt; という回数制限はlinear logicの影が潜んでいそうだ｡
実際この回数制限nessを型で表そうとするとそんな雰囲気になるはずだ｡&lt;/p&gt;
&lt;h2 id=&quot;2-2.+control%2Fprompt&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-2.+control%2Fprompt&quot;&gt;2-2. control/prompt&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;だいたいshift/resetというと語弊があるが､だいたいそんな感じという認識がある(間違ってると思うのでご教授願います｡)｡
&lt;code&gt;prompt&lt;/code&gt;は&lt;code&gt;control&lt;/code&gt;と対応するdelimiterに過ぎず､動きとしては&lt;code&gt;reset&lt;/code&gt;同様に継続を区切るだけだ｡
“control prompt&quot;で検索するときは､”-command&quot;を付けないとコマンドプロンプトに関する話が大量に出てきて血管ブチ切れそうになる｡&lt;/p&gt;
&lt;p&gt;&lt;code&gt;control&lt;/code&gt;は文献&lt;sup id=&quot;fnref3&quot; title=&quot;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103 &quot;&gt;&lt;a href=&quot;#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;より､
\[
\begin{array}{r}
    M\left[\left(\mathtt{reset}\ C\left[\left(\mathtt{control\ f}\ E\right)\right]\right)\right] \triangleright M\left[\left(\mathtt{reset}\ E’\right)\right]\\
    \mathrm{where}\ E’=E \{\mathtt{f}\mapsto \left(\mathtt{lambda}\ \left(\mathtt{x}\right)\ \left(C[\mathtt{x}]\right)\right)\}
\end{array}
\]&lt;/p&gt;
&lt;p&gt;この論文ではdelimiterが&lt;code&gt;reset&lt;/code&gt;だがとりあえずOKとしたい｡
&lt;code&gt;f&lt;/code&gt;にバインドされる継続の中に&lt;code&gt;reset&lt;/code&gt;がないという点で&lt;code&gt;shift&lt;/code&gt;と異なっている｡
論文の例を見てみよう｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;with-shift&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '(a)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Racketは3種類のカッコが使えるからS式もちょっぴり分かりやすくなるぞ!
これを規則にそって解いてくと次のように進む｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ふむふむ｡はい｡&lt;/p&gt;
&lt;p&gt;では&lt;code&gt;shift&lt;/code&gt;を&lt;code&gt;control&lt;/code&gt;にしたらどうなるか―&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; returns '()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果が異なるわけだな｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;c1&quot;&gt;; 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;λ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 4  gが使われないので `[cons 'a ...]` が破棄される&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; 5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わかった｡
とりあえずこのへんで &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; ということにいたしましょうか…｡&lt;/p&gt;
&lt;h1 id=&quot;3.+prompt+tag&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+prompt+tag&quot;&gt;3. prompt tag&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;継続をキャプチャするオペレータ(&lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;shift0&lt;/code&gt;,&lt;code&gt;control&lt;/code&gt;など)はそれぞれ対応する､取るべき継続を区切ってくれるdelimiterがある｡
例えばracket/controlでは&lt;code&gt;shift&lt;/code&gt;に対応するのは&lt;code&gt;reset&lt;/code&gt;で､&lt;code&gt;shift0&lt;/code&gt;には&lt;code&gt;reset0&lt;/code&gt;が対応する｡
更には同じ&lt;code&gt;shift&lt;/code&gt;でも､&lt;code&gt;shift&lt;/code&gt;式&lt;sup id=&quot;fnref4&quot; title=&quot;racket/controlのshiftはマクロ! はいごもっとも! &quot;&gt;&lt;a href=&quot;#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;のコンテキストで最も近い&lt;code&gt;reset&lt;/code&gt;が動的に対応付けられる｡&lt;/p&gt;
&lt;p&gt;この､&lt;code&gt;shift&lt;/code&gt;や&lt;code&gt;control&lt;/code&gt;などのcontrol operatorとdelimiterの対応をもっと柔軟にしたい! という要望に応えるのがprompt tagである｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;prompt tag&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-continuation-prompt-tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p~&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-continuation-prompt-tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'p~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p~&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;begin&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this is p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shift-at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p~&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;begin&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;this is p~&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; display &quot;this is pthis is p~23&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;確かに､最寄りの&lt;code&gt;reset&lt;/code&gt;ではなく､プロンプトに対応する&lt;code&gt;reset-at&lt;/code&gt;の継続を取っている｡&lt;/p&gt;
&lt;p&gt;ちなみにOCamlのdelimited continuationライブラリ&lt;a href=&quot;http://okmij.org/ftp/continuations/implementations.html#caml-shift&quot;&gt;delimcc&lt;/a&gt;では､prompt tagのみが使われている｡
なんだか日本語が足りないが､Racketの&lt;code&gt;shift&lt;/code&gt;や&lt;code&gt;reset&lt;/code&gt;はなく､&lt;code&gt;shift-at&lt;/code&gt;や&lt;code&gt;reset-at&lt;/code&gt;のみ､という感じ｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delimcc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;`A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* returns [] *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは何故か｡多分answer-type polymorphismをOCamlではサポートしてないからじゃないかな｡
詳細はdelimccに関する文献&lt;sup id=&quot;fnref5&quot; title=&quot;Oleg Kiselyov. “Delimited Control in OCaml, Abstractly and Concretely: System Description.” FLOPS 2010. 2010. https://link.springer.com/chapter/10.1007/978-3-642-12251-4_22 &quot;&gt;&lt;a href=&quot;#fn5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;を読めって話ですよ｡読んでへん｡&lt;/p&gt;
&lt;p&gt;とりあえずここは &lt;strong&gt;&lt;em&gt;完全に理解した&lt;/em&gt;&lt;/strong&gt; ということで､よろしいでしょうか｡&lt;/p&gt;
&lt;h1 id=&quot;4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;4. おわりに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;なんとなくつかめてきた気がします｡
夏服の剣持力也くんがうさんくさいメガネ掛けててよかった｡&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/29838344/what-exactly-is-a-continuation-prompt&quot;&gt;What exactly is a “continuation prompt?”&lt;/a&gt; &lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;浅井健一. “shift/reset プログラミング入門.” ACM SIGPLAN Continuation Workshop 2011. 2011. &lt;a href=&quot;http://pllab.is.ocha.ac.jp/%7Easai/cw2011tutorial/main-j.pdf&quot;&gt;http://pllab.is.ocha.ac.jp/~asai/cw2011tutorial/main-j.pdf&lt;/a&gt; &lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn3&quot;&gt;
&lt;p&gt;Shan, Chung-chieh. “Shift to control.” Proceedings of the 5th workshop on Scheme and Functional Programming. 2004. &lt;a href=&quot;ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103&quot;&gt;ftp://cs.indiana.edu/pub/techreports/TR600.pdf#page=103&lt;/a&gt; &lt;a href=&quot;#fnref3&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn4&quot;&gt;
&lt;p&gt;racket/controlの&lt;code&gt;shift&lt;/code&gt;はマクロ! はいごもっとも! &lt;a href=&quot;#fnref4&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn5&quot;&gt;
&lt;p&gt;Oleg Kiselyov. “Delimited Control in OCaml, Abstractly and Concretely: System Description.” FLOPS 2010. 2010. &lt;a href=&quot;https://link.springer.com/chapter/10.1007/978-3-642-12251-4_22&quot;&gt;https://link.springer.com/chapter/10.1007/978-3-642-12251-4_22&lt;/a&gt; &lt;a href=&quot;#fnref5&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 19 Jul 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/07/19/delimited-continuation%E3%81%AE%E5%A4%8F.html</guid>
        
        <category>Delimited Continuation</category>
        
        <category>Racket</category>
        
        <category>OCaml</category>
        
        
      </item>
    
      <item>
        <title>Scala書いた</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
最近はヴァーチャルユーチューバーに脳を破壊されてしまってほぼ毎日観てます｡
剣持&lt;em&gt;力&lt;/em&gt;也くんが好きです｡&lt;/p&gt;
&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Scalaに入門するついでに､文献…というかPDFを管理するシステムを作った｡&lt;/p&gt;
&lt;div class=&quot;github-widget&quot; data-repo=&quot;Nymphium/pnyao&quot;&gt;&lt;/div&gt;
&lt;p&gt;配色などはともかく､個人的には使いやすくなっとるんじゃないでしょうか｡
もちろんボクが作ったので､どこを押すと何が起きるかは100%分かっているため､他の人にとって使いやすいかどうかはよくわかりませんが…｡&lt;/p&gt;
&lt;h1 id=&quot;2.+Scala&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+Scala&quot;&gt;2. Scala&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;case class&lt;/code&gt;でADTのようなものを定義できる｡
トレイト&lt;code&gt;T&lt;/code&gt;を継承すれば型&lt;code&gt;T&lt;/code&gt;のデータコンストラクタでまとめられるということでいいのかな｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パターンマッチの実態はクラスオブジェクトの&lt;code&gt;unapply&lt;/code&gt;メソッドで､カスタマイザビリティがなかなか高い｡
&lt;code&gt;case class&lt;/code&gt;は&lt;code&gt;apply&lt;/code&gt;/&lt;code&gt;unapply&lt;/code&gt;メソッドが自動でクラスのメンバになる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
Javaでいうところの

class K1&amp;lt;A&amp;gt; {
  K1&amp;lt;A&amp;gt;(a: A) {
    this.a = a;
  }
}

でいいのか?
*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;K1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints &quot;match&quot; and returns 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数をクラスのメンバにしてくれたりもしているようだ｡&lt;/p&gt;
&lt;p&gt;また&lt;code&gt;implicit&lt;/code&gt;に定義されたメソッドにより安全な暗黙の型変換を定義できるのも面白い｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromStringToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aiueo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// convert &quot;aieuo&quot; to Seq(97, 105, 101, 117, 111) ~&amp;gt; (folded)
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Conv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5310
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型変換が必要そうなところで型の合う直近の&lt;code&gt;implicit&lt;/code&gt;メソッドを参照して変換する､のかな(わかってない)｡
またスコープはメソッドの定義されたクラスを超えない｡
ただし継承を使うと継承先のクラス内でも型変換が起こる｡&lt;/p&gt;
&lt;p&gt;Javaみもあって少々つらいときがある(&lt;code&gt;String&lt;/code&gt;集合に&lt;code&gt;null&lt;/code&gt;が含まれたり､Javaいライブラリを使うと&lt;code&gt;null&lt;/code&gt;が混入する)が､
概ねモダンでOOPとしつつFunctional Programmingもしっかりできる言語でなかなか良い｡
ビルドツールのsbtもカスタマイザビリティが高く､開発もわりとスムーズにいく｡&lt;/p&gt;
&lt;h1 id=&quot;3.+Play+web+framework&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+Play+web+framework&quot;&gt;3. Play web framework&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Java/Scalaで使えるWebフレームワーク｡
結構面白いんじゃないでしょうか､Webフレームワークを触ったことがなかったので評価できませんが｡&lt;/p&gt;
&lt;h2 id=&quot;3-1.+%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3-1.+%E3%83%8F%E3%83%9E%E3%82%8A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88&quot;&gt;3-1. ハマりポイント&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在はv2.6が最新だが､2.4､2.5､2.6で非互換な部分がいくつかあるが､インタネッツの記事にバージョンの表記がなかったりして､メソッドがないやんとか型合わないやんとかがあった｡&lt;/p&gt;
&lt;h1 id=&quot;4.+Pnyao&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#4.+Pnyao&quot;&gt;4. Pnyao&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本題｡
PDFのメタデータにはiTextを使っている｡
最初は何も考えずPDFメタデータの読み書きだけを実装したのでプロジェクトが分かれている｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;(root)
  + ...
  + (subprj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようなプロジェクトの構成になっとるとき､rootのbuild.sbtでサブプロジェクトをガバっとやる｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;build.sbt&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subprj&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subprj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.dependsOn&lt;/code&gt;でビルドの依存関係をやっておる｡&lt;/p&gt;
&lt;p&gt;他はなんか読んでください｡&lt;/p&gt;
&lt;p&gt;あとはサーバのイベントにアクションをフックするところが面倒だった｡
クラスにDIして&lt;code&gt;ApplicationLifecycle&lt;/code&gt;をランタイムに突っ込んでいく｡&lt;/p&gt;
&lt;div class=&quot;codeline with_caption&quot;&gt;&lt;pre&gt;28
29&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;pnyao/app/services/Pnyao.scala&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Singleton&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pnyao&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ApplicationLifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PnyaoService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;このオブジェクトにPlayサーバのイベント時に発火するアクションをフックできる｡&lt;/p&gt;
&lt;div class=&quot;codeline with_caption&quot;&gt;&lt;pre&gt;59
60&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;span class=&quot;listing-name&quot;&gt;pnyao/app/services/Pnyao.scala&lt;/span&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt; &lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addStopHook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;successful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addShutdownHook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;JVMの終了にもフックしている｡
Playサーバのイベントにフックしてたのは､sbtシェル上で起動/終了をしてたから必要であって､後述のとおりSystemdで起動/終了をまかせるようにしたのでもはや不要かも｡&lt;/p&gt;
&lt;p&gt;この場合JVMの終了かPlayの終了かどちらかだけでアクションを発火してほしいので､&lt;code&gt;lazy val&lt;/code&gt;として定義すればいい｡&lt;/p&gt;
&lt;p&gt;他はもうないな｡
JSONを扱う部分があり､circeとPlayのJSONライブラリという2つの変換器が混在している｡
これは先述の通りPDFメタデータ扱う部分だけ最初に実装したことに起因している｡&lt;/p&gt;
&lt;h1 id=&quot;5.+%E3%82%A2%E3%83%83%E3%83%94%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%8C%96&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#5.+%E3%82%A2%E3%83%83%E3%83%94%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%8C%96&quot;&gt;5. アッピケーション化&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;sbt-assemblyでプロジェクトをjarに固めて実行するようにした｡
さらにサーバをsystemd serviceとして起動/停止できるようにした｡&lt;/p&gt;
&lt;h1 id=&quot;6.+%E6%89%80%E6%84%9F&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#6.+%E6%89%80%E6%84%9F&quot;&gt;6. 所感&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;楽しかった､が､Webブラウザでのクリックイベントなどはジャバスクを書かざるをえなかったのがつらい｡
ScalaJSをPlayがサポートしてくれればいいのかもしれない､ScalaJS書いたことないんですけど｡
Scalaはちゃんとかいたのがここ3､4週間くらいなので､もうすこしやっていきたい｡&lt;/p&gt;
&lt;h1 id=&quot;7.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#7.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;7. おわりに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;人生おわった…｡&lt;/p&gt;</description>
        <pubDate>Sat, 09 Jun 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/06/09/Scala%E6%9B%B8%E3%81%84%E3%81%9F.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/06/09/Scala%E6%9B%B8%E3%81%84%E3%81%9F.html</guid>
        
        <category>Scala</category>
        
        
      </item>
    
      <item>
        <title>Ensime-vimを入れる</title>
        <enclosure type="image/png" length="0" url="https://nymphium.github.io/pictures/github_icon.png"></enclosure>
        <description>&lt;p&gt;こんにちは､びしょ〜じょです｡
最近は死んでるのでコードも全然書いてませんでした｡&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1.+%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;1. はじめに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;VimでScalaを書いている､というと赤黒いアイコンを思い出すかもしれないが､そんな感じになっている｡
動機としては､最近一切コードを書いてなかったのでなにか作ろうと思い､またScalaも以前から少し書いてみようと思っていたのでこの機会にと｡
Vimでやろうとしたのは当然手元に(Neo)Vimがあるからだ｡&lt;/p&gt;
&lt;h1 id=&quot;2.+%E3%83%97%E3%83%A9%E3%82%AE%E3%83%B3&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2.+%E3%83%97%E3%83%A9%E3%82%AE%E3%83%B3&quot;&gt;2. プラギン&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;2-1.+%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fderekwyatt%2Fvim-scala%22%3Evim-scala%3C%2Fa%3E%0A&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#2-1.+%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fderekwyatt%2Fvim-scala%22%3Evim-scala%3C%2Fa%3E%0A&quot;&gt;2-1. &lt;/a&gt;&lt;a href=&quot;https://github.com/derekwyatt/vim-scala&quot;&gt;vim-scala&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;シンタックスハイライトが寂しいので入れる｡&lt;/p&gt;
&lt;h2 id=&quot;2-2.+%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fensime%2Fensime-vim%22%3Eensime-vim%3C%2Fa%3E%0A&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#2-2.+%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fensime%2Fensime-vim%22%3Eensime-vim%3C%2Fa%3E%0A&quot;&gt;2-2. &lt;/a&gt;&lt;a href=&quot;https://github.com/ensime/ensime-vim&quot;&gt;ensime-vim&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Scalaも補完がされてほしい｡
VimでJava/Scalaというと､EclimというEclipseの情報をVimから引っ張ってグニャグニャするやつがありますが､俺達VimmerとしてはエディタのためにIDEを使うのはなんとなくはばかられる｡&lt;/p&gt;
&lt;p&gt;(中略)&lt;/p&gt;
&lt;p&gt;特にArchLinux(でyaourt)を使っており､Pythonなんて書かねーよハゲということでpipも基本的に触らない人用にインストールガイドを書こう｡
だいたいは&lt;a href=&quot;http://ensime.github.io/editors/vim/install/&quot;&gt;公式のインストールガイド&lt;/a&gt;に則ればいい｡&lt;/p&gt;
&lt;h3 id=&quot;2-2-1.+Python+modules&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-2-1.+Python+modules&quot;&gt;2-2-1. Python modules&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;注意する点はpipに関する記述だが､Pythonは3で問題ない｡
pipでなくpacman/yourtに任せたいので､公式リポジトリから&lt;em&gt;python-websocket-client&lt;/em&gt;､AURから&lt;em&gt;python-sexpdata&lt;/em&gt;を引っ張る｡
後者は微妙にメンテされておらず､PKGSBUILDをいじる必要がある｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;# http -&amp;gt; httpsにするだけだが
&lt;span class=&quot;gd&quot;&gt;-source=(&quot;http://pypi.python.org/packages/source/s/sexpdata/sexpdata-${pkgver}.tar.gz&quot;)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+source=(&quot;https://pypi.python.org/packages/source/s/sexpdata/sexpdata-${pkgver}.tar.gz&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-2-2.+sbt+plugin&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#2-2-2.+sbt+plugin&quot;&gt;2-2-2. sbt plugin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;あとはsbtのグローバルプラグインに以下を追加する｡&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;addSbtPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.ensime&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sbt-ensime&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2.6.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sbtで&lt;code&gt;ensimeConfig&lt;/code&gt;を実行すると､プロジェクトルートに&lt;code&gt;.ensime&lt;/code&gt;が生成される｡&lt;/p&gt;
&lt;h2 id=&quot;2-3.+%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fsbdchd%2Fneoformat%22%3Eneoformat%3C%2Fa%3E%0A&quot;&gt;
&lt;a class=&quot;headerlink&quot; href=&quot;#2-3.+%3Ca+href%3D%22https%3A%2F%2Fgithub.com%2Fsbdchd%2Fneoformat%22%3Eneoformat%3C%2Fa%3E%0A&quot;&gt;2-3. &lt;/a&gt;&lt;a href=&quot;https://github.com/sbdchd/neoformat&quot;&gt;neoformat&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;フォーマッター｡ScalaもscalafmtがあればOK｡
ただ何もしないとフォーマット時にファイル先頭にゴミが入るので以下をvimrcに追加&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neoformat_scala_scalafmt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'exe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'scalafmt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'replace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#3.+%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB&quot;&gt;3. おわりに&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;人生おわった&lt;/p&gt;</description>
        <pubDate>Sun, 27 May 2018 00:00:00 +0900</pubDate>
        <link>https://nymphium.github.io/2018/05/27/Ensime-vim%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B.html</link>
        <guid isPermaLink="true">https://nymphium.github.io/2018/05/27/Ensime-vim%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B.html</guid>
        
        <category>Scala</category>
        
        <category>Vim</category>
        
        <category>ArchLinux</category>
        
        
      </item>
    
  </channel>
</rss>
